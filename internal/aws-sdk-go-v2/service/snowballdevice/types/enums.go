// Code generated by smithy-go-codegen DO NOT EDIT.

package types

type ClusterAssociationState string

// Enum values for ClusterAssociationState.
const (
	ClusterAssociationStateAssociated     ClusterAssociationState = "ASSOCIATED"
	ClusterAssociationStateAssociating    ClusterAssociationState = "ASSOCIATING"
	ClusterAssociationStateDisassociated  ClusterAssociationState = "DISASSOCIATED"
	ClusterAssociationStateDisassociating ClusterAssociationState = "DISASSOCIATING"
)

// Values returns all known values for ClusterAssociationState. Note that this can
// be expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (ClusterAssociationState) Values() []ClusterAssociationState {
	return []ClusterAssociationState{
		"ASSOCIATED",
		"ASSOCIATING",
		"DISASSOCIATED",
		"DISASSOCIATING",
	}
}

type DirectNetworkDriver string

// Enum values for DirectNetworkDriver.
const (
	DirectNetworkDriverIxgbevf  DirectNetworkDriver = "ixgbevf"
	DirectNetworkDriverMlx5Core DirectNetworkDriver = "mlx5_core"
)

// Values returns all known values for DirectNetworkDriver. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (DirectNetworkDriver) Values() []DirectNetworkDriver {
	return []DirectNetworkDriver{
		"ixgbevf",
		"mlx5_core",
	}
}

type InstallState string

// Enum values for InstallState.
const (
	InstallStateNa             InstallState = "NA"
	InstallStateDecrypting     InstallState = "DECRYPTING"
	InstallStateDecryptFailed  InstallState = "DECRYPT_FAILED"
	InstallStateDownloading    InstallState = "DOWNLOADING"
	InstallStateDownloadFailed InstallState = "DOWNLOAD_FAILED"
	InstallStateDownloaded     InstallState = "DOWNLOADED"
	InstallStateInstalling     InstallState = "INSTALLING"
	InstallStateRequireReboot  InstallState = "REQUIRE_REBOOT"
	InstallStateInstallFailed  InstallState = "INSTALL_FAILED"
)

// Values returns all known values for InstallState. Note that this can be expanded
// in the future, and so it is only as up to date as the client. The ordering of
// this slice is not guaranteed to be stable across updates.
func (InstallState) Values() []InstallState {
	return []InstallState{
		"NA",
		"DECRYPTING",
		"DECRYPT_FAILED",
		"DOWNLOADING",
		"DOWNLOAD_FAILED",
		"DOWNLOADED",
		"INSTALLING",
		"REQUIRE_REBOOT",
		"INSTALL_FAILED",
	}
}

type IpAddressAssignment string

// Enum values for IpAddressAssignment.
const (
	IpAddressAssignmentDhcp   IpAddressAssignment = "DHCP"
	IpAddressAssignmentStatic IpAddressAssignment = "STATIC"
)

// Values returns all known values for IpAddressAssignment. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (IpAddressAssignment) Values() []IpAddressAssignment {
	return []IpAddressAssignment{
		"DHCP",
		"STATIC",
	}
}

type NetworkReachabilityState string

// Enum values for NetworkReachabilityState.
const (
	NetworkReachabilityStateReachable   NetworkReachabilityState = "REACHABLE"
	NetworkReachabilityStateUnreachable NetworkReachabilityState = "UNREACHABLE"
)

// Values returns all known values for NetworkReachabilityState. Note that this can
// be expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (NetworkReachabilityState) Values() []NetworkReachabilityState {
	return []NetworkReachabilityState{
		"REACHABLE",
		"UNREACHABLE",
	}
}

type PhysicalConnectorType string

// Enum values for PhysicalConnectorType.
const (
	PhysicalConnectorTypeRj45    PhysicalConnectorType = "RJ45"
	PhysicalConnectorTypeRj452   PhysicalConnectorType = "RJ45_2"
	PhysicalConnectorTypeSfpPlus PhysicalConnectorType = "SFP_PLUS"
	PhysicalConnectorTypeQsfp    PhysicalConnectorType = "QSFP"
	PhysicalConnectorTypeWifi    PhysicalConnectorType = "WIFI"
)

// Values returns all known values for PhysicalConnectorType. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (PhysicalConnectorType) Values() []PhysicalConnectorType {
	return []PhysicalConnectorType{
		"RJ45",
		"RJ45_2",
		"SFP_PLUS",
		"QSFP",
		"WIFI",
	}
}

type RemoteManagementState string

// Enum values for RemoteManagementState.
const (
	RemoteManagementStateInstalledAutostart RemoteManagementState = "INSTALLED_AUTOSTART"
	RemoteManagementStateInstalledOnly      RemoteManagementState = "INSTALLED_ONLY"
)

// Values returns all known values for RemoteManagementState. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (RemoteManagementState) Values() []RemoteManagementState {
	return []RemoteManagementState{
		"INSTALLED_AUTOSTART",
		"INSTALLED_ONLY",
	}
}

type ServiceStatusState string

// Enum values for ServiceStatusState.
const (
	ServiceStatusStateInactive     ServiceStatusState = "INACTIVE"
	ServiceStatusStateDeactivating ServiceStatusState = "DEACTIVATING"
	ServiceStatusStateDeactivated  ServiceStatusState = "DEACTIVATED"
	ServiceStatusStateActivating   ServiceStatusState = "ACTIVATING"
	ServiceStatusStateActive       ServiceStatusState = "ACTIVE"
)

// Values returns all known values for ServiceStatusState. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (ServiceStatusState) Values() []ServiceStatusState {
	return []ServiceStatusState{
		"INACTIVE",
		"DEACTIVATING",
		"DEACTIVATED",
		"ACTIVATING",
		"ACTIVE",
	}
}

type ShippingLabelUpdateStatus string

// Enum values for ShippingLabelUpdateStatus.
const (
	ShippingLabelUpdateStatusLabelStateUnavailable ShippingLabelUpdateStatus = "LABEL_STATE_UNAVAILABLE"
	ShippingLabelUpdateStatusLabelFound            ShippingLabelUpdateStatus = "LABEL_FOUND"
	ShippingLabelUpdateStatusLabelDownloaded       ShippingLabelUpdateStatus = "LABEL_DOWNLOADED"
	ShippingLabelUpdateStatusLabelDownloadFailed   ShippingLabelUpdateStatus = "LABEL_DOWNLOAD_FAILED"
	ShippingLabelUpdateStatusLabelDecrypted        ShippingLabelUpdateStatus = "LABEL_DECRYPTED"
	ShippingLabelUpdateStatusLabelDecryptedFailed  ShippingLabelUpdateStatus = "LABEL_DECRYPTED_FAILED"
	ShippingLabelUpdateStatusLabelCopyFailed       ShippingLabelUpdateStatus = "LABEL_COPY_FAILED"
	ShippingLabelUpdateStatusLabelReadyForDisplay  ShippingLabelUpdateStatus = "LABEL_READY_FOR_DISPLAY"
	ShippingLabelUpdateStatusDisplayRebooting      ShippingLabelUpdateStatus = "DISPLAY_REBOOTING"
	ShippingLabelUpdateStatusLabelDisplayTimeout   ShippingLabelUpdateStatus = "LABEL_DISPLAY_TIMEOUT"
	ShippingLabelUpdateStatusLabelDisplayIgnored   ShippingLabelUpdateStatus = "LABEL_DISPLAY_IGNORED"
	ShippingLabelUpdateStatusLabelOnDisplay        ShippingLabelUpdateStatus = "LABEL_ON_DISPLAY"
)

// Values returns all known values for ShippingLabelUpdateStatus. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
// The ordering of this slice is not guaranteed to be stable across updates.
func (ShippingLabelUpdateStatus) Values() []ShippingLabelUpdateStatus {
	return []ShippingLabelUpdateStatus{
		"LABEL_STATE_UNAVAILABLE",
		"LABEL_FOUND",
		"LABEL_DOWNLOADED",
		"LABEL_DOWNLOAD_FAILED",
		"LABEL_DECRYPTED",
		"LABEL_DECRYPTED_FAILED",
		"LABEL_COPY_FAILED",
		"LABEL_READY_FOR_DISPLAY",
		"DISPLAY_REBOOTING",
		"LABEL_DISPLAY_TIMEOUT",
		"LABEL_DISPLAY_IGNORED",
		"LABEL_ON_DISPLAY",
	}
}

type TimeSourceState string

// Enum values for TimeSourceState.
const (
	TimeSourceStateCurrent      TimeSourceState = "CURRENT"
	TimeSourceStateCombined     TimeSourceState = "COMBINED"
	TimeSourceStateExcluded     TimeSourceState = "EXCLUDED"
	TimeSourceStateLost         TimeSourceState = "LOST"
	TimeSourceStateUnacceptable TimeSourceState = "UNACCEPTABLE"
)

// Values returns all known values for TimeSourceState. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (TimeSourceState) Values() []TimeSourceState {
	return []TimeSourceState{
		"CURRENT",
		"COMBINED",
		"EXCLUDED",
		"LOST",
		"UNACCEPTABLE",
	}
}

type TimeSourceType string

// Enum values for TimeSourceType.
const (
	TimeSourceTypeServer TimeSourceType = "SERVER"
	TimeSourceTypePeer   TimeSourceType = "PEER"
)

// Values returns all known values for TimeSourceType. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (TimeSourceType) Values() []TimeSourceType {
	return []TimeSourceType{
		"SERVER",
		"PEER",
	}
}

type UnlockStatusState string

// Enum values for UnlockStatusState.
const (
	UnlockStatusStateLocked    UnlockStatusState = "LOCKED"
	UnlockStatusStateUnlocked  UnlockStatusState = "UNLOCKED"
	UnlockStatusStateUnlocking UnlockStatusState = "UNLOCKING"
)

// Values returns all known values for UnlockStatusState. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (UnlockStatusState) Values() []UnlockStatusState {
	return []UnlockStatusState{
		"LOCKED",
		"UNLOCKED",
		"UNLOCKING",
	}
}
