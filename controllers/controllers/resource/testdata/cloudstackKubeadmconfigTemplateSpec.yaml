apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
kind: KubeadmConfigTemplate
metadata:
  name: test_cluster-md-0-template-1234567890000
  namespace: eksa-system
spec:
  template:
    spec:
      format: cloud-config
      joinConfiguration:
        nodeRegistration:
          criSocket: /var/run/containerd/containerd.sock
          kubeletExtraArgs:
            anonymous-auth: "false"
            provider-id: cloudstack:///'{{ ds.meta_data.instance_id }}'
            read-only-port: "0"
            tls-cipher-suites: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
          name: '{{ ds.meta_data.local_hostname }}'
          taints: []
      preKubeadmCommands:
        - swapoff -a
        - hostname "{{ ds.meta_data.local_hostname }}"
        - echo "::1         ipv6-localhost ipv6-loopback" >/etc/hosts
        - echo "127.0.0.1   localhost" >>/etc/hosts
        - echo "127.0.0.1   {{ ds.meta_data.local_hostname }}" >>/etc/hosts
        - echo "{{ ds.meta_data.local_hostname }}" >/etc/hostname
        - mountPath=/data-small
        - mountPathTemp=$(mktemp -d ${mountPath}-XXXXX)
        - devname=$(lsblk -f -l -o NAME,FSTYPE -J | jq -r ' .blockdevices[-1] | .name ')
        - devfstype=$(lsblk -f -l -o NAME,FSTYPE -J | jq -r ' .blockdevices[-1] | .fstype ')
        - rootfstype=$(lsblk -f -l -o NAME,FSTYPE,MOUNTPOINT -J | jq -r '.blockdevices[] | select(.mountpoint == "/") | .fstype ')
        - if [ "${devfstype}" == "null" ]; then echo "type=83" | sfdisk /dev/${devname} && mkfs -t ${rootfstype} /dev/${devname}1 && mount /dev/${devname}1 ${mountPathTemp} && tempMounted=true ; else echo "data disk dev not found"; fi
        - if [ "${tempMounted}" == "true" ] && [ -d ${mountPath} ]; then cp -rp ${mountPath}/* ${mountPathTemp} && umount ${mountPathTemp} && copied=true ; else "echo no need to copy"; fi
        - if [ "${copied}" == "true" ]; then echo /dev/${devname}1 ${mountPath} ${rootfstype} defaults 0 0 >> /etc/fstab && mount /dev/${devname}1 ${mountPath} && rm -rf ${mountPathTemp} ; else "mount failed"; fi
      users:
        - name: capc
          sshAuthorizedKeys:
            - 'ssh-rsa ssh_key_value'
          sudo: ALL=(ALL) NOPASSWD:ALL