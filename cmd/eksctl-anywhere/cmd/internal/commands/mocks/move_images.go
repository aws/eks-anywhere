// Code generated by MockGen. DO NOT EDIT.
// Source: cmd/eksctl-anywhere/cmd/internal/commands/move_images.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	v1alpha1 "github.com/aws/eks-anywhere/release/api/v1alpha1"
	gomock "github.com/golang/mock/gomock"
)

// MockReader is a mock of Reader interface.
type MockReader struct {
	ctrl     *gomock.Controller
	recorder *MockReaderMockRecorder
}

// MockReaderMockRecorder is the mock recorder for MockReader.
type MockReaderMockRecorder struct {
	mock *MockReader
}

// NewMockReader creates a new mock instance.
func NewMockReader(ctrl *gomock.Controller) *MockReader {
	mock := &MockReader{ctrl: ctrl}
	mock.recorder = &MockReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReader) EXPECT() *MockReaderMockRecorder {
	return m.recorder
}

// ReadImages mocks base method.
func (m *MockReader) ReadImages(eksaVersion string) ([]v1alpha1.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadImages", eksaVersion)
	ret0, _ := ret[0].([]v1alpha1.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadImages indicates an expected call of ReadImages.
func (mr *MockReaderMockRecorder) ReadImages(eksaVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadImages", reflect.TypeOf((*MockReader)(nil).ReadImages), eksaVersion)
}

// MockMover is a mock of Mover interface.
type MockMover struct {
	ctrl     *gomock.Controller
	recorder *MockMoverMockRecorder
}

// MockMoverMockRecorder is the mock recorder for MockMover.
type MockMoverMockRecorder struct {
	mock *MockMover
}

// NewMockMover creates a new mock instance.
func NewMockMover(ctrl *gomock.Controller) *MockMover {
	mock := &MockMover{ctrl: ctrl}
	mock.recorder = &MockMoverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMover) EXPECT() *MockMoverMockRecorder {
	return m.recorder
}

// Move mocks base method.
func (m *MockMover) Move(ctx context.Context, images ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range images {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Move", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Move indicates an expected call of Move.
func (mr *MockMoverMockRecorder) Move(ctx interface{}, images ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, images...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Move", reflect.TypeOf((*MockMover)(nil).Move), varargs...)
}
