// Code generated by MockGen. DO NOT EDIT.
// Source: cmd/eksctl-anywhere/cmd/internal/commands/artifacts/import_tools_image.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUnPackager is a mock of UnPackager interface.
type MockUnPackager struct {
	ctrl     *gomock.Controller
	recorder *MockUnPackagerMockRecorder
}

// MockUnPackagerMockRecorder is the mock recorder for MockUnPackager.
type MockUnPackagerMockRecorder struct {
	mock *MockUnPackager
}

// NewMockUnPackager creates a new mock instance.
func NewMockUnPackager(ctrl *gomock.Controller) *MockUnPackager {
	mock := &MockUnPackager{ctrl: ctrl}
	mock.recorder = &MockUnPackagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnPackager) EXPECT() *MockUnPackagerMockRecorder {
	return m.recorder
}

// UnPackage mocks base method.
func (m *MockUnPackager) UnPackage(orgFile, dstFolder string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnPackage", orgFile, dstFolder)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnPackage indicates an expected call of UnPackage.
func (mr *MockUnPackagerMockRecorder) UnPackage(orgFile, dstFolder interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnPackage", reflect.TypeOf((*MockUnPackager)(nil).UnPackage), orgFile, dstFolder)
}
