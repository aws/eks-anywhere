version: 0.2

env:
  variables:
    INTEGRATION_TEST_MAX_EC2_COUNT: 165
    INTEGRATION_TEST_MAX_CONCURRENT_TEST_COUNT: 165
    T_CLOUDSTACK_CIDR: "10.11.255.0/24"
    CLOUDSTACK_PROVIDER: true
    SKIPPED_TESTS: "TestTinkerbellKubernetes123RedHatSimpleFlow,TestVSphereKubernetes123RedHatSimpleFlow,TestTinkerbellKubernetes122SkipPowerActions,TestTinkerbellKubernetes121ExternalEtcdSimpleFlow,TestCloudStackKubernetes120OIDC,TestCloudStackKubernetes121OIDC,TestCloudStackKubernetes121RedhatProxyConfig,TestCloudStackKubernetes121RedhatRegistryMirrorAndCert,TestSnowKubernetes121SimpleFlow,TestSnowKubernetes122SimpleFlow,TestSnowKubernetes123SimpleFlow,TestSnowKubernetes121OIDC,TestSnowKubernetes121UbuntuProxyConfig,TestSnowKubernetes123UbuntuRemoveWorkerNodeGroups,TestSnowKubernetes123LabelsUbuntu,TestSnowKubernetes123TaintsUbuntu,TestSnowKubernetes121To122UbuntuUpgrade,TestSnowKubernetes122To123UbuntuMultipleFieldsUpgrade,TestCPackagesDockerUbuntuKubernetes122SimpleFlow,TestCPackagesHarborInstallSimpleFlow,TestCPackagesDockerUbuntuKubernetes121SimpleFlow,TestCPackagesDockerUbuntuKubernetes120SimpleFlow,TestCPackagesVSphereKubernetes122BottleRocketSimpleFlow,TestCPackagesVSphereKubernetes121SimpleFlow,TestCPackagesVSphereKubernetes122SimpleFlow,TestCPackagesVSphereKubernetes121BottleRocketSimpleFlow,TestCPackagesVSphereKubernetes120SimpleFlow,TestSnowKubernetes122To123AWSIamAuthUpgrade,TestSnowKubernetes121UbuntuAWSIamAuth"
    EKSA_GIT_KNOWN_HOSTS: "/tmp/known_hosts"
    EKSA_GIT_PRIVATE_KEY: "/tmp/private-key"
    T_TINKERBELL_MAX_HARDWARE_PER_TEST: 4
    T_TINKERBELL_INVENTORY_CSV: "hardware-manifests/inventory.csv"
    T_TINKERBELL_BOOTSTRAP_INTERFACE: "ens192"
    TEST_RUNNER_GOVC_LIBRARY: "eks-a-templates"
    TEST_RUNNER_GOVC_TEMPLATE: "eks-a-admin-ci"
    INTEGRATION_TEST_INFRA_CONFIG: "/tmp/test-infra.yml"
    T_VSPHERE_TEMPLATE_UBUNTU_KUBERNETES_1_20_EKS_20: "/SDDC-Datacenter/vm/Templates/ubuntu-kube-v1-20"
    T_VSPHERE_TEMPLATE_UBUNTU_KUBERNETES_1_21_EKS_18: "/SDDC-Datacenter/vm/Templates/ubuntu-kube-v1-21"
    T_VSPHERE_TEMPLATE_UBUNTU_KUBERNETES_1_22_EKS_10: "/SDDC-Datacenter/vm/Templates/ubuntu-kube-v1-22"
    T_VSPHERE_TEMPLATE_UBUNTU_KUBERNETES_1_23_EKS_5: "/SDDC-Datacenter/vm/Templates/ubuntu-kube-v1-23"
    T_VSPHERE_TEMPLATE_BOTTLEROCKET_KUBERNETES_1_20_EKS_20: "/SDDC-Datacenter/vm/Templates/bottlerocket-kube-v1-20"
    T_VSPHERE_TEMPLATE_BOTTLEROCKET_KUBERNETES_1_21_EKS_18: "/SDDC-Datacenter/vm/Templates/bottlerocket-kube-v1-21"
  secrets-manager:
    EKSA_VSPHERE_USERNAME: "vsphere_ci_beta_connection:vsphere_username"
    EKSA_VSPHERE_PASSWORD: "vsphere_ci_beta_connection:vsphere_password"
    VSPHERE_SERVER: "vsphere_ci_beta_connection:vsphere_url"
    GOVC_INSECURE: "vsphere_ci_beta_connection:govc_insecure"
    GOVC_DATACENTER: "vsphere_ci_beta_connection:vsphere_datacenter"
    T_VSPHERE_DATACENTER: "vsphere_ci_beta_connection:vsphere_datacenter"
    T_VSPHERE_DATASTORE: "vsphere_ci_beta_connection:datastore"
    T_VSPHERE_FOLDER: "vsphere_ci_beta_connection:folder"
    T_VSPHERE_NETWORK: "vsphere_ci_beta_connection:network"
    T_VSPHERE_PRIVATE_NETWORK: "vsphere_ci_beta_connection:private_network"
    T_VSPHERE_CIDR: "vsphere_ci_beta_connection:vsphere_cidr"
    T_VSPHERE_PRIVATE_NETWORK_CIDR: "vsphere_ci_beta_connection:vsphere_private_network_cidr"
    T_VSPHERE_RESOURCE_POOL: "vsphere_ci_beta_connection:resource_pool"
    T_VSPHERE_SERVER: "vsphere_ci_beta_connection:server"
    T_VSPHERE_SSH_AUTHORIZED_KEY: "vsphere_ci_beta_connection:ssh_authorized_key"
    T_VSPHERE_TEMPLATE_UBUNTU_1_18: "vsphere_ci_beta_connection:template_18"
    T_VSPHERE_TEMPLATE_UBUNTU_1_19: "vsphere_ci_beta_connection:template_19"
    T_VSPHERE_TEMPLATE_UBUNTU_1_20: "vsphere_ci_beta_connection:template_20"
    T_VSPHERE_TEMPLATE_UBUNTU_1_21: "vsphere_ci_beta_connection:template_21"
    T_VSPHERE_TEMPLATE_UBUNTU_1_22: "vsphere_ci_beta_connection:template_22"
    T_VSPHERE_TEMPLATE_UBUNTU_1_23: "vsphere_ci_beta_connection:template_23"
    T_VSPHERE_TEMPLATE_UBUNTU_1_24: "vsphere_ci_beta_connection:template_24"
    T_VSPHERE_TEMPLATE_UBUNTU_KUBERNETES_1_20_EKS_19: "vsphere_ci_beta_connection:template_20"
    T_VSPHERE_TEMPLATE_UBUNTU_KUBERNETES_1_21_EKS_17: "vsphere_ci_beta_connection:template_21"
    T_VSPHERE_TEMPLATE_UBUNTU_KUBERNETES_1_22_EKS_9: "vsphere_ci_beta_connection:template_22"
    T_VSPHERE_TEMPLATE_UBUNTU_KUBERNETES_1_23_EKS_4: "vsphere_ci_beta_connection:template_23"
    T_VSPHERE_TEMPLATE_UBUNTU_KUBERNETES_1_20_EKS_18: "vsphere_ci_beta_connection:template_ubuntu_20_eks_18"
    T_VSPHERE_TEMPLATE_UBUNTU_KUBERNETES_1_21_EKS_16: "vsphere_ci_beta_connection:template_ubuntu_21_eks_16"
    T_VSPHERE_TEMPLATE_UBUNTU_KUBERNETES_1_22_EKS_9: "vsphere_ci_beta_connection:template_ubuntu_22_eks_9"
    T_VSPHERE_TEMPLATE_UBUNTU_KUBERNETES_1_23_EKS_3: "vsphere_ci_beta_connection:template_ubuntu_23_eks_3"
    T_VSPHERE_TEMPLATE_REDHAT_1_23: "vsphere_ci_beta_connection:template_redhat_23"
    T_VSPHERE_TEMPLATE_BR_1_20: "vsphere_ci_beta_connection:template_br_20"
    T_VSPHERE_TEMPLATE_BR_1_21: "vsphere_ci_beta_connection:template_br_21"
    T_VSPHERE_TEMPLATE_BR_1_22: "vsphere_ci_beta_connection:template_br_22"
    T_VSPHERE_TEMPLATE_BR_1_23: "vsphere_ci_beta_connection:template_br_23"
    T_VSPHERE_TEMPLATE_BOTTLEROCKET_KUBERNETES_1_20_EKS_19: "vsphere_ci_beta_connection:template_br_20"
    T_VSPHERE_TEMPLATE_BOTTLEROCKET_KUBERNETES_1_21_EKS_17: "vsphere_ci_beta_connection:template_br_21"
    T_VSPHERE_TEMPLATE_BOTTLEROCKET_KUBERNETES_1_22_EKS_9: "vsphere_ci_beta_connection:template_br_22"
    T_VSPHERE_TEMPLATE_BOTTLEROCKET_KUBERNETES_1_23_EKS_4: "vsphere_ci_beta_connection:template_br_23"
    T_VSPHERE_TEMPLATE_BOTTLEROCKET_KUBERNETES_1_20_EKS_18: "vsphere_ci_beta_connection:template_bottlerocket_20_eks_18"
    T_VSPHERE_TEMPLATE_BOTTLEROCKET_KUBERNETES_1_21_EKS_16: "vsphere_ci_beta_connection:template_bottlerocket_21_eks_16"
    T_VSPHERE_TEMPLATE_BOTTLEROCKET_KUBERNETES_1_22_EKS_9: "vsphere_ci_beta_connection:template_bottlerocket_22_eks_9"
    T_VSPHERE_TEMPLATE_BOTTLEROCKET_KUBERNETES_1_23_EKS_3: "vsphere_ci_beta_connection:template_bottlerocket_23_eks_3"
    T_VSPHERE_TLS_INSECURE: "vsphere_ci_beta_connection:tls_insecure"
    T_VSPHERE_TLS_THUMBPRINT: "vsphere_ci_beta_connection:tls_thumbprint"
    EKSA_GITHUB_TOKEN: "github-eks-anywhere-flux-bot:github-token"
    T_GITHUB_USER: "github-eks-anywhere-flux-bot:github-user"
    T_GIT_REPOSITORY: "github-eks-anywhere-flux-bot:github-repository"
    T_GIT_SSH_REPO_URL: "github-eks-anywhere-flux-bot:generic-git-repository-url"
    T_HTTP_PROXY_VSPHERE: "proxy-config-data:httpProxyVSphere"
    T_HTTPS_PROXY_VSPHERE: "proxy-config-data:httpsProxyVSphere"
    T_NO_PROXY_VSPHERE: "proxy-config-data:noProxyVSphere"
    T_HTTP_PROXY_CLOUDSTACK: "proxy-config-data:httpProxyCloudStack"
    T_HTTPS_PROXY_CLOUDSTACK: "proxy-config-data:httpsProxyCloudStack"
    T_NO_PROXY_CLOUDSTACK: "proxy-config-data:noProxyCloudStack"
    T_REGISTRY_MIRROR_ENDPOINT: "harbor-registry-data:endpoint"
    T_REGISTRY_MIRROR_PORT: "harbor-registry-data:port"
    T_REGISTRY_MIRROR_USERNAME: "harbor-registry-data:username"
    T_REGISTRY_MIRROR_PASSWORD: "harbor-registry-data:password"
    T_REGISTRY_MIRROR_CA_CERT: "harbor-registry-data:caCert"
    T_REGISTRY_MIRROR_ENDPOINT_TINKERBELL: "harbor-registry-data:tinkerbell_endpoint"
    T_REGISTRY_MIRROR_PORT_TINKERBELL: "harbor-registry-data:tinkerbell_port"
    T_REGISTRY_MIRROR_USERNAME_TINKERBELL: "harbor-registry-data:tinkerbell_username"
    T_REGISTRY_MIRROR_PASSWORD_TINKERBELL: "harbor-registry-data:tinkerbell_password"
    T_REGISTRY_MIRROR_CA_CERT_TINKERBELL: "harbor-registry-data:tinkerbell_caCert"
    T_AWS_IAM_ROLE_ARN: "aws-iam-auth-role:ec2_role_arn"
    T_CLOUDSTACK_DOMAIN: "cloudstack_ci_beta_connection:domain"
    T_CLOUDSTACK_CREDENTIALS: "cloudstack_ci_beta_connection:credentials"
    T_CLOUDSTACK_CREDENTIALS_2: "cloudstack_ci_beta_connection:credentials_2"
    T_CLOUDSTACK_ZONE: "cloudstack_ci_beta_connection:zone"
    T_CLOUDSTACK_ZONE_2: "cloudstack_ci_beta_connection:zone_2"
    T_CLOUDSTACK_ACCOUNT: "cloudstack_ci_beta_connection:account"
    T_CLOUDSTACK_NETWORK: "cloudstack_ci_beta_connection:network"
    T_CLOUDSTACK_NETWORK_2: "cloudstack_ci_beta_connection:network_2"
    T_CLOUDSTACK_MANAGEMENT_SERVER: "cloudstack_ci_beta_connection:management_server"
    T_CLOUDSTACK_MANAGEMENT_SERVER_2: "cloudstack_ci_beta_connection:management_server_2"
    T_CLOUDSTACK_TEMPLATE_REDHAT_1_20: "cloudstack_ci_beta_connection:template_redhat_1_20"
    T_CLOUDSTACK_TEMPLATE_REDHAT_1_21: "cloudstack_ci_beta_connection:template_redhat_1_21"
    T_CLOUDSTACK_COMPUTE_OFFERING_LARGE: "cloudstack_ci_beta_connection:compute_offering_large"
    T_CLOUDSTACK_COMPUTE_OFFERING_LARGER: "cloudstack_ci_beta_connection:compute_offering_larger"
    T_CLOUDSTACK_TLS_INSECURE: "cloudstack_ci_beta_connection:tls_insecure"
    EKSA_CLOUDSTACK_B64ENCODED_SECRET: "cloudstack_ci_beta_connection:b64_encoded_secret"
    T_CLOUDSTACK_POD_CIDR: "cloudstack_ci_beta_connection:pod_cidr"
    T_CLOUDSTACK_SERVICE_CIDR: "cloudstack_ci_beta_connection:service_cidr"
    T_CLOUDSTACK_SSH_AUTHORIZED_KEY: "vsphere_ci_beta_connection:ssh_authorized_key"
    T_TINKERBELL_IMAGE_UBUNTU_1_20: "tinkerbell_ci:image_ubuntu_1_20"
    T_TINKERBELL_IMAGE_UBUNTU_1_21: "tinkerbell_ci:image_ubuntu_1_21"
    T_TINKERBELL_IMAGE_UBUNTU_1_22: "tinkerbell_ci:image_ubuntu_1_22"
    T_TINKERBELL_IMAGE_UBUNTU_1_23: "tinkerbell_ci:image_ubuntu_1_23"
    T_TINKERBELL_IMAGE_REDHAT_1_23: "tinkerbell_ci:image_redhat_1_23"
    T_TINKERBELL_SSH_AUTHORIZED_KEY: "vsphere_ci_beta_connection:ssh_authorized_key"
    T_TINKERBELL_CP_NETWORK_CIDR: "tinkerbell_ci:cp_network_cidr"
    T_TINKERBELL_S3_INVENTORY_CSV_KEY: "tinkerbell_ci:s3_inventory_csv"
    BAREMETAL_BRANCH: "tinkerbell_ci:baremetal_branch"
    TEST_RUNNER_GOVC_USERNAME: "tinkerbell_ci:govc_username"
    TEST_RUNNER_GOVC_PASSWORD: "tinkerbell_ci:govc_password"
    TEST_RUNNER_GOVC_URL: "tinkerbell_ci:govc_url"
    TEST_RUNNER_GOVC_DATACENTER: "tinkerbell_ci:govc_datacenter"
    TEST_RUNNER_GOVC_DATASTORE: "tinkerbell_ci:govc_datastore"
    TEST_RUNNER_GOVC_RESOURCE_POOL: "tinkerbell_ci:govc_resource_pool"
    TEST_RUNNER_GOVC_NETWORK: "tinkerbell_ci:govc_network"
    TEST_RUNNER_GOVC_FOLDER: "tinkerbell_ci:govc_folder"

phases:
  pre_build:
    commands:
      - source ${CODEBUILD_SRC_DIR}/cmd/integration_test/build/script/setup_profile.sh
      - source ${CODEBUILD_SRC_DIR}/cmd/integration_test/build/script/create_infra_config.sh
      - ${CODEBUILD_SRC_DIR}/cmd/integration_test/build/script/start_docker.sh
      - export CLUSTER_NAME_PREFIX="${BRANCH_NAME//./-}"
      - >
        ./bin/test e2e cleanup vsphere
        -n ${CLUSTER_NAME_PREFIX}
        -v 4
  build:
    commands:
      - export JOB_ID=$CODEBUILD_BUILD_ID
      - BUNDLES_OVERRIDE=false
      - |
        if [ -f ./bin/local-bundle-release.yaml ]; then
          BUNDLES_OVERRIDE=true
        fi
      - >
        ./bin/test e2e run
        -c ${INTEGRATION_TEST_INFRA_CONFIG}
        -s ${INTEGRATION_TEST_STORAGE_BUCKET}
        -j ${JOB_ID}
        -i ${INTEGRATION_TEST_INSTANCE_PROFILE}
        -m ${INTEGRATION_TEST_MAX_EC2_COUNT}
        -p ${INTEGRATION_TEST_MAX_CONCURRENT_TEST_COUNT}
        -r 'Test'
        -v 4
        --skip ${SKIPPED_TESTS}
        --bundles-override=${BUNDLES_OVERRIDE}
        --cleanup-vms=true
        --test-report-folder=reports
        --branch-name=${BRANCH_NAME}
        --baremetal-branch=${BAREMETAL_BRANCH}
  post_build:
    commands:
      - unset AWS_SDK_LOAD_CONFIG AWS_PROFILE
      - export GIT_HASH=$(cat bin/githash)
      - export CLUSTER_NAME_PREFIX="${BRANCH_NAME//./-}"
      - >
        ./cmd/integration_test/build/script/upload_artifacts.sh
        $ARTIFACTS_BUCKET
        $CODEBUILD_SRC_DIR
        "eks-a-cli"
        $CODEBUILD_BUILD_NUMBER
        $GIT_HASH
        "linux,darwin"
        "amd64"
        $BRANCH_NAME
        false
      - >
        ./bin/test e2e cleanup vsphere
        -n ${CLUSTER_NAME_PREFIX}
        -v 4
      - >
        ./bin/test e2e cleanup cloudstack
        -n ${CLUSTER_NAME_PREFIX}
        -v 4
      # Clean up test runner instances in EKS-A Baremetal lab
      - export EKSA_VSPHERE_USERNAME=${TEST_RUNNER_GOVC_USERNAME}
      - export EKSA_VSPHERE_PASSWORD=${TEST_RUNNER_GOVC_PASSWORD}
      - export VSPHERE_SERVER=${TEST_RUNNER_GOVC_URL}
      - export GOVC_DATACENTER=${TEST_RUNNER_GOVC_DATACENTER}
      - export NODE_PREFIX=eksa-e2e-$CODEBUILD_BUILD_ID
      - >
        if [[ ${#NODE_PREFIX} -gt 80 ]] ; then
          echo "Truncating node prefix to 80 chars for vsphere test runner nodes"
          START="$((${#NODE_PREFIX}-79))"
          export NODE_PREFIX=$(echo "${NODE_PREFIX}" | cut -c $START-)
        fi
      - >
        ./bin/test e2e cleanup vsphere
        -n ${NODE_PREFIX}
        -v 4
reports:
  e2e-reports:
    files:
      - reports/junit-testing-*.xml
    file-format: "JUNITXML"
