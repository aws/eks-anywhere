// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/aws/client.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CreateEC2KeyPairs mocks base method.
func (m *MockClient) CreateEC2KeyPairs(ctx context.Context, keyName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEC2KeyPairs", ctx, keyName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEC2KeyPairs indicates an expected call of CreateEC2KeyPairs.
func (mr *MockClientMockRecorder) CreateEC2KeyPairs(ctx, keyName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEC2KeyPairs", reflect.TypeOf((*MockClient)(nil).CreateEC2KeyPairs), ctx, keyName)
}

// ImageExists mocks base method.
func (m *MockClient) ImageExists(ctx context.Context, imageID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImageExists", ctx, imageID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImageExists indicates an expected call of ImageExists.
func (mr *MockClientMockRecorder) ImageExists(ctx, imageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImageExists", reflect.TypeOf((*MockClient)(nil).ImageExists), ctx, imageID)
}

// KeyPairExists mocks base method.
func (m *MockClient) KeyPairExists(ctx context.Context, keyName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KeyPairExists", ctx, keyName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KeyPairExists indicates an expected call of KeyPairExists.
func (mr *MockClientMockRecorder) KeyPairExists(ctx, keyName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeyPairExists", reflect.TypeOf((*MockClient)(nil).KeyPairExists), ctx, keyName)
}
