// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/clients/kubernetes/unauth.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// MockKubectlGetter is a mock of KubectlGetter interface.
type MockKubectlGetter struct {
	ctrl     *gomock.Controller
	recorder *MockKubectlGetterMockRecorder
}

// MockKubectlGetterMockRecorder is the mock recorder for MockKubectlGetter.
type MockKubectlGetterMockRecorder struct {
	mock *MockKubectlGetter
}

// NewMockKubectlGetter creates a new mock instance.
func NewMockKubectlGetter(ctrl *gomock.Controller) *MockKubectlGetter {
	mock := &MockKubectlGetter{ctrl: ctrl}
	mock.recorder = &MockKubectlGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKubectlGetter) EXPECT() *MockKubectlGetterMockRecorder {
	return m.recorder
}

// Apply mocks base method.
func (m *MockKubectlGetter) Apply(ctx context.Context, kubeconfig string, obj runtime.Object) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", ctx, kubeconfig, obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// Apply indicates an expected call of Apply.
func (mr *MockKubectlGetterMockRecorder) Apply(ctx, kubeconfig, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockKubectlGetter)(nil).Apply), ctx, kubeconfig, obj)
}

// Delete mocks base method.
func (m *MockKubectlGetter) Delete(ctx context.Context, resourceType, name, namespace, kubeconfig string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceType, name, namespace, kubeconfig)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockKubectlGetterMockRecorder) Delete(ctx, resourceType, name, namespace, kubeconfig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockKubectlGetter)(nil).Delete), ctx, resourceType, name, namespace, kubeconfig)
}

// GetObject mocks base method.
func (m *MockKubectlGetter) GetObject(ctx context.Context, resourceType, name, namespace, kubeconfig string, obj runtime.Object) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObject", ctx, resourceType, name, namespace, kubeconfig, obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetObject indicates an expected call of GetObject.
func (mr *MockKubectlGetterMockRecorder) GetObject(ctx, resourceType, name, namespace, kubeconfig, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObject", reflect.TypeOf((*MockKubectlGetter)(nil).GetObject), ctx, resourceType, name, namespace, kubeconfig, obj)
}
