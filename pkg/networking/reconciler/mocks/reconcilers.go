// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/networking/reconciler/reconciler.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	cluster "github.com/aws/eks-anywhere/pkg/cluster"
	controller "github.com/aws/eks-anywhere/pkg/controller"
	logr "github.com/go-logr/logr"
	gomock "github.com/golang/mock/gomock"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockCiliumReconciler is a mock of CiliumReconciler interface.
type MockCiliumReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockCiliumReconcilerMockRecorder
}

// MockCiliumReconcilerMockRecorder is the mock recorder for MockCiliumReconciler.
type MockCiliumReconcilerMockRecorder struct {
	mock *MockCiliumReconciler
}

// NewMockCiliumReconciler creates a new mock instance.
func NewMockCiliumReconciler(ctrl *gomock.Controller) *MockCiliumReconciler {
	mock := &MockCiliumReconciler{ctrl: ctrl}
	mock.recorder = &MockCiliumReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCiliumReconciler) EXPECT() *MockCiliumReconcilerMockRecorder {
	return m.recorder
}

// Reconcile mocks base method.
func (m *MockCiliumReconciler) Reconcile(ctx context.Context, logger logr.Logger, client client.Client, spec *cluster.Spec) (controller.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reconcile", ctx, logger, client, spec)
	ret0, _ := ret[0].(controller.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Reconcile indicates an expected call of Reconcile.
func (mr *MockCiliumReconcilerMockRecorder) Reconcile(ctx, logger, client, spec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reconcile", reflect.TypeOf((*MockCiliumReconciler)(nil).Reconcile), ctx, logger, client, spec)
}
