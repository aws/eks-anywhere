// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/networking/cilium/upgrader.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	types "github.com/aws/eks-anywhere/pkg/types"
	gomock "github.com/golang/mock/gomock"
)

// MockupgraderClient is a mock of upgraderClient interface.
type MockupgraderClient struct {
	ctrl     *gomock.Controller
	recorder *MockupgraderClientMockRecorder
}

// MockupgraderClientMockRecorder is the mock recorder for MockupgraderClient.
type MockupgraderClientMockRecorder struct {
	mock *MockupgraderClient
}

// NewMockupgraderClient creates a new mock instance.
func NewMockupgraderClient(ctrl *gomock.Controller) *MockupgraderClient {
	mock := &MockupgraderClient{ctrl: ctrl}
	mock.recorder = &MockupgraderClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockupgraderClient) EXPECT() *MockupgraderClientMockRecorder {
	return m.recorder
}

// Apply mocks base method.
func (m *MockupgraderClient) Apply(ctx context.Context, cluster *types.Cluster, data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", ctx, cluster, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Apply indicates an expected call of Apply.
func (mr *MockupgraderClientMockRecorder) Apply(ctx, cluster, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockupgraderClient)(nil).Apply), ctx, cluster, data)
}

// Delete mocks base method.
func (m *MockupgraderClient) Delete(ctx context.Context, cluster *types.Cluster, data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, cluster, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockupgraderClientMockRecorder) Delete(ctx, cluster, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockupgraderClient)(nil).Delete), ctx, cluster, data)
}

// RolloutRestartCiliumDaemonSet mocks base method.
func (m *MockupgraderClient) RolloutRestartCiliumDaemonSet(ctx context.Context, cluster *types.Cluster) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RolloutRestartCiliumDaemonSet", ctx, cluster)
	ret0, _ := ret[0].(error)
	return ret0
}

// RolloutRestartCiliumDaemonSet indicates an expected call of RolloutRestartCiliumDaemonSet.
func (mr *MockupgraderClientMockRecorder) RolloutRestartCiliumDaemonSet(ctx, cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RolloutRestartCiliumDaemonSet", reflect.TypeOf((*MockupgraderClient)(nil).RolloutRestartCiliumDaemonSet), ctx, cluster)
}

// WaitForCiliumDaemonSet mocks base method.
func (m *MockupgraderClient) WaitForCiliumDaemonSet(ctx context.Context, cluster *types.Cluster) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForCiliumDaemonSet", ctx, cluster)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitForCiliumDaemonSet indicates an expected call of WaitForCiliumDaemonSet.
func (mr *MockupgraderClientMockRecorder) WaitForCiliumDaemonSet(ctx, cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForCiliumDaemonSet", reflect.TypeOf((*MockupgraderClient)(nil).WaitForCiliumDaemonSet), ctx, cluster)
}

// WaitForCiliumDeployment mocks base method.
func (m *MockupgraderClient) WaitForCiliumDeployment(ctx context.Context, cluster *types.Cluster) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForCiliumDeployment", ctx, cluster)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitForCiliumDeployment indicates an expected call of WaitForCiliumDeployment.
func (mr *MockupgraderClientMockRecorder) WaitForCiliumDeployment(ctx, cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForCiliumDeployment", reflect.TypeOf((*MockupgraderClient)(nil).WaitForCiliumDeployment), ctx, cluster)
}

// WaitForPreflightDaemonSet mocks base method.
func (m *MockupgraderClient) WaitForPreflightDaemonSet(ctx context.Context, cluster *types.Cluster) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForPreflightDaemonSet", ctx, cluster)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitForPreflightDaemonSet indicates an expected call of WaitForPreflightDaemonSet.
func (mr *MockupgraderClientMockRecorder) WaitForPreflightDaemonSet(ctx, cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForPreflightDaemonSet", reflect.TypeOf((*MockupgraderClient)(nil).WaitForPreflightDaemonSet), ctx, cluster)
}

// WaitForPreflightDeployment mocks base method.
func (m *MockupgraderClient) WaitForPreflightDeployment(ctx context.Context, cluster *types.Cluster) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForPreflightDeployment", ctx, cluster)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitForPreflightDeployment indicates an expected call of WaitForPreflightDeployment.
func (mr *MockupgraderClientMockRecorder) WaitForPreflightDeployment(ctx, cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForPreflightDeployment", reflect.TypeOf((*MockupgraderClient)(nil).WaitForPreflightDeployment), ctx, cluster)
}
