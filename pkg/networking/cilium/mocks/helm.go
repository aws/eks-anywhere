// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/networking/cilium/templater.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	v1alpha1 "github.com/aws/eks-anywhere/pkg/api/v1alpha1"
	helm "github.com/aws/eks-anywhere/pkg/helm"
	gomock "github.com/golang/mock/gomock"
)

// MockHelmFactory is a mock of HelmClientFactory interface.
type MockHelmFactory struct {
	ctrl     *gomock.Controller
	recorder *MockHelmFactoryMockRecorder
}

// MockHelmFactoryMockRecorder is the mock recorder for MockHelmFactory.
type MockHelmFactoryMockRecorder struct {
	mock *MockHelmFactory
}

// NewMockHelmFactory creates a new mock instance.
func NewMockHelmFactory(ctrl *gomock.Controller) *MockHelmFactory {
	mock := &MockHelmFactory{ctrl: ctrl}
	mock.recorder = &MockHelmFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHelmFactory) EXPECT() *MockHelmFactoryMockRecorder {
	return m.recorder
}

// GetClientForCluster mocks base method.
func (m *MockHelmFactory) GetClientForCluster(ctx context.Context, clus *v1alpha1.Cluster) (helm.RegistryClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientForCluster", ctx, clus)
	ret0, _ := ret[0].(helm.RegistryClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientForCluster indicates an expected call of GetClientForCluster.
func (mr *MockHelmFactoryMockRecorder) GetClientForCluster(ctx, clus interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientForCluster", reflect.TypeOf((*MockHelmFactory)(nil).GetClientForCluster), ctx, clus)
}
