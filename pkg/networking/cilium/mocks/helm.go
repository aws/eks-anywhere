// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/networking/cilium/templater.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	v1alpha1 "github.com/aws/eks-anywhere/pkg/api/v1alpha1"
	helm "github.com/aws/eks-anywhere/pkg/helm"
	gomock "github.com/golang/mock/gomock"
)

// MockHelmClientFactory is a mock of HelmClientFactory interface.
type MockHelmClientFactory struct {
	ctrl     *gomock.Controller
	recorder *MockHelmClientFactoryMockRecorder
}

// MockHelmClientFactoryMockRecorder is the mock recorder for MockHelmClientFactory.
type MockHelmClientFactoryMockRecorder struct {
	mock *MockHelmClientFactory
}

// NewMockHelmClientFactory creates a new mock instance.
func NewMockHelmClientFactory(ctrl *gomock.Controller) *MockHelmClientFactory {
	mock := &MockHelmClientFactory{ctrl: ctrl}
	mock.recorder = &MockHelmClientFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHelmClientFactory) EXPECT() *MockHelmClientFactoryMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockHelmClientFactory) Get(ctx context.Context, clus *v1alpha1.Cluster) (helm.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, clus)
	ret0, _ := ret[0].(helm.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockHelmClientFactoryMockRecorder) Get(ctx, clus interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockHelmClientFactory)(nil).Get), ctx, clus)
}
