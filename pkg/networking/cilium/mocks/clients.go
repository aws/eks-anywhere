// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/networking/cilium/client.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	types "github.com/aws/eks-anywhere/pkg/types"
	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/api/apps/v1"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// ApplyKubeSpecFromBytes mocks base method.
func (m *MockClient) ApplyKubeSpecFromBytes(ctx context.Context, cluster *types.Cluster, data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyKubeSpecFromBytes", ctx, cluster, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyKubeSpecFromBytes indicates an expected call of ApplyKubeSpecFromBytes.
func (mr *MockClientMockRecorder) ApplyKubeSpecFromBytes(ctx, cluster, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyKubeSpecFromBytes", reflect.TypeOf((*MockClient)(nil).ApplyKubeSpecFromBytes), ctx, cluster, data)
}

// DeleteKubeSpecFromBytes mocks base method.
func (m *MockClient) DeleteKubeSpecFromBytes(ctx context.Context, cluster *types.Cluster, data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKubeSpecFromBytes", ctx, cluster, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteKubeSpecFromBytes indicates an expected call of DeleteKubeSpecFromBytes.
func (mr *MockClientMockRecorder) DeleteKubeSpecFromBytes(ctx, cluster, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKubeSpecFromBytes", reflect.TypeOf((*MockClient)(nil).DeleteKubeSpecFromBytes), ctx, cluster, data)
}

// GetDaemonSet mocks base method.
func (m *MockClient) GetDaemonSet(ctx context.Context, name, namespace, kubeconfig string) (*v1.DaemonSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDaemonSet", ctx, name, namespace, kubeconfig)
	ret0, _ := ret[0].(*v1.DaemonSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDaemonSet indicates an expected call of GetDaemonSet.
func (mr *MockClientMockRecorder) GetDaemonSet(ctx, name, namespace, kubeconfig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDaemonSet", reflect.TypeOf((*MockClient)(nil).GetDaemonSet), ctx, name, namespace, kubeconfig)
}

// GetDeployment mocks base method.
func (m *MockClient) GetDeployment(ctx context.Context, name, namespace, kubeconfig string) (*v1.Deployment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeployment", ctx, name, namespace, kubeconfig)
	ret0, _ := ret[0].(*v1.Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeployment indicates an expected call of GetDeployment.
func (mr *MockClientMockRecorder) GetDeployment(ctx, name, namespace, kubeconfig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeployment", reflect.TypeOf((*MockClient)(nil).GetDeployment), ctx, name, namespace, kubeconfig)
}

// RolloutRestartDaemonSet mocks base method.
func (m *MockClient) RolloutRestartDaemonSet(ctx context.Context, name, namespace, kubeconfig string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RolloutRestartDaemonSet", ctx, name, namespace, kubeconfig)
	ret0, _ := ret[0].(error)
	return ret0
}

// RolloutRestartDaemonSet indicates an expected call of RolloutRestartDaemonSet.
func (mr *MockClientMockRecorder) RolloutRestartDaemonSet(ctx, name, namespace, kubeconfig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RolloutRestartDaemonSet", reflect.TypeOf((*MockClient)(nil).RolloutRestartDaemonSet), ctx, name, namespace, kubeconfig)
}
