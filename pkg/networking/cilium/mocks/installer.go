// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/networking/cilium/installer.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	cluster "github.com/aws/eks-anywhere/pkg/cluster"
	cilium "github.com/aws/eks-anywhere/pkg/networking/cilium"
	gomock "github.com/golang/mock/gomock"
)

// MockInstallTemplater is a mock of InstallTemplater interface.
type MockInstallTemplater struct {
	ctrl     *gomock.Controller
	recorder *MockInstallTemplaterMockRecorder
}

// MockInstallTemplaterMockRecorder is the mock recorder for MockInstallTemplater.
type MockInstallTemplaterMockRecorder struct {
	mock *MockInstallTemplater
}

// NewMockInstallTemplater creates a new mock instance.
func NewMockInstallTemplater(ctrl *gomock.Controller) *MockInstallTemplater {
	mock := &MockInstallTemplater{ctrl: ctrl}
	mock.recorder = &MockInstallTemplaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstallTemplater) EXPECT() *MockInstallTemplaterMockRecorder {
	return m.recorder
}

// GenerateManifest mocks base method.
func (m *MockInstallTemplater) GenerateManifest(ctx context.Context, spec *cluster.Spec, opts ...cilium.ManifestOpt) ([]byte, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, spec}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GenerateManifest", varargs...)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateManifest indicates an expected call of GenerateManifest.
func (mr *MockInstallTemplaterMockRecorder) GenerateManifest(ctx, spec interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, spec}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateManifest", reflect.TypeOf((*MockInstallTemplater)(nil).GenerateManifest), varargs...)
}
