// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/clusterapi/upgrader.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	cluster "github.com/aws/eks-anywhere/pkg/cluster"
	clusterapi "github.com/aws/eks-anywhere/pkg/clusterapi"
	types "github.com/aws/eks-anywhere/pkg/types"
	gomock "github.com/golang/mock/gomock"
)

// MockCAPIClient is a mock of CAPIClient interface.
type MockCAPIClient struct {
	ctrl     *gomock.Controller
	recorder *MockCAPIClientMockRecorder
}

// MockCAPIClientMockRecorder is the mock recorder for MockCAPIClient.
type MockCAPIClientMockRecorder struct {
	mock *MockCAPIClient
}

// NewMockCAPIClient creates a new mock instance.
func NewMockCAPIClient(ctrl *gomock.Controller) *MockCAPIClient {
	mock := &MockCAPIClient{ctrl: ctrl}
	mock.recorder = &MockCAPIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCAPIClient) EXPECT() *MockCAPIClientMockRecorder {
	return m.recorder
}

// Upgrade mocks base method.
func (m *MockCAPIClient) Upgrade(ctx context.Context, managementCluster *types.Cluster, newSpec *cluster.Spec, changeDiff *clusterapi.CAPIChangeDiff) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upgrade", ctx, managementCluster, newSpec, changeDiff)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upgrade indicates an expected call of Upgrade.
func (mr *MockCAPIClientMockRecorder) Upgrade(ctx, managementCluster, newSpec, changeDiff interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upgrade", reflect.TypeOf((*MockCAPIClient)(nil).Upgrade), ctx, managementCluster, newSpec, changeDiff)
}
