// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/curatedpackages/packagecontrollerclient.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockChartInstaller is a mock of ChartInstaller interface.
type MockChartInstaller struct {
	ctrl     *gomock.Controller
	recorder *MockChartInstallerMockRecorder
}

// MockChartInstallerMockRecorder is the mock recorder for MockChartInstaller.
type MockChartInstallerMockRecorder struct {
	mock *MockChartInstaller
}

// NewMockChartInstaller creates a new mock instance.
func NewMockChartInstaller(ctrl *gomock.Controller) *MockChartInstaller {
	mock := &MockChartInstaller{ctrl: ctrl}
	mock.recorder = &MockChartInstallerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChartInstaller) EXPECT() *MockChartInstallerMockRecorder {
	return m.recorder
}

// InstallChartFromName mocks base method.
func (m *MockChartInstaller) InstallChartFromName(ctx context.Context, ociURI, kubeConfig, name, version string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstallChartFromName", ctx, ociURI, kubeConfig, name, version)
	ret0, _ := ret[0].(error)
	return ret0
}

// InstallChartFromName indicates an expected call of InstallChartFromName.
func (mr *MockChartInstallerMockRecorder) InstallChartFromName(ctx, ociURI, kubeConfig, name, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallChartFromName", reflect.TypeOf((*MockChartInstaller)(nil).InstallChartFromName), ctx, ociURI, kubeConfig, name, version)
}
