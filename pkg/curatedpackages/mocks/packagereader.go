// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/curatedpackages/packagereader.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	v1alpha1 "github.com/aws/eks-anywhere/release/api/v1alpha1"
	gomock "github.com/golang/mock/gomock"
)

// MockManifestReader is a mock of ManifestReader interface.
type MockManifestReader struct {
	ctrl     *gomock.Controller
	recorder *MockManifestReaderMockRecorder
}

// MockManifestReaderMockRecorder is the mock recorder for MockManifestReader.
type MockManifestReaderMockRecorder struct {
	mock *MockManifestReader
}

// NewMockManifestReader creates a new mock instance.
func NewMockManifestReader(ctrl *gomock.Controller) *MockManifestReader {
	mock := &MockManifestReader{ctrl: ctrl}
	mock.recorder = &MockManifestReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManifestReader) EXPECT() *MockManifestReaderMockRecorder {
	return m.recorder
}

// ReadBundlesForVersion mocks base method.
func (m *MockManifestReader) ReadBundlesForVersion(eksaVersion string) (*v1alpha1.Bundles, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadBundlesForVersion", eksaVersion)
	ret0, _ := ret[0].(*v1alpha1.Bundles)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadBundlesForVersion indicates an expected call of ReadBundlesForVersion.
func (mr *MockManifestReaderMockRecorder) ReadBundlesForVersion(eksaVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadBundlesForVersion", reflect.TypeOf((*MockManifestReader)(nil).ReadBundlesForVersion), eksaVersion)
}

// ReadChartsFromBundles mocks base method.
func (m *MockManifestReader) ReadChartsFromBundles(ctx context.Context, bundles *v1alpha1.Bundles) []v1alpha1.Image {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadChartsFromBundles", ctx, bundles)
	ret0, _ := ret[0].([]v1alpha1.Image)
	return ret0
}

// ReadChartsFromBundles indicates an expected call of ReadChartsFromBundles.
func (mr *MockManifestReaderMockRecorder) ReadChartsFromBundles(ctx, bundles interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadChartsFromBundles", reflect.TypeOf((*MockManifestReader)(nil).ReadChartsFromBundles), ctx, bundles)
}

// ReadImagesFromBundles mocks base method.
func (m *MockManifestReader) ReadImagesFromBundles(ctx context.Context, bundles *v1alpha1.Bundles) ([]v1alpha1.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadImagesFromBundles", ctx, bundles)
	ret0, _ := ret[0].([]v1alpha1.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadImagesFromBundles indicates an expected call of ReadImagesFromBundles.
func (mr *MockManifestReaderMockRecorder) ReadImagesFromBundles(ctx, bundles interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadImagesFromBundles", reflect.TypeOf((*MockManifestReader)(nil).ReadImagesFromBundles), ctx, bundles)
}
