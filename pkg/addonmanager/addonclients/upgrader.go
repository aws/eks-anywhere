package addonclients

import (
	"context"
	"fmt"
	"io/ioutil"
	"path/filepath"
	"strings"

	"sigs.k8s.io/yaml"

	"github.com/aws/eks-anywhere/pkg/api/v1alpha1"
	"github.com/aws/eks-anywhere/pkg/cluster"
	"github.com/aws/eks-anywhere/pkg/filewriter"
	"github.com/aws/eks-anywhere/pkg/logger"
	"github.com/aws/eks-anywhere/pkg/templater"
	"github.com/aws/eks-anywhere/pkg/types"
	"github.com/aws/eks-anywhere/pkg/validations"
)

const upgradeFluxconfigCommitMessage = "Upgrade commit of flux configuration; generated by EKS-A CLI"

func (f *FluxAddonClient) Upgrade(ctx context.Context, managementCluster *types.Cluster, currentSpec *cluster.Spec, newSpec *cluster.Spec) (*types.ChangeDiff, error) {
	logger.V(1).Info("Checking for Flux upgrades")
	if !newSpec.Cluster.IsSelfManaged() {
		logger.V(1).Info("Skipping Flux upgrades, not a self-managed cluster")
		return nil, nil
	}

	if newSpec.GitOpsConfig == nil {
		logger.V(1).Info("Skipping Flux upgrades, GitOps not enabled")
		return nil, nil
	}

	changeDiff := f.fluxChangeDiff(currentSpec, newSpec)
	if changeDiff == nil {
		logger.V(1).Info("Nothing to upgrade for Flux")
		return nil, nil
	}

	logger.V(1).Info("Starting Flux upgrades")
	if err := f.upgradeFilesAndCommit(ctx, newSpec); err != nil {
		return nil, fmt.Errorf("failed upgrading Flux from bundles %d to bundles %d: %v", currentSpec.Bundles.Spec.Number, newSpec.Bundles.Spec.Number, err)
	}
	if err := f.flux.BootstrapToolkitsComponents(ctx, managementCluster, newSpec.GitOpsConfig); err != nil {
		return nil, fmt.Errorf("failed upgrading Flux components: %v", err)
	}
	if err := f.flux.Reconcile(ctx, managementCluster, newSpec.GitOpsConfig); err != nil {
		return nil, fmt.Errorf("failed reconciling Flux components: %v", err)
	}

	return types.NewChangeDiff(changeDiff), nil
}

func (f *FluxAddonClient) fluxChangeDiff(currentSpec, newSpec *cluster.Spec) *types.ComponentChangeDiff {
	oldVersion := currentSpec.VersionsBundle.Flux.Version
	newVersion := newSpec.VersionsBundle.Flux.Version
	if oldVersion != newVersion {
		logger.V(1).Info("Flux change diff ", "oldVersion", oldVersion, "newVersion", newVersion)
		return &types.ComponentChangeDiff{
			ComponentName: "Flux",
			NewVersion:    newVersion,
			OldVersion:    oldVersion,
		}

	}
	return nil
}

func (f *FluxAddonClient) upgradeFilesAndCommit(ctx context.Context, newSpec *cluster.Spec) error {
	fc := &fluxForCluster{
		FluxAddonClient: f,
		clusterSpec:     newSpec,
	}

	if err := fc.syncGitRepo(ctx); err != nil {
		return err
	}

	if err := fc.commitFluxUpgradeFilesToGit(ctx); err != nil {
		return err
	}

	return nil
}

func (fc *fluxForCluster) commitFluxUpgradeFilesToGit(ctx context.Context) error {
	logger.Info("Adding flux configuration files to Git")
	config := fc.clusterSpec.GitOpsConfig
	repository := config.Spec.Flux.Github.Repository

	logger.V(3).Info("Updating repo file structure...")
	if err := fc.updateFileStructure(); err != nil {
		return err
	}

	logger.V(3).Info("Generating flux custom manifest files...")
	if err := fc.writeFluxUpgradeFiles(); err != nil {
		return err
	}

	p := config.Spec.Flux.Github.ClusterRootPath()
	if err := fc.gitOpts.Git.Add(p); err != nil {
		return &ConfigVersionControlFailedError{Err: fmt.Errorf("error when adding %s to git: %v", p, err)}
	}

	if err := fc.FluxAddonClient.pushToRemoteRepo(ctx, p, upgradeFluxconfigCommitMessage); err != nil {
		return err
	}
	logger.V(3).Info("Finished pushing flux custom manifest files to git",
		"repository", repository)
	return nil
}

func (fc *fluxForCluster) writeFluxUpgradeFiles() error {
	w, err := fc.initFluxWriter()
	if err != nil {
		return err
	}

	t := templater.New(w)
	logger.V(3).Info("Generating flux-system patch file...")
	if err = fc.generateFluxPatchFile(t); err != nil {
		return err
	}

	return nil
}

func (fc *fluxForCluster) updateFileStructure() error {
	config := fc.clusterSpec.GitOpsConfig
	clusterRoot := config.Spec.Flux.Github.ClusterRootPath()
	fluxSystemPath := filepath.Join(fc.gitOpts.Writer.Dir(), fc.fluxSystemDir())
	nEksaSystemPath := filepath.Join(fc.gitOpts.Writer.Dir(), fc.eksaSystemDir())
	oEksaSystemPath := filepath.Join(fc.gitOpts.Writer.Dir(), clusterRoot, eksaSystemDirName)

	if validations.FileExists(fluxSystemPath) && validations.FileExists(nEksaSystemPath) {
		logger.V(3).Info("File structure is already up-to-date")
		return nil
	}

	if !validations.FileExists(nEksaSystemPath) && validations.FileExists(oEksaSystemPath) {
		logger.V(3).Info("Updating eksa-system files...")
		if err := fc.writeEksaUpgradeFiles(oEksaSystemPath); err != nil {
			return err
		}
		err := fc.gitOpts.Git.Remove(filepath.Join(clusterRoot, eksaSystemDirName))
		if err != nil {
			return &ConfigVersionControlFailedError{Err: fmt.Errorf("error when removing %s in git: %v", filepath.Join(clusterRoot, eksaSystemDirName), err)}
		}
	}

	return nil
}

func (fc *fluxForCluster) writeEksaUpgradeFiles(oldEksaSystemPath string) error {
	fileName := filepath.Join(oldEksaSystemPath, clusterConfigFileName)
	resourcesSpec, err := fc.updateGitOpsConfig(fileName)
	if err != nil {
		return err
	}
	w, err := fc.initEksaWriter()
	if err != nil {
		return err
	}

	t := templater.New(w)
	logger.V(3).Info("Updating eksa-system cluster config file...")
	if _, err = t.WriteBytesToFile(resourcesSpec, clusterConfigFileName, filewriter.PersistentFile); err != nil {
		return err
	}

	return fc.generateEksaKustomizeFile()
}

func (fc *fluxForCluster) updateGitOpsConfig(fileName string) ([]byte, error) {
	logger.V(3).Info("Updating eks-a cluster config content - gitopsconfig clusterConfigPath...")
	content, err := ioutil.ReadFile(fileName)
	if err != nil {
		return nil, fmt.Errorf("unable to read file due to: %v", err)
	}

	var resources [][]byte
	for _, c := range strings.Split(string(content), v1alpha1.YamlSeparator) {
		var gitopsconfig v1alpha1.GitOpsConfig
		if err = yaml.Unmarshal([]byte(c), &gitopsconfig); err != nil {
			return nil, fmt.Errorf("unable to parse %s\nyaml: %s\n %v", fileName, c, err)
		}

		if gitopsconfig.Kind() != gitopsconfig.ExpectedKind() {
			if len(c) > 0 {
				resources = append(resources, []byte(c))
			}
			continue
		}

		if err := yaml.UnmarshalStrict([]byte(c), gitopsconfig); err != nil {
			return nil, err
		}

		gitopsconfig.Spec.Flux.Github.ClusterConfigPath = fc.path()

		gitopsYaml, err := yaml.Marshal(gitopsconfig)
		if err != nil {
			return nil, fmt.Errorf("error outputting yaml: %v", err)
		}
		resources = append(resources, gitopsYaml)
	}

	return templater.AppendYamlResources(resources...), nil
}
