// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/eks-anywhere/pkg/addonmanager/addonclients (interfaces: Flux,GitProviderClient,GitClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	v1alpha1 "github.com/aws/eks-anywhere/pkg/api/v1alpha1"
	git "github.com/aws/eks-anywhere/pkg/git"
	types "github.com/aws/eks-anywhere/pkg/types"
	gomock "github.com/golang/mock/gomock"
)

// MockFlux is a mock of Flux interface.
type MockFlux struct {
	ctrl     *gomock.Controller
	recorder *MockFluxMockRecorder
}

// MockFluxMockRecorder is the mock recorder for MockFlux.
type MockFluxMockRecorder struct {
	mock *MockFlux
}

// NewMockFlux creates a new mock instance.
func NewMockFlux(ctrl *gomock.Controller) *MockFlux {
	mock := &MockFlux{ctrl: ctrl}
	mock.recorder = &MockFluxMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFlux) EXPECT() *MockFluxMockRecorder {
	return m.recorder
}

// BootstrapToolkitsComponentsGithub mocks base method.
func (m *MockFlux) BootstrapToolkitsComponentsGithub(arg0 context.Context, arg1 *types.Cluster, arg2 *v1alpha1.FluxConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BootstrapToolkitsComponentsGithub", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// BootstrapToolkitsComponentsGithub indicates an expected call of BootstrapToolkitsComponentsGithub.
func (mr *MockFluxMockRecorder) BootstrapToolkitsComponentsGithub(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BootstrapToolkitsComponentsGithub", reflect.TypeOf((*MockFlux)(nil).BootstrapToolkitsComponentsGithub), arg0, arg1, arg2)
}

// DeleteFluxSystemSecret mocks base method.
func (m *MockFlux) DeleteFluxSystemSecret(arg0 context.Context, arg1 *types.Cluster, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFluxSystemSecret", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFluxSystemSecret indicates an expected call of DeleteFluxSystemSecret.
func (mr *MockFluxMockRecorder) DeleteFluxSystemSecret(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFluxSystemSecret", reflect.TypeOf((*MockFlux)(nil).DeleteFluxSystemSecret), arg0, arg1, arg2)
}

// ForceReconcileGitRepo mocks base method.
func (m *MockFlux) ForceReconcileGitRepo(arg0 context.Context, arg1 *types.Cluster, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForceReconcileGitRepo", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ForceReconcileGitRepo indicates an expected call of ForceReconcileGitRepo.
func (mr *MockFluxMockRecorder) ForceReconcileGitRepo(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForceReconcileGitRepo", reflect.TypeOf((*MockFlux)(nil).ForceReconcileGitRepo), arg0, arg1, arg2)
}

// PauseKustomization mocks base method.
func (m *MockFlux) PauseKustomization(arg0 context.Context, arg1 *types.Cluster, arg2 *v1alpha1.FluxConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PauseKustomization", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PauseKustomization indicates an expected call of PauseKustomization.
func (mr *MockFluxMockRecorder) PauseKustomization(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PauseKustomization", reflect.TypeOf((*MockFlux)(nil).PauseKustomization), arg0, arg1, arg2)
}

// Reconcile mocks base method.
func (m *MockFlux) Reconcile(arg0 context.Context, arg1 *types.Cluster, arg2 *v1alpha1.FluxConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reconcile", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reconcile indicates an expected call of Reconcile.
func (mr *MockFluxMockRecorder) Reconcile(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reconcile", reflect.TypeOf((*MockFlux)(nil).Reconcile), arg0, arg1, arg2)
}

// ResumeKustomization mocks base method.
func (m *MockFlux) ResumeKustomization(arg0 context.Context, arg1 *types.Cluster, arg2 *v1alpha1.FluxConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResumeKustomization", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResumeKustomization indicates an expected call of ResumeKustomization.
func (mr *MockFluxMockRecorder) ResumeKustomization(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResumeKustomization", reflect.TypeOf((*MockFlux)(nil).ResumeKustomization), arg0, arg1, arg2)
}

// UninstallToolkitsComponents mocks base method.
func (m *MockFlux) UninstallToolkitsComponents(arg0 context.Context, arg1 *types.Cluster, arg2 *v1alpha1.FluxConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UninstallToolkitsComponents", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UninstallToolkitsComponents indicates an expected call of UninstallToolkitsComponents.
func (mr *MockFluxMockRecorder) UninstallToolkitsComponents(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UninstallToolkitsComponents", reflect.TypeOf((*MockFlux)(nil).UninstallToolkitsComponents), arg0, arg1, arg2)
}

// MockGitProviderClient is a mock of GitProviderClient interface.
type MockGitProviderClient struct {
	ctrl     *gomock.Controller
	recorder *MockGitProviderClientMockRecorder
}

// MockGitProviderClientMockRecorder is the mock recorder for MockGitProviderClient.
type MockGitProviderClientMockRecorder struct {
	mock *MockGitProviderClient
}

// NewMockGitProviderClient creates a new mock instance.
func NewMockGitProviderClient(ctrl *gomock.Controller) *MockGitProviderClient {
	mock := &MockGitProviderClient{ctrl: ctrl}
	mock.recorder = &MockGitProviderClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitProviderClient) EXPECT() *MockGitProviderClientMockRecorder {
	return m.recorder
}

// CreateRepo mocks base method.
func (m *MockGitProviderClient) CreateRepo(arg0 context.Context, arg1 git.CreateRepoOpts) (*git.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRepo", arg0, arg1)
	ret0, _ := ret[0].(*git.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRepo indicates an expected call of CreateRepo.
func (mr *MockGitProviderClientMockRecorder) CreateRepo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRepo", reflect.TypeOf((*MockGitProviderClient)(nil).CreateRepo), arg0, arg1)
}

// DeleteRepo mocks base method.
func (m *MockGitProviderClient) DeleteRepo(arg0 context.Context, arg1 git.DeleteRepoOpts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRepo", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRepo indicates an expected call of DeleteRepo.
func (mr *MockGitProviderClientMockRecorder) DeleteRepo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRepo", reflect.TypeOf((*MockGitProviderClient)(nil).DeleteRepo), arg0, arg1)
}

// GetRepo mocks base method.
func (m *MockGitProviderClient) GetRepo(arg0 context.Context) (*git.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepo", arg0)
	ret0, _ := ret[0].(*git.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepo indicates an expected call of GetRepo.
func (mr *MockGitProviderClientMockRecorder) GetRepo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepo", reflect.TypeOf((*MockGitProviderClient)(nil).GetRepo), arg0)
}

// PathExists mocks base method.
func (m *MockGitProviderClient) PathExists(arg0 context.Context, arg1, arg2, arg3, arg4 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PathExists", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PathExists indicates an expected call of PathExists.
func (mr *MockGitProviderClientMockRecorder) PathExists(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PathExists", reflect.TypeOf((*MockGitProviderClient)(nil).PathExists), arg0, arg1, arg2, arg3, arg4)
}

// Validate mocks base method.
func (m *MockGitProviderClient) Validate(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockGitProviderClientMockRecorder) Validate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockGitProviderClient)(nil).Validate), arg0)
}

// MockGitClient is a mock of GitClient interface.
type MockGitClient struct {
	ctrl     *gomock.Controller
	recorder *MockGitClientMockRecorder
}

// MockGitClientMockRecorder is the mock recorder for MockGitClient.
type MockGitClientMockRecorder struct {
	mock *MockGitClient
}

// NewMockGitClient creates a new mock instance.
func NewMockGitClient(ctrl *gomock.Controller) *MockGitClient {
	mock := &MockGitClient{ctrl: ctrl}
	mock.recorder = &MockGitClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitClient) EXPECT() *MockGitClientMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockGitClient) Add(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockGitClientMockRecorder) Add(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockGitClient)(nil).Add), arg0)
}

// Branch mocks base method.
func (m *MockGitClient) Branch(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Branch", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Branch indicates an expected call of Branch.
func (mr *MockGitClientMockRecorder) Branch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Branch", reflect.TypeOf((*MockGitClient)(nil).Branch), arg0)
}

// Clone mocks base method.
func (m *MockGitClient) Clone(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Clone indicates an expected call of Clone.
func (mr *MockGitClientMockRecorder) Clone(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockGitClient)(nil).Clone), arg0)
}

// Commit mocks base method.
func (m *MockGitClient) Commit(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockGitClientMockRecorder) Commit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockGitClient)(nil).Commit), arg0)
}

// Init mocks base method.
func (m *MockGitClient) Init() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init")
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockGitClientMockRecorder) Init() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockGitClient)(nil).Init))
}

// Pull mocks base method.
func (m *MockGitClient) Pull(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pull", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Pull indicates an expected call of Pull.
func (mr *MockGitClientMockRecorder) Pull(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pull", reflect.TypeOf((*MockGitClient)(nil).Pull), arg0, arg1)
}

// Push mocks base method.
func (m *MockGitClient) Push(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Push", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Push indicates an expected call of Push.
func (mr *MockGitClientMockRecorder) Push(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockGitClient)(nil).Push), arg0)
}

// Remove mocks base method.
func (m *MockGitClient) Remove(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockGitClientMockRecorder) Remove(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockGitClient)(nil).Remove), arg0)
}
