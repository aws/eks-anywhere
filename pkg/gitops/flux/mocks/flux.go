// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/eks-anywhere/pkg/gitops/flux (interfaces: Client)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	v1alpha1 "github.com/aws/eks-anywhere/pkg/api/v1alpha1"
	config "github.com/aws/eks-anywhere/pkg/config"
	types "github.com/aws/eks-anywhere/pkg/types"
	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// BootstrapGit mocks base method.
func (m *MockClient) BootstrapGit(arg0 context.Context, arg1 *types.Cluster, arg2 *v1alpha1.FluxConfig, arg3 *config.CliConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BootstrapGit", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// BootstrapGit indicates an expected call of BootstrapGit.
func (mr *MockClientMockRecorder) BootstrapGit(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BootstrapGit", reflect.TypeOf((*MockClient)(nil).BootstrapGit), arg0, arg1, arg2, arg3)
}

// BootstrapGithub mocks base method.
func (m *MockClient) BootstrapGithub(arg0 context.Context, arg1 *types.Cluster, arg2 *v1alpha1.FluxConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BootstrapGithub", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// BootstrapGithub indicates an expected call of BootstrapGithub.
func (mr *MockClientMockRecorder) BootstrapGithub(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BootstrapGithub", reflect.TypeOf((*MockClient)(nil).BootstrapGithub), arg0, arg1, arg2)
}

// DeleteFluxSystemSecret mocks base method.
func (m *MockClient) DeleteFluxSystemSecret(arg0 context.Context, arg1 *types.Cluster, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFluxSystemSecret", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFluxSystemSecret indicates an expected call of DeleteFluxSystemSecret.
func (mr *MockClientMockRecorder) DeleteFluxSystemSecret(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFluxSystemSecret", reflect.TypeOf((*MockClient)(nil).DeleteFluxSystemSecret), arg0, arg1, arg2)
}

// ForceReconcileGitRepo mocks base method.
func (m *MockClient) ForceReconcileGitRepo(arg0 context.Context, arg1 *types.Cluster, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForceReconcileGitRepo", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ForceReconcileGitRepo indicates an expected call of ForceReconcileGitRepo.
func (mr *MockClientMockRecorder) ForceReconcileGitRepo(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForceReconcileGitRepo", reflect.TypeOf((*MockClient)(nil).ForceReconcileGitRepo), arg0, arg1, arg2)
}

// Reconcile mocks base method.
func (m *MockClient) Reconcile(arg0 context.Context, arg1 *types.Cluster, arg2 *v1alpha1.FluxConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reconcile", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reconcile indicates an expected call of Reconcile.
func (mr *MockClientMockRecorder) Reconcile(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reconcile", reflect.TypeOf((*MockClient)(nil).Reconcile), arg0, arg1, arg2)
}

// ResumeKustomization mocks base method.
func (m *MockClient) ResumeKustomization(arg0 context.Context, arg1 *types.Cluster, arg2 *v1alpha1.FluxConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResumeKustomization", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResumeKustomization indicates an expected call of ResumeKustomization.
func (mr *MockClientMockRecorder) ResumeKustomization(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResumeKustomization", reflect.TypeOf((*MockClient)(nil).ResumeKustomization), arg0, arg1, arg2)
}

// SuspendKustomization mocks base method.
func (m *MockClient) SuspendKustomization(arg0 context.Context, arg1 *types.Cluster, arg2 *v1alpha1.FluxConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SuspendKustomization", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SuspendKustomization indicates an expected call of SuspendKustomization.
func (mr *MockClientMockRecorder) SuspendKustomization(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SuspendKustomization", reflect.TypeOf((*MockClient)(nil).SuspendKustomization), arg0, arg1, arg2)
}

// Uninstall mocks base method.
func (m *MockClient) Uninstall(arg0 context.Context, arg1 *types.Cluster, arg2 *v1alpha1.FluxConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Uninstall", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Uninstall indicates an expected call of Uninstall.
func (mr *MockClientMockRecorder) Uninstall(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Uninstall", reflect.TypeOf((*MockClient)(nil).Uninstall), arg0, arg1, arg2)
}
