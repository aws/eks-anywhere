// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/registry/orasinterface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/opencontainers/image-spec/specs-go/v1"
	oras "oras.land/oras-go/v2"
	content "oras.land/oras-go/v2/content"
	registry "oras.land/oras-go/v2/registry"
)

// MockOrasInterface is a mock of OrasInterface interface.
type MockOrasInterface struct {
	ctrl     *gomock.Controller
	recorder *MockOrasInterfaceMockRecorder
}

// MockOrasInterfaceMockRecorder is the mock recorder for MockOrasInterface.
type MockOrasInterfaceMockRecorder struct {
	mock *MockOrasInterface
}

// NewMockOrasInterface creates a new mock instance.
func NewMockOrasInterface(ctrl *gomock.Controller) *MockOrasInterface {
	mock := &MockOrasInterface{ctrl: ctrl}
	mock.recorder = &MockOrasInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrasInterface) EXPECT() *MockOrasInterfaceMockRecorder {
	return m.recorder
}

// CopyGraph mocks base method.
func (m *MockOrasInterface) CopyGraph(ctx context.Context, src content.ReadOnlyStorage, dst content.Storage, root v1.Descriptor, opts oras.CopyGraphOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyGraph", ctx, src, dst, root, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// CopyGraph indicates an expected call of CopyGraph.
func (mr *MockOrasInterfaceMockRecorder) CopyGraph(ctx, src, dst, root, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyGraph", reflect.TypeOf((*MockOrasInterface)(nil).CopyGraph), ctx, src, dst, root, opts)
}

// Resolve mocks base method.
func (m *MockOrasInterface) Resolve(ctx context.Context, srcStorage registry.Repository, reference string) (v1.Descriptor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resolve", ctx, srcStorage, reference)
	ret0, _ := ret[0].(v1.Descriptor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Resolve indicates an expected call of Resolve.
func (mr *MockOrasInterfaceMockRecorder) Resolve(ctx, srcStorage, reference interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resolve", reflect.TypeOf((*MockOrasInterface)(nil).Resolve), ctx, srcStorage, reference)
}
