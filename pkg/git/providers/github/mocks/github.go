// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/eks-anywhere/pkg/git/providers/github (interfaces: GitProviderClient,GithubProviderClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	git "github.com/aws/eks-anywhere/pkg/git"
	gomock "github.com/golang/mock/gomock"
	github "github.com/google/go-github/v35/github"
)

// MockGitProviderClient is a mock of GitProviderClient interface.
type MockGitProviderClient struct {
	ctrl     *gomock.Controller
	recorder *MockGitProviderClientMockRecorder
}

// MockGitProviderClientMockRecorder is the mock recorder for MockGitProviderClient.
type MockGitProviderClientMockRecorder struct {
	mock *MockGitProviderClient
}

// NewMockGitProviderClient creates a new mock instance.
func NewMockGitProviderClient(ctrl *gomock.Controller) *MockGitProviderClient {
	mock := &MockGitProviderClient{ctrl: ctrl}
	mock.recorder = &MockGitProviderClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitProviderClient) EXPECT() *MockGitProviderClientMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockGitProviderClient) Add(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockGitProviderClientMockRecorder) Add(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockGitProviderClient)(nil).Add), arg0)
}

// Branch mocks base method.
func (m *MockGitProviderClient) Branch(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Branch", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Branch indicates an expected call of Branch.
func (mr *MockGitProviderClientMockRecorder) Branch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Branch", reflect.TypeOf((*MockGitProviderClient)(nil).Branch), arg0)
}

// Clone mocks base method.
func (m *MockGitProviderClient) Clone(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Clone indicates an expected call of Clone.
func (mr *MockGitProviderClientMockRecorder) Clone(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockGitProviderClient)(nil).Clone), arg0, arg1)
}

// Commit mocks base method.
func (m *MockGitProviderClient) Commit(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockGitProviderClientMockRecorder) Commit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockGitProviderClient)(nil).Commit), arg0)
}

// Init mocks base method.
func (m *MockGitProviderClient) Init(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockGitProviderClientMockRecorder) Init(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockGitProviderClient)(nil).Init), arg0)
}

// Pull mocks base method.
func (m *MockGitProviderClient) Pull(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pull", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Pull indicates an expected call of Pull.
func (mr *MockGitProviderClientMockRecorder) Pull(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pull", reflect.TypeOf((*MockGitProviderClient)(nil).Pull), arg0, arg1)
}

// Push mocks base method.
func (m *MockGitProviderClient) Push(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Push", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Push indicates an expected call of Push.
func (mr *MockGitProviderClientMockRecorder) Push(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockGitProviderClient)(nil).Push), arg0)
}

// Remove mocks base method.
func (m *MockGitProviderClient) Remove(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockGitProviderClientMockRecorder) Remove(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockGitProviderClient)(nil).Remove), arg0)
}

// SetTokenAuth mocks base method.
func (m *MockGitProviderClient) SetTokenAuth(arg0, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTokenAuth", arg0, arg1)
}

// SetTokenAuth indicates an expected call of SetTokenAuth.
func (mr *MockGitProviderClientMockRecorder) SetTokenAuth(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTokenAuth", reflect.TypeOf((*MockGitProviderClient)(nil).SetTokenAuth), arg0, arg1)
}

// MockGithubProviderClient is a mock of GithubProviderClient interface.
type MockGithubProviderClient struct {
	ctrl     *gomock.Controller
	recorder *MockGithubProviderClientMockRecorder
}

// MockGithubProviderClientMockRecorder is the mock recorder for MockGithubProviderClient.
type MockGithubProviderClientMockRecorder struct {
	mock *MockGithubProviderClient
}

// NewMockGithubProviderClient creates a new mock instance.
func NewMockGithubProviderClient(ctrl *gomock.Controller) *MockGithubProviderClient {
	mock := &MockGithubProviderClient{ctrl: ctrl}
	mock.recorder = &MockGithubProviderClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGithubProviderClient) EXPECT() *MockGithubProviderClientMockRecorder {
	return m.recorder
}

// AuthenticatedUser mocks base method.
func (m *MockGithubProviderClient) AuthenticatedUser(arg0 context.Context) (*github.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthenticatedUser", arg0)
	ret0, _ := ret[0].(*github.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthenticatedUser indicates an expected call of AuthenticatedUser.
func (mr *MockGithubProviderClientMockRecorder) AuthenticatedUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthenticatedUser", reflect.TypeOf((*MockGithubProviderClient)(nil).AuthenticatedUser), arg0)
}

// CheckAccessTokenPermissions mocks base method.
func (m *MockGithubProviderClient) CheckAccessTokenPermissions(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAccessTokenPermissions", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckAccessTokenPermissions indicates an expected call of CheckAccessTokenPermissions.
func (mr *MockGithubProviderClientMockRecorder) CheckAccessTokenPermissions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAccessTokenPermissions", reflect.TypeOf((*MockGithubProviderClient)(nil).CheckAccessTokenPermissions), arg0, arg1)
}

// CreateRepo mocks base method.
func (m *MockGithubProviderClient) CreateRepo(arg0 context.Context, arg1 git.CreateRepoOpts) (*git.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRepo", arg0, arg1)
	ret0, _ := ret[0].(*git.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRepo indicates an expected call of CreateRepo.
func (mr *MockGithubProviderClientMockRecorder) CreateRepo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRepo", reflect.TypeOf((*MockGithubProviderClient)(nil).CreateRepo), arg0, arg1)
}

// DeleteRepo mocks base method.
func (m *MockGithubProviderClient) DeleteRepo(arg0 context.Context, arg1 git.DeleteRepoOpts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRepo", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRepo indicates an expected call of DeleteRepo.
func (mr *MockGithubProviderClientMockRecorder) DeleteRepo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRepo", reflect.TypeOf((*MockGithubProviderClient)(nil).DeleteRepo), arg0, arg1)
}

// GetAccessTokenPermissions mocks base method.
func (m *MockGithubProviderClient) GetAccessTokenPermissions(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessTokenPermissions", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessTokenPermissions indicates an expected call of GetAccessTokenPermissions.
func (mr *MockGithubProviderClientMockRecorder) GetAccessTokenPermissions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessTokenPermissions", reflect.TypeOf((*MockGithubProviderClient)(nil).GetAccessTokenPermissions), arg0)
}

// GetRepo mocks base method.
func (m *MockGithubProviderClient) GetRepo(arg0 context.Context, arg1 git.GetRepoOpts) (*git.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepo", arg0, arg1)
	ret0, _ := ret[0].(*git.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepo indicates an expected call of GetRepo.
func (mr *MockGithubProviderClientMockRecorder) GetRepo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepo", reflect.TypeOf((*MockGithubProviderClient)(nil).GetRepo), arg0, arg1)
}

// Organization mocks base method.
func (m *MockGithubProviderClient) Organization(arg0 context.Context, arg1 string) (*github.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Organization", arg0, arg1)
	ret0, _ := ret[0].(*github.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Organization indicates an expected call of Organization.
func (mr *MockGithubProviderClientMockRecorder) Organization(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Organization", reflect.TypeOf((*MockGithubProviderClient)(nil).Organization), arg0, arg1)
}

// PathExists mocks base method.
func (m *MockGithubProviderClient) PathExists(arg0 context.Context, arg1, arg2, arg3, arg4 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PathExists", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PathExists indicates an expected call of PathExists.
func (mr *MockGithubProviderClientMockRecorder) PathExists(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PathExists", reflect.TypeOf((*MockGithubProviderClient)(nil).PathExists), arg0, arg1, arg2, arg3, arg4)
}
