// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/eks-anywhere/pkg/git/gogit (interfaces: GoGitClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	git "github.com/go-git/go-git/v5"
	config "github.com/go-git/go-git/v5/config"
	plumbing "github.com/go-git/go-git/v5/plumbing"
	object "github.com/go-git/go-git/v5/plumbing/object"
	transport "github.com/go-git/go-git/v5/plumbing/transport"
	gomock "github.com/golang/mock/gomock"
)

// MockGoGitClient is a mock of GoGitClient interface.
type MockGoGitClient struct {
	ctrl     *gomock.Controller
	recorder *MockGoGitClientMockRecorder
}

// MockGoGitClientMockRecorder is the mock recorder for MockGoGitClient.
type MockGoGitClientMockRecorder struct {
	mock *MockGoGitClient
}

// NewMockGoGitClient creates a new mock instance.
func NewMockGoGitClient(ctrl *gomock.Controller) *MockGoGitClient {
	mock := &MockGoGitClient{ctrl: ctrl}
	mock.recorder = &MockGoGitClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGoGitClient) EXPECT() *MockGoGitClientMockRecorder {
	return m.recorder
}

// AddGlob mocks base method.
func (m *MockGoGitClient) AddGlob(arg0 string, arg1 *git.Worktree) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddGlob", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddGlob indicates an expected call of AddGlob.
func (mr *MockGoGitClientMockRecorder) AddGlob(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddGlob", reflect.TypeOf((*MockGoGitClient)(nil).AddGlob), arg0, arg1)
}

// Checkout mocks base method.
func (m *MockGoGitClient) Checkout(arg0 *git.Worktree, arg1 *git.CheckoutOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Checkout", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Checkout indicates an expected call of Checkout.
func (mr *MockGoGitClientMockRecorder) Checkout(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Checkout", reflect.TypeOf((*MockGoGitClient)(nil).Checkout), arg0, arg1)
}

// Clone mocks base method.
func (m *MockGoGitClient) Clone(arg0 context.Context, arg1, arg2 string, arg3 transport.AuthMethod) (*git.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*git.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Clone indicates an expected call of Clone.
func (mr *MockGoGitClientMockRecorder) Clone(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockGoGitClient)(nil).Clone), arg0, arg1, arg2, arg3)
}

// Commit mocks base method.
func (m *MockGoGitClient) Commit(arg0 string, arg1 *object.Signature, arg2 *git.Worktree) (plumbing.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", arg0, arg1, arg2)
	ret0, _ := ret[0].(plumbing.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Commit indicates an expected call of Commit.
func (mr *MockGoGitClientMockRecorder) Commit(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockGoGitClient)(nil).Commit), arg0, arg1, arg2)
}

// CommitObject mocks base method.
func (m *MockGoGitClient) CommitObject(arg0 *git.Repository, arg1 plumbing.Hash) (*object.Commit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitObject", arg0, arg1)
	ret0, _ := ret[0].(*object.Commit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommitObject indicates an expected call of CommitObject.
func (mr *MockGoGitClientMockRecorder) CommitObject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitObject", reflect.TypeOf((*MockGoGitClient)(nil).CommitObject), arg0, arg1)
}

// Create mocks base method.
func (m *MockGoGitClient) Create(arg0 *git.Repository, arg1 string) (*git.Remote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*git.Remote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockGoGitClientMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockGoGitClient)(nil).Create), arg0, arg1)
}

// CreateBranch mocks base method.
func (m *MockGoGitClient) CreateBranch(arg0 *git.Repository, arg1 *config.Branch) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBranch", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBranch indicates an expected call of CreateBranch.
func (mr *MockGoGitClientMockRecorder) CreateBranch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBranch", reflect.TypeOf((*MockGoGitClient)(nil).CreateBranch), arg0, arg1)
}

// Head mocks base method.
func (m *MockGoGitClient) Head(arg0 *git.Repository) (*plumbing.Reference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Head", arg0)
	ret0, _ := ret[0].(*plumbing.Reference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Head indicates an expected call of Head.
func (mr *MockGoGitClientMockRecorder) Head(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Head", reflect.TypeOf((*MockGoGitClient)(nil).Head), arg0)
}

// Init mocks base method.
func (m *MockGoGitClient) Init(arg0 string) (*git.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", arg0)
	ret0, _ := ret[0].(*git.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Init indicates an expected call of Init.
func (mr *MockGoGitClientMockRecorder) Init(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockGoGitClient)(nil).Init), arg0)
}

// ListRemotes mocks base method.
func (m *MockGoGitClient) ListRemotes(arg0 *git.Repository, arg1 transport.AuthMethod) ([]*plumbing.Reference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRemotes", arg0, arg1)
	ret0, _ := ret[0].([]*plumbing.Reference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRemotes indicates an expected call of ListRemotes.
func (mr *MockGoGitClientMockRecorder) ListRemotes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRemotes", reflect.TypeOf((*MockGoGitClient)(nil).ListRemotes), arg0, arg1)
}

// OpenDir mocks base method.
func (m *MockGoGitClient) OpenDir(arg0 string) (*git.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenDir", arg0)
	ret0, _ := ret[0].(*git.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenDir indicates an expected call of OpenDir.
func (mr *MockGoGitClientMockRecorder) OpenDir(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenDir", reflect.TypeOf((*MockGoGitClient)(nil).OpenDir), arg0)
}

// OpenWorktree mocks base method.
func (m *MockGoGitClient) OpenWorktree(arg0 *git.Repository) (*git.Worktree, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenWorktree", arg0)
	ret0, _ := ret[0].(*git.Worktree)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenWorktree indicates an expected call of OpenWorktree.
func (mr *MockGoGitClientMockRecorder) OpenWorktree(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenWorktree", reflect.TypeOf((*MockGoGitClient)(nil).OpenWorktree), arg0)
}

// PullWithContext mocks base method.
func (m *MockGoGitClient) PullWithContext(arg0 context.Context, arg1 *git.Worktree, arg2 transport.AuthMethod, arg3 plumbing.ReferenceName) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PullWithContext", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// PullWithContext indicates an expected call of PullWithContext.
func (mr *MockGoGitClientMockRecorder) PullWithContext(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PullWithContext", reflect.TypeOf((*MockGoGitClient)(nil).PullWithContext), arg0, arg1, arg2, arg3)
}

// PushWithContext mocks base method.
func (m *MockGoGitClient) PushWithContext(arg0 context.Context, arg1 *git.Repository, arg2 transport.AuthMethod) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PushWithContext", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PushWithContext indicates an expected call of PushWithContext.
func (mr *MockGoGitClientMockRecorder) PushWithContext(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushWithContext", reflect.TypeOf((*MockGoGitClient)(nil).PushWithContext), arg0, arg1, arg2)
}

// Remove mocks base method.
func (m *MockGoGitClient) Remove(arg0 string, arg1 *git.Worktree) (plumbing.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", arg0, arg1)
	ret0, _ := ret[0].(plumbing.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Remove indicates an expected call of Remove.
func (mr *MockGoGitClientMockRecorder) Remove(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockGoGitClient)(nil).Remove), arg0, arg1)
}

// SetRepositoryReference mocks base method.
func (m *MockGoGitClient) SetRepositoryReference(arg0 *git.Repository, arg1 *plumbing.Reference) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRepositoryReference", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetRepositoryReference indicates an expected call of SetRepositoryReference.
func (mr *MockGoGitClientMockRecorder) SetRepositoryReference(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRepositoryReference", reflect.TypeOf((*MockGoGitClient)(nil).SetRepositoryReference), arg0, arg1)
}
