// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/providers/nutanix/client.go

// Package nutanix is a generated GoMock package.
package nutanix

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v3 "github.com/nutanix-cloud-native/prism-go-client/v3"
)

// Mockclient is a mock of client interface.
type Mockclient struct {
	ctrl     *gomock.Controller
	recorder *MockclientMockRecorder
}

// MockclientMockRecorder is the mock recorder for Mockclient.
type MockclientMockRecorder struct {
	mock *Mockclient
}

// NewMockclient creates a new mock instance.
func NewMockclient(ctrl *gomock.Controller) *Mockclient {
	mock := &Mockclient{ctrl: ctrl}
	mock.recorder = &MockclientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockclient) EXPECT() *MockclientMockRecorder {
	return m.recorder
}

// GetCluster mocks base method.
func (m *Mockclient) GetCluster(ctx context.Context, uuid string) (*v3.ClusterIntentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCluster", ctx, uuid)
	ret0, _ := ret[0].(*v3.ClusterIntentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCluster indicates an expected call of GetCluster.
func (mr *MockclientMockRecorder) GetCluster(ctx, uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCluster", reflect.TypeOf((*Mockclient)(nil).GetCluster), ctx, uuid)
}

// GetImage mocks base method.
func (m *Mockclient) GetImage(ctx context.Context, uuid string) (*v3.ImageIntentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImage", ctx, uuid)
	ret0, _ := ret[0].(*v3.ImageIntentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImage indicates an expected call of GetImage.
func (mr *MockclientMockRecorder) GetImage(ctx, uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImage", reflect.TypeOf((*Mockclient)(nil).GetImage), ctx, uuid)
}

// GetSubnet mocks base method.
func (m *Mockclient) GetSubnet(ctx context.Context, uuid string) (*v3.SubnetIntentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubnet", ctx, uuid)
	ret0, _ := ret[0].(*v3.SubnetIntentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubnet indicates an expected call of GetSubnet.
func (mr *MockclientMockRecorder) GetSubnet(ctx, uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubnet", reflect.TypeOf((*Mockclient)(nil).GetSubnet), ctx, uuid)
}

// ListCluster mocks base method.
func (m *Mockclient) ListCluster(ctx context.Context, getEntitiesRequest *v3.DSMetadata) (*v3.ClusterListIntentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCluster", ctx, getEntitiesRequest)
	ret0, _ := ret[0].(*v3.ClusterListIntentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCluster indicates an expected call of ListCluster.
func (mr *MockclientMockRecorder) ListCluster(ctx, getEntitiesRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCluster", reflect.TypeOf((*Mockclient)(nil).ListCluster), ctx, getEntitiesRequest)
}

// ListImage mocks base method.
func (m *Mockclient) ListImage(ctx context.Context, getEntitiesRequest *v3.DSMetadata) (*v3.ImageListIntentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListImage", ctx, getEntitiesRequest)
	ret0, _ := ret[0].(*v3.ImageListIntentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListImage indicates an expected call of ListImage.
func (mr *MockclientMockRecorder) ListImage(ctx, getEntitiesRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListImage", reflect.TypeOf((*Mockclient)(nil).ListImage), ctx, getEntitiesRequest)
}

// ListSubnet mocks base method.
func (m *Mockclient) ListSubnet(ctx context.Context, getEntitiesRequest *v3.DSMetadata) (*v3.SubnetListIntentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubnet", ctx, getEntitiesRequest)
	ret0, _ := ret[0].(*v3.SubnetListIntentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSubnet indicates an expected call of ListSubnet.
func (mr *MockclientMockRecorder) ListSubnet(ctx, getEntitiesRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubnet", reflect.TypeOf((*Mockclient)(nil).ListSubnet), ctx, getEntitiesRequest)
}
