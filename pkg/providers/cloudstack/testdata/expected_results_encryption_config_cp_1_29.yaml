apiVersion: cluster.x-k8s.io/v1beta1
kind: Cluster
metadata:
  labels:
    cluster.x-k8s.io/cluster-name: test
  name: test
  namespace: eksa-system
spec:
  clusterNetwork:
    pods:
      cidrBlocks: [192.168.0.0/16]
    services:
      cidrBlocks: [10.96.0.0/12]
  controlPlaneEndpoint:
    host: 1.2.3.4
    port: 6443
  controlPlaneRef:
    apiVersion: controlplane.cluster.x-k8s.io/v1beta1
    kind: KubeadmControlPlane
    name: test
  infrastructureRef:
    apiVersion: infrastructure.cluster.x-k8s.io/v1beta3
    kind: CloudStackCluster
    name: test
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta3
kind: CloudStackCluster
metadata:
  name: test
  namespace: eksa-system
spec:
  controlPlaneEndpoint:
    host: 1.2.3.4
    port: 6443
  failureDomains:
  - name: default-az-0
    zone:
      id: 
      name: zone1
      network:
        id: 
        name: net1
    domain: domain1
    account: admin
    acsEndpoint:
      name: global
      namespace: eksa-system
---
apiVersion: controlplane.cluster.x-k8s.io/v1beta1
kind: KubeadmControlPlane
metadata:
  name: test
  namespace: eksa-system
spec:
  machineTemplate:
    infrastructureRef:
      apiVersion: infrastructure.cluster.x-k8s.io/v1beta3
      kind: CloudStackMachineTemplate
      name: test-control-plane-template-1234567890000
  kubeadmConfigSpec:
    clusterConfiguration:
      imageRepository: public.ecr.aws/eks-distro/kubernetes
      etcd:
        local:
          imageRepository: public.ecr.aws/eks-distro/etcd-io
          imageTag: v3.5.10-eks-1-29-4
          extraArgs:
            cipher-suites: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
      dns:
        imageRepository: public.ecr.aws/eks-distro/coredns
        imageTag: v1.11.1-eks-1-29-4
      apiServer:
        extraArgs:
          cloud-provider: external
          audit-policy-file: /etc/kubernetes/audit-policy.yaml
          audit-log-path: /var/log/kubernetes/api-audit.log
          audit-log-maxage: "30"
          audit-log-maxbackup: "10"
          audit-log-maxsize: "512"
          profiling: "false"
          feature-gates: "KMSv1=true"
          encryption-provider-config: /etc/kubernetes/enc/encryption-config.yaml
          tls-cipher-suites: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
        extraVolumes:
        - hostPath: /etc/kubernetes/audit-policy.yaml
          mountPath: /etc/kubernetes/audit-policy.yaml
          name: audit-policy
          pathType: File
          readOnly: true
        - hostPath: /var/log/kubernetes
          mountPath: /var/log/kubernetes
          name: audit-log-dir
          pathType: DirectoryOrCreate
          readOnly: false
        - hostPath: /var/lib/kubeadm/encryption-config.yaml
          mountPath: /etc/kubernetes/enc/encryption-config.yaml
          name: encryption-config
          pathType: File
          readOnly: true
        - hostPath: /var/run/kmsplugin/
          mountPath: /var/run/kmsplugin/
          name: kms-plugin
          readOnly: false
      controllerManager:
        extraArgs:
          cloud-provider: external
          profiling: "false"
          tls-cipher-suites: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
      scheduler:
        extraArgs:
          profiling: "false"
          tls-cipher-suites: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
    files:
    - content: |
        apiVersion: apiserver.config.k8s.io/v1
        kind: EncryptionConfiguration
        resources:
        - providers:
          - kms:
              apiVersion: v1
              cachesize: 1000
              endpoint: unix:///var/run/kmsplugin/socket1-new.sock
              name: config1
              timeout: 3s
          - kms:
              apiVersion: v1
              cachesize: 1000
              endpoint: unix:///var/run/kmsplugin/socket1-old.sock
              name: config2
              timeout: 3s
          - identity: {}
          resources:
          - secrets
          - resource1.anywhere.eks.amazonsaws.com
        - providers:
          - kms:
              apiVersion: v1
              cachesize: 1000
              endpoint: unix:///var/run/kmsplugin/socket2-new.sock
              name: config3
              timeout: 3s
          - kms:
              apiVersion: v1
              cachesize: 1000
              endpoint: unix:///var/run/kmsplugin/socket2-old.sock
              name: config4
              timeout: 3s
          - identity: {}
          resources:
          - configmaps
          - resource2.anywhere.eks.amazonsaws.com
      owner: root:root
      path: /var/lib/kubeadm/encryption-config.yaml
    - content: |
        apiVersion: v1
        kind: Pod
        metadata:
          creationTimestamp: null
          name: kube-vip
          namespace: kube-system
        spec:
          containers:
          - args:
            - manager
            env:
            - name: vip_arp
              value: "true"
            - name: port
              value: "6443"
            - name: vip_cidr
              value: "32"
            - name: cp_enable
              value: "true"
            - name: cp_namespace
              value: kube-system
            - name: vip_ddns
              value: "false"
            - name: vip_leaderelection
              value: "true"
            - name: vip_leaseduration
              value: "15"
            - name: vip_renewdeadline
              value: "10"
            - name: vip_retryperiod
              value: "2"
            - name: address
              value: 1.2.3.4
            image: public.ecr.aws/l0g8r8j6/kube-vip/kube-vip:v0.6.4-eks-a-v0.19.0-dev-build.158
            imagePullPolicy: IfNotPresent
            name: kube-vip
            resources: {}
            securityContext:
              capabilities:
                add:
                - NET_ADMIN
                - NET_RAW
            volumeMounts:
            - mountPath: /etc/kubernetes/admin.conf
              name: kubeconfig
          hostNetwork: true
          volumes:
          - hostPath:
              path: /etc/kubernetes/admin.conf
            name: kubeconfig
        status: {}
      owner: root:root
      path: /etc/kubernetes/manifests/kube-vip.yaml
    - content: |
        apiVersion: audit.k8s.io/v1
        kind: Policy
        metadata:
          creationTimestamp: null
        rules:
        - level: RequestResponse
          namespaces:
          - kube-system
          omitStages:
          - RequestReceived
          resources:
          - resourceNames:
            - aws-auth
            resources:
            - configmaps
          verbs:
          - update
          - patch
          - delete
        - level: None
          resources:
          - resources:
            - endpoints
            - services
            - services/status
          users:
          - system:kube-proxy
          verbs:
          - watch
        - level: None
          resources:
          - resources:
            - nodes
            - nodes/status
          users:
          - kubelet
          verbs:
          - get
        - level: None
          resources:
          - resources:
            - nodes
            - nodes/status
          verbs:
          - get
        - level: None
          namespaces:
          - kube-system
          resources:
          - resources:
            - endpoints
          users:
          - system:kube-controller-manager
          - system:kube-scheduler
          - system:serviceaccount:kube-system:endpoint-controller
          verbs:
          - get
          - update
        - level: None
          resources:
          - resources:
            - namespaces
            - namespaces/status
            - namespaces/finalize
          users:
          - system:apiserver
          verbs:
          - get
        - level: None
          resources:
          - group: metrics.k8s.io
          users:
          - system:kube-controller-manager
          verbs:
          - get
          - list
        - level: None
          nonResourceURLs:
          - /healthz*
          - /version
          - /swagger*
        - level: None
          resources:
          - resources:
            - events
        - level: Request
          omitStages:
          - RequestReceived
          resources:
          - resources:
            - nodes/status
            - pods/status
          users:
          - kubelet
          - system:node-problem-detector
          - system:serviceaccount:kube-system:node-problem-detector
          verbs:
          - update
          - patch
        - level: Request
          omitStages:
          - RequestReceived
          resources:
          - resources:
            - nodes/status
            - pods/status
          userGroups:
          - system:nodes
          verbs:
          - update
          - patch
        - level: Request
          omitStages:
          - RequestReceived
          users:
          - system:serviceaccount:kube-system:namespace-controller
          verbs:
          - deletecollection
        - level: Metadata
          omitStages:
          - RequestReceived
          resources:
          - resources:
            - secrets
            - configmaps
          - group: authentication.k8s.io
            resources:
            - tokenreviews
        - level: Request
          resources:
          - resources:
            - serviceaccounts/token
        - level: Request
          omitStages:
          - RequestReceived
          resources:
          - {}
          - group: admissionregistration.k8s.io
          - group: apiextensions.k8s.io
          - group: apiregistration.k8s.io
          - group: apps
          - group: authentication.k8s.io
          - group: authorization.k8s.io
          - group: autoscaling
          - group: batch
          - group: certificates.k8s.io
          - group: extensions
          - group: metrics.k8s.io
          - group: networking.k8s.io
          - group: policy
          - group: rbac.authorization.k8s.io
          - group: scheduling.k8s.io
          - group: settings.k8s.io
          - group: storage.k8s.io
          verbs:
          - get
          - list
          - watch
        - level: RequestResponse
          omitStages:
          - RequestReceived
          resources:
          - {}
          - group: admissionregistration.k8s.io
          - group: apiextensions.k8s.io
          - group: apiregistration.k8s.io
          - group: apps
          - group: authentication.k8s.io
          - group: authorization.k8s.io
          - group: autoscaling
          - group: batch
          - group: certificates.k8s.io
          - group: extensions
          - group: metrics.k8s.io
          - group: networking.k8s.io
          - group: policy
          - group: rbac.authorization.k8s.io
          - group: scheduling.k8s.io
          - group: settings.k8s.io
          - group: storage.k8s.io
        - level: Metadata
          omitStages:
          - RequestReceived
      owner: root:root
      path: /etc/kubernetes/audit-policy.yaml
    initConfiguration:
      nodeRegistration:
        criSocket: /var/run/containerd/containerd.sock
        kubeletExtraArgs:
          provider-id: cloudstack:///'{{ ds.meta_data.instance_id }}'
          read-only-port: "0"
          anonymous-auth: "false"
          tls-cipher-suites: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
        name: "{{ ds.meta_data.hostname }}"
    joinConfiguration:
      nodeRegistration:
        criSocket: /var/run/containerd/containerd.sock
        kubeletExtraArgs:
          provider-id: cloudstack:///'{{ ds.meta_data.instance_id }}'
          read-only-port: "0"
          anonymous-auth: "false"
          tls-cipher-suites: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
        name: "{{ ds.meta_data.hostname }}"
    preKubeadmCommands:
    - swapoff -a
    - hostname "{{ ds.meta_data.hostname }}"
    - echo "::1         ipv6-localhost ipv6-loopback" >/etc/hosts
    - echo "127.0.0.1   localhost" >>/etc/hosts
    - echo "127.0.0.1   {{ ds.meta_data.hostname }}" >>/etc/hosts
    - echo "{{ ds.meta_data.hostname }}" >/etc/hostname
    - "if [ -f /run/kubeadm/kubeadm.yaml ]; then sed -i 's#path: /etc/kubernetes/admin.conf#path: /etc/kubernetes/super-admin.conf#' /etc/kubernetes/manifests/kube-vip.yaml; fi"
    useExperimentalRetryJoin: true
    users:
    - name: mySshUsername
      sshAuthorizedKeys:
      - 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC1BK73XhIzjX+meUr7pIYh6RHbvI3tmHeQIXY5lv7aztN1UoX+bhPo3dwo2sfSQn5kuxgQdnxIZ/CTzy0p0GkEYVv3gwspCeurjmu0XmrdmaSGcGxCEWT/65NtvYrQtUE5ELxJ+N/aeZNlK2B7IWANnw/82913asXH4VksV1NYNduP0o1/G4XcwLLSyVFB078q/oEnmvdNIoS61j4/o36HVtENJgYr0idcBvwJdvcGxGnPaqOhx477t+kfJAa5n5dSA5wilIaoXH5i1Tf/HsTCM52L+iNCARvQzJYZhzbWI1MDQwzILtIBEQCJsl2XSqIupleY8CxqQ6jCXt2mhae+wPc3YmbO5rFvr2/EvC57kh3yDs1Nsuj8KOvD78KeeujbR8n8pScm3WDp62HFQ8lEKNdeRNj6kB8WnuaJvPnyZfvzOhwG65/9w13IBl7B1sWxbFnq2rMpm5uHVK7mAmjL0Tt8zoDhcE1YJEnp9xte3/pvmKPkST5Q/9ZtR9P5sI+02jY0fvPkPyC03j2gsPixG7rpOCwpOdbny4dcj0TDeeXJX8er+oVfJuLYz0pNWJcT2raDdFfcqvYA0B0IyNYlj5nWX4RuEcyT3qocLReWPnZojetvAG/H8XwOh7fEVGqHAKOVSnPXCSQJPl6s0H12jPJBDJMTydtYPEszl4/CeQ=='
      sudo: ALL=(ALL) NOPASSWD:ALL
    format: cloud-config
  replicas: 3
  version: v1.29.0-eks-1-29-4
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta3
kind: CloudStackMachineTemplate
metadata:
  creationTimestamp: null
  name: test-control-plane-template-1234567890000
  namespace: eksa-system
spec:
  template:
    spec:
      diskOffering:
        customSizeInGB: 0
        device: ""
        filesystem: ""
        label: ""
        mountPath: ""
      offering:
        name: m4-large
      sshKey: ""
      template:
        name: centos7-k8s-118

---
