{{- $suffix := .cloudstackAnnotationSuffix -}}
{{- $templateCP := .cloudstackControlPlaneTemplate -}}
{{- $offeringCP := .cloudstackControlPlaneOffering -}}
{{- $diskCP := .cloudstackControlPlaneDiskOffering -}}
{{- $diskJsonStrCP := .cloudstackControlPlaneDiskOfferingJsonStr -}}
{{- $isoCP := .cloudstackControlPlaneISOAttachment -}}
{{- $diskConfiguredCP := or (gt (len $diskCP.Id) 0) (gt (len $diskCP.Name) 0) -}}
{{- $isoConfiguredCP := or (gt (len $isoCP.Id) 0) (gt (len $isoCP.Name) 0) -}}
{{- $annotationsCP := or $diskConfiguredCP $isoConfiguredCP .cloudstackControlPlaneSymlinks -}}
{{- $templateEtcd := .cloudstackEtcdTemplate -}}
{{- $offeringEtcd := .cloudstackEtcdOffering -}}
{{- $diskEtcd := .cloudstackEtcdDiskOffering -}}
{{- $isoEtcd := .cloudstackEtcdISOAttachment -}}
{{- $diskConfiguredEtcd := or (gt (len $diskEtcd.Id) 0) (gt (len $diskEtcd.Name) 0) -}}
{{- $isoConfiguredEtcd := or (gt (len $isoEtcd.Id) 0) (gt (len $isoEtcd.Name) 0) -}}
{{- $annotationsEtcd := or $diskConfiguredEtcd $isoConfiguredEtcd .cloudstackEtcdSymlinks -}}
apiVersion: cluster.x-k8s.io/v1beta1
kind: Cluster
metadata:
  labels:
    cluster.x-k8s.io/cluster-name: {{.clusterName}}
  name: {{.clusterName}}
  namespace: {{.eksaSystemNamespace}}
spec:
  clusterNetwork:
    pods:
      cidrBlocks: {{.podCidrs}}
    services:
      cidrBlocks: {{.serviceCidrs}}
  controlPlaneRef:
    apiVersion: controlplane.cluster.x-k8s.io/v1beta1
    kind: KubeadmControlPlane
    name: {{.clusterName}}
  infrastructureRef:
    apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
    kind: CloudStackCluster
    name: {{.clusterName}}
{{- if .externalEtcd }}
  managedExternalEtcdRef:
    apiVersion: etcdcluster.cluster.x-k8s.io/v1beta1
    kind: EtcdadmCluster
    name: {{.clusterName}}-etcd
{{- end }}
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: CloudStackCluster
metadata:
  name: {{.clusterName}}
  namespace: {{.eksaSystemNamespace}}
spec:
  controlPlaneEndpoint:
    host: {{.controlPlaneEndpointHost}}
    port: {{.controlPlaneEndpointPort}}
  zones:{{ range $zone := .cloudstackZones }}
    - network:
{{- if $zone.Network.Id }}
        id: {{ $zone.Network.Id}}
{{- end}}
{{- if $zone.Network.Name }}
        name: {{ $zone.Network.Name}}
{{- end}}
{{- if $zone.Id }}
      id: {{ $zone.Id }}
{{- end}}
{{- if $zone.Name }}
      name: {{ $zone.Name }}
{{- end}}
{{- end}}
  {{ if .cloudstackDomain }}domain: {{.cloudstackDomain}}{{- end}}
  {{ if .cloudstackAccount }}account: {{.cloudstackAccount}}{{- end}}
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: CloudStackMachineTemplate
metadata:
  name: {{.controlPlaneTemplateName}}
  namespace: {{.eksaSystemNamespace}}
{{- if $annotationsCP}}
  annotations:
{{- end }}
{{- if $diskConfiguredCP}}
    diskoffering.{{$suffix}}: "{{.cloudstackControlPlaneDiskOfferingJsonStr | js}}"
{{- end }}
{{- if $isoConfiguredCP}}
    ISOAttachment.{{$suffix}}: "{{.cloudstackControlPlaneISOAttachmentJsonStr | js}}"
{{- end }}
{{- if .cloudstackControlPlaneSymlinks }}
    symlinks.{{$suffix}}: "{{.cloudstackControlPlaneSymlinksJsonStr | js}}"
{{- end}}
spec:
  template:
    spec:
      offering:
{{- if $offeringCP.Id}}
        id: {{$offeringCP.Id}}
{{- end}}
{{- if $offeringCP.Name}}
        name: {{$offeringCP.Name}}
{{- end}}
      template:
{{- if $templateCP.Id}}
        id: {{$templateCP.Id}}
{{- end}}
{{- if $templateCP.Name}}
        name: {{$templateCP.Name}}
{{- end}}
{{- if $diskConfiguredCP}}
      diskOffering:
{{- if $diskCP.Id}}
        id: {{$diskCP.Id}}
{{- end}}
{{- if $diskCP.Name}}
        name: {{$diskCP.Name}}
{{- end}}
{{- if gt $diskCP.CustomSize 0}}
        customSizeInGB: {{$diskCP.CustomSize}}
{{- end}}
        mountPath: {{$diskCP.MountPath}}
        device: {{$diskCP.Device}}
        filesystem: {{$diskCP.Filesystem}}
        label: {{$diskCP.Label}}
{{- end}}
{{- if $isoConfiguredCP}}
      ISOAttachment:
{{- if $isoCP.Id}}
        id: {{$isoCP.Id}}
{{- end}}
{{- if $isoCP.Name}}
        name: {{$isoCP.Name}}
{{- end}}
{{- end}}
{{- if .cloudstackControlPlaneCustomDetails }}
      details:
{{- range $key, $value := .cloudstackControlPlaneCustomDetails}}
        {{$key}}: {{$value}}
{{- end}}
{{- end}}
{{- if .cloudstackControlPlaneAffinity }}
      affinity: '{{ .cloudstackControlPlaneAffinity }}'
{{- end }}
{{- if .cloudstackControlPlaneAffinityGroupIds }}
      affinitygroupids:
      {{- range .cloudstackControlPlaneAffinityGroupIds}}
      - {{.}}
      {{- end }}
{{- end }}
---
apiVersion: controlplane.cluster.x-k8s.io/v1beta1
kind: KubeadmControlPlane
metadata:
  name: {{.clusterName}}
  namespace: {{.eksaSystemNamespace}}
spec:
  machineTemplate:
    infrastructureRef:
      apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
      kind: CloudStackMachineTemplate
      name: {{.controlPlaneTemplateName}}
  kubeadmConfigSpec:
    clusterConfiguration:
      imageRepository: {{.kubernetesRepository}}
      etcd:
{{- if .externalEtcd }}
        external:
          endpoints: []
          caFile: "/etc/kubernetes/pki/etcd/ca.crt"
          certFile: "/etc/kubernetes/pki/apiserver-etcd-client.crt"
          keyFile: "/etc/kubernetes/pki/apiserver-etcd-client.key"
{{- else }}
        local:
          imageRepository: {{.etcdRepository}}
          imageTag: {{.etcdImageTag}}
{{- if .etcdExtraArgs }}
          extraArgs:
{{ .etcdExtraArgs.ToYaml | indent 12 }}
{{- end }}
{{- end }}
      dns:
        imageRepository: {{.corednsRepository}}
        imageTag: {{.corednsVersion}}
      apiServer:
        extraArgs:
          cloud-provider: external
          audit-policy-file: /etc/kubernetes/audit-policy.yaml
          audit-log-path: /var/log/kubernetes/api-audit.log
          audit-log-maxage: "30"
          audit-log-maxbackup: "10"
          audit-log-maxsize: "512"
          profiling: "false"
{{- if .apiserverExtraArgs }}
{{ .apiserverExtraArgs.ToYaml | indent 10 }}
{{- end }}
        extraVolumes:
        - hostPath: /etc/kubernetes/audit-policy.yaml
          mountPath: /etc/kubernetes/audit-policy.yaml
          name: audit-policy
          pathType: File
          readOnly: true
        - hostPath: /var/log/kubernetes
          mountPath: /var/log/kubernetes
          name: audit-log-dir
          pathType: DirectoryOrCreate
          readOnly: false
{{- if .awsIamAuth}}
        - hostPath: /var/lib/kubeadm/aws-iam-authenticator/
          mountPath: /etc/kubernetes/aws-iam-authenticator/
          name: authconfig
          readOnly: false
        - hostPath: /var/lib/kubeadm/aws-iam-authenticator/pki/
          mountPath: /var/aws-iam-authenticator/
          name: awsiamcert
          readOnly: false
{{- end}}
      controllerManager:
        extraArgs:
          cloud-provider: external
          profiling: "false"
{{- if .controllermanagerExtraArgs }}
{{ .controllermanagerExtraArgs.ToYaml | indent 10 }}
{{- end }}
      scheduler:
        extraArgs:
          profiling: "false"
{{- if .schedulerExtraArgs }}
{{ .schedulerExtraArgs.ToYaml | indent 10 }}
{{- end }}
    files:
{{- if .cloudstackKubeVip}}
    - content: |
        apiVersion: v1
        kind: Pod
        metadata:
          creationTimestamp: null
          name: kube-vip
          namespace: kube-system
        spec:
          containers:
          - args:
            - manager
            env:
            - name: vip_arp
              value: "true"
            - name: port
              value: "6443"
            - name: vip_cidr
              value: "32"
            - name: cp_enable
              value: "true"
            - name: cp_namespace
              value: kube-system
            - name: vip_ddns
              value: "false"
            - name: vip_leaderelection
              value: "true"
            - name: vip_leaseduration
              value: "15"
            - name: vip_renewdeadline
              value: "10"
            - name: vip_retryperiod
              value: "2"
            - name: address
              value: {{.controlPlaneEndpointHost}}
            image: {{.kubeVipImage}}
            imagePullPolicy: IfNotPresent
            name: kube-vip
            resources: {}
            securityContext:
              capabilities:
                add:
                - NET_ADMIN
                - NET_RAW
            volumeMounts:
            - mountPath: /etc/kubernetes/admin.conf
              name: kubeconfig
          hostNetwork: true
          volumes:
          - hostPath:
              path: /etc/kubernetes/admin.conf
            name: kubeconfig
        status: {}
      owner: root:root
      path: /etc/kubernetes/manifests/kube-vip.yaml
{{- end}}
    - content: |
{{ .auditPolicy | indent 8 }}
      owner: root:root
      path: /etc/kubernetes/audit-policy.yaml
{{- if .proxyConfig }}
    - content: |
        [Service]
        Environment="HTTP_PROXY={{.httpProxy}}"
        Environment="HTTPS_PROXY={{.httpsProxy}}"
        Environment="NO_PROXY={{ stringsJoin .noProxy "," }}"
      owner: root:root
      path: /etc/systemd/system/containerd.service.d/http-proxy.conf
{{- end }}
{{- if .registryCACert }}
    - content: |
{{ .registryCACert | indent 8 }}
      owner: root:root
      path: "/etc/containerd/certs.d/{{.registryMirrorConfiguration}}/ca.crt"
{{- end }}
{{- if .registryMirrorConfiguration }}
    - content: |
        [plugins."io.containerd.grpc.v1.cri".registry.mirrors]
          [plugins."io.containerd.grpc.v1.cri".registry.mirrors."public.ecr.aws"]
            endpoint = ["https://{{.registryMirrorConfiguration}}"]
          {{- if .registryCACert }}
          [plugins."io.containerd.grpc.v1.cri".registry.configs."{{.registryMirrorConfiguration}}".tls]
            ca_file = "/etc/containerd/certs.d/{{.registryMirrorConfiguration}}/ca.crt"
          {{- end }}
      owner: root:root
      path: "/etc/containerd/config_append.toml"
{{- end }}
{{- if .awsIamAuth}}
    - content: |
        # clusters refers to the remote service.
        clusters:
          - name: aws-iam-authenticator
            cluster:
              certificate-authority: /var/aws-iam-authenticator/cert.pem
              server: https://localhost:21362/authenticate
        # users refers to the API Server's webhook configuration
        # (we don't need to authenticate the API server).
        users:
          - name: apiserver
        # kubeconfig files require a context. Provide one for the API Server.
        current-context: webhook
        contexts:
        - name: webhook
          context:
            cluster: aws-iam-authenticator
            user: apiserver
      permissions: "0640"
      owner: root:root
      path: /var/lib/kubeadm/aws-iam-authenticator/kubeconfig.yaml
    - contentFrom:
        secret:
          name: aws-iam-authenticator-ca
          key: cert.pem
      permissions: "0640"
      owner: root:root
      path: /var/lib/kubeadm/aws-iam-authenticator/pki/cert.pem
    - contentFrom:
        secret:
          name: aws-iam-authenticator-ca
          key: key.pem
      permissions: "0640"
      owner: root:root
      path: /var/lib/kubeadm/aws-iam-authenticator/pki/key.pem
{{- end}}
    initConfiguration:
      nodeRegistration:
        criSocket: /var/run/containerd/containerd.sock
        kubeletExtraArgs:
          provider-id: cloudstack:///'{{`{{ ds.meta_data.instance_id }}`}}'
          read-only-port: "0"
          anonymous-auth: "false"
{{- if .kubeletExtraArgs }}
{{ .kubeletExtraArgs.ToYaml | indent 10 }}
{{- end }}
        name: '{{`{{ ds.meta_data.local_hostname }}`}}'
{{- if .controlPlaneTaints }}
        taints:
{{- range .controlPlaneTaints}}
        - key: {{ .Key }}
          value: {{ .Value }}
          effect: {{ .Effect }}
{{- if .TimeAdded }}
          timeAdded: {{ .TimeAdded }}
{{- end }}
{{- end }}
{{- else}}
        taints: []
{{- end }}
    joinConfiguration:
      nodeRegistration:
        criSocket: /var/run/containerd/containerd.sock
        kubeletExtraArgs:
          provider-id: cloudstack:///'{{`{{ ds.meta_data.instance_id }}`}}'
          read-only-port: "0"
          anonymous-auth: "false"
{{- if .kubeletExtraArgs }}
{{ .kubeletExtraArgs.ToYaml | indent 10 }}
{{- end }}
        name: '{{`{{ ds.meta_data.local_hostname }}`}}'
{{- if .controlPlaneTaints }}
        taints:
{{- range .controlPlaneTaints}}
        - key: {{ .Key }}
          value: {{ .Value }}
          effect: {{ .Effect }}
{{- if .TimeAdded }}
          timeAdded: {{ .TimeAdded }}
{{- end }}
{{- end }}
{{- else}}
        taints: []
{{- end }}
    preKubeadmCommands:
    - swapoff -a
{{- if.registryMirrorConfiguration }}
    - cat /etc/containerd/config_append.toml >> /etc/containerd/config.toml
{{- end }}
{{- if or .proxyConfig .registryMirrorConfiguration }}
    - sudo systemctl daemon-reload
    - sudo systemctl restart containerd
{{- end }}
    - hostname "{{`{{ ds.meta_data.local_hostname }}`}}"
    - echo "::1         ipv6-localhost ipv6-loopback" >/etc/hosts
    - echo "127.0.0.1   localhost" >>/etc/hosts
    - echo "127.0.0.1   {{`{{ ds.meta_data.local_hostname }}`}}" >>/etc/hosts
    - echo "{{`{{ ds.meta_data.local_hostname }}`}}" >/etc/hostname
{{- range $dir, $target := .cloudstackControlPlaneSymlinks}}
    - >-
      if [ ! -L {{$dir}} ] ;
        then
          mv {{$dir}} {{$dir}}-$(tr -dc A-Za-z0-9 < /dev/urandom | head -c 10) ;
          mkdir -p {{$target}} && ln -s {{$target}} {{$dir}} ;
        else
          echo "{{$dir}} already symlink";
      fi
{{- end}}
{{- if and $isoConfiguredCP $isoCP.RunPreKubeadmCommand}}
    - {{ $isoCP.MountPath}}/preKubeadmCommands.sh {{- range $isoCP.PreKubeadmCommandArgs}} {{ .}}{{- end}}
{{- end}}
{{- if and $isoConfiguredCP $isoCP.RunPostKubeadmCommand}}
    postKubeadmCommands:
    - {{ $isoCP.MountPath}}/postKubeadmCommands.sh {{- range $isoCP.PostKubeadmCommandArgs}} {{ .}}{{- end}}
{{- end}}
{{- if $diskConfiguredCP }}
    diskSetup:
      filesystems:
        - device: {{ $diskCP.Device }}1
          overwrite: false
          extraOpts:
            - -E
            - lazy_itable_init=1,lazy_journal_init=1
          filesystem: {{ $diskCP.Filesystem }}
          label: {{ $diskCP.Label }}
      partitions:
        - device: {{ $diskCP.Device }}
          layout: true
          overwrite: false
          tableType: gpt
{{- end }}
{{- if or $diskConfiguredCP $isoConfiguredCP}}
    mounts:
{{- if $diskConfiguredCP }}
      - - LABEL={{ $diskCP.Label }}
        - {{ $diskCP.MountPath }}
{{- end}}
{{- if $isoConfiguredCP }}
      - - {{ $isoCP.Device }}
        - {{ $isoCP.MountPath }}
{{- end}}
{{- end}}
    useExperimentalRetryJoin: true
    users:
    - name: {{.controlPlaneSshUsername}}
      sshAuthorizedKeys:
      - '{{.cloudstackControlPlaneSshAuthorizedKey}}'
      sudo: ALL=(ALL) NOPASSWD:ALL
    format: {{.format}}
  replicas: {{.controlPlaneReplicas}}
  version: {{.kubernetesVersion}}
{{- if .externalEtcd }}
---
kind: EtcdadmCluster
apiVersion: etcdcluster.cluster.x-k8s.io/v1beta1
metadata:
  name: {{.clusterName}}-etcd
  namespace: {{.eksaSystemNamespace}}
spec:
  replicas: {{.externalEtcdReplicas}}
  etcdadmConfigSpec:
    etcdadmBuiltin: false
    format: {{.format}}
    cloudInitConfig:
      version: {{.externalEtcdVersion}}
      installDir: "/usr/bin"
    etcdadmInstallCommands:
      - echo this line exists so that etcdadmInstallCommands is not empty
      - echo etcdadmInstallCommands can be removed once etcdadm bootstrap and controller fix the bug
      - echo that preEtcdadmCommands not run unless etcdadmBuiltin is false
      - echo https://github.com/mrajashree/etcdadm-bootstrap-provider/issues/13
    preEtcdadmCommands:
    - swapoff -a
    - hostname "{{`{{ ds.meta_data.local_hostname }}`}}"
    - echo "::1         ipv6-localhost ipv6-loopback" >/etc/hosts
    - echo "127.0.0.1   localhost" >>/etc/hosts
    - echo "127.0.0.1   {{`{{ ds.meta_data.local_hostname }}`}}" >>/etc/hosts
    - echo "{{`{{ ds.meta_data.local_hostname }}`}}" >/etc/hostname
{{- if $diskConfiguredEtcd }}
    - >-
      echo "type=83" | sfdisk {{ $diskEtcd.Device }} &&
      mkfs -t {{ $diskEtcd.Filesystem }} {{ $diskEtcd.Device }}1 &&
      mkdir -p {{ $diskEtcd.MountPath }} &&
      echo {{ $diskEtcd.Device }}1 {{ $diskEtcd.MountPath }} {{ $diskEtcd.Filesystem }} defaults 0 2 >> /etc/fstab &&
      mount {{ $diskEtcd.MountPath }}
{{- end }}
{{- range $dir, $target := .cloudstackEtcdSymlinks}}
    - >-
      if [ ! -L {{$dir}} ] ;
        then
          mv {{$dir}} {{$dir}}-$(tr -dc A-Za-z0-9 < /dev/urandom | head -c 10) ;
          mkdir -p {{$target}} && ln -s {{$target}} {{$dir}} ;
        else
          echo "{{$dir}} already symlink" ;
      fi
{{- end}}
{{- if $isoConfiguredEtcd }}
    - >-
      mkdir -p {{ $isoEtcd.MountPath }} &&
      echo {{ $isoEtcd.Device }} {{ $isoEtcd.MountPath }} auto ro 0 0 >> /etc/fstab &&
      mount {{ $isoEtcd.MountPath }}
{{- end }}
{{- if and $isoConfiguredEtcd $isoEtcd.RunPreKubeadmCommand}}
    - {{ $isoEtcd.MountPath}}/preKubeadmCommands.sh {{- range $isoEtcd.PreKubeadmCommandArgs}} {{ .}}{{- end}}
{{- end}}
{{- if .etcdCipherSuites }}
    cipherSuites: {{.etcdCipherSuites}}
{{- end }}
    users:
    - name: {{.etcdSshUsername}}
      sshAuthorizedKeys:
      - '{{.cloudstackEtcdSshAuthorizedKey}}'
      sudo: ALL=(ALL) NOPASSWD:ALL
{{- if .proxyConfig }}
    proxy:
      httpProxy: {{ .httpProxy }}
      httpsProxy: {{ .httpsProxy }}
      noProxy: {{ range .noProxy }}
        - {{ . }}
      {{- end }}
{{- end }}
{{- if .registryMirrorConfiguration }}
    registryMirror:
      endpoint: {{.registryMirrorConfiguration}}
      {{- if .registryCACert }}
      caCert: |
{{ .registryCACert | indent 8 }}
      {{- end }}
{{- end }}
  infrastructureTemplate:
    apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
    kind: CloudStackMachineTemplate
    name: {{.etcdTemplateName}}
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: CloudStackMachineTemplate
metadata:
  name: {{.etcdTemplateName}}
  namespace: '{{.eksaSystemNamespace}}'
{{- if $annotationsEtcd}}
  annotations:
{{- end }}
{{- if $diskConfiguredEtcd}}
    diskoffering.{{$suffix}}: "{{.cloudstackEtcdDiskOfferingJsonStr | js}}"
{{- end }}
{{- if $isoConfiguredEtcd}}
    ISOAttachment.{{$suffix}}: "{{.cloudstackEtcdISOAttachmentJsonStr | js}}"
{{- end }}
{{- if .cloudstackEtcdSymlinks }}
    symlinks.{{$suffix}}: "{{.cloudstackEtcdSymlinksJsonStr | js}}"
{{- end}}
spec:
  template:
    spec:
      offering:
{{- if $offeringEtcd.Id}}
        id: {{$offeringEtcd.Id}}
{{- end}}
{{- if $offeringEtcd.Name}}
        name: {{$offeringEtcd.Name}}
{{- end}}
      template:
{{- if $templateEtcd.Id}}
        id: {{$templateEtcd.Id}}
{{- end}}
{{- if $templateEtcd.Name}}
        name: {{$templateEtcd.Name}}
{{- end}}
{{- if $diskConfiguredEtcd}}
      diskOffering:
{{- if $diskEtcd.Id}}
        id: {{$diskEtcd.Id}}
{{- end}}
{{- if $diskEtcd.Name}}
        name: {{$diskEtcd.Name}}
{{- end}}
{{- if gt $diskEtcd.CustomSize 0}}
        customSizeInGB: {{$diskEtcd.CustomSize}}
{{- end}}
        mountPath: {{$diskEtcd.MountPath}}
        device: {{$diskEtcd.Device}}
        filesystem: {{$diskEtcd.Filesystem}}
        label: {{$diskEtcd.Label}}
{{- end}}
{{- if $isoConfiguredEtcd}}
      ISOAttachment:
{{- if $isoEtcd.Id}}
        id: {{$isoEtcd.Id}}
{{- end}}
{{- if $isoEtcd.Name}}
        name: {{$isoEtcd.Name}}
{{- end}}
{{- end}}
{{- if .cloudstackEtcdCustomDetails }}
      details:
{{- range $key, $value := .cloudstackEtcdCustomDetails}}
        {{$key}}: {{$value}}
{{- end}}
{{- end}}
{{- if .cloudstackEtcdAffinity }}
      affinity: '{{ .cloudstackEtcdAffinity }}'
{{- end }}
{{- if .cloudstackEtcdAffinityGroupIds }}
      affinitygroupids:
      {{- range .cloudstackEtcdAffinityGroupIds }}
      - {{.}}
      {{- end }}
{{- end }}
{{- end }}
