// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/eks-anywhere/pkg/providers/cloudstack (interfaces: ProviderCloudMonkeyClient,ProviderKubectlClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	v1alpha1 "github.com/aws/eks-anywhere/pkg/api/v1alpha1"
	executables "github.com/aws/eks-anywhere/pkg/executables"
	types "github.com/aws/eks-anywhere/pkg/types"
	gomock "github.com/golang/mock/gomock"
	v1alpha3 "github.com/mrajashree/etcdadm-controller/api/v1alpha3"
	v1 "k8s.io/api/core/v1"
	v1alpha30 "sigs.k8s.io/cluster-api/api/v1alpha3"
	v1alpha31 "sigs.k8s.io/cluster-api/controlplane/kubeadm/api/v1alpha3"
)

// MockProviderCloudMonkeyClient is a mock of ProviderCloudMonkeyClient interface.
type MockProviderCloudMonkeyClient struct {
	ctrl     *gomock.Controller
	recorder *MockProviderCloudMonkeyClientMockRecorder
}

// MockProviderCloudMonkeyClientMockRecorder is the mock recorder for MockProviderCloudMonkeyClient.
type MockProviderCloudMonkeyClientMockRecorder struct {
	mock *MockProviderCloudMonkeyClient
}

// NewMockProviderCloudMonkeyClient creates a new mock instance.
func NewMockProviderCloudMonkeyClient(ctrl *gomock.Controller) *MockProviderCloudMonkeyClient {
	mock := &MockProviderCloudMonkeyClient{ctrl: ctrl}
	mock.recorder = &MockProviderCloudMonkeyClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProviderCloudMonkeyClient) EXPECT() *MockProviderCloudMonkeyClientMockRecorder {
	return m.recorder
}

func (m *MockProviderCloudMonkeyClient) SearchTemplate(ctx context.Context, domain string, zone string, account string, template string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchTemplate", ctx, domain, zone, account, template)
	ret0, _ := ret[1].(error)
	return "", ret0
}

func (m *MockProviderCloudMonkeyClient) SearchComputeOffering(ctx context.Context, domain string, zone string, account string, computeOffering string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchComputeOffering", ctx, domain, zone, account, computeOffering)
	ret0, _ := ret[1].(error)
	return "", ret0
}

func (m *MockProviderCloudMonkeyClient) SearchDiskOffering(ctx context.Context, domain string, zone string, account string, diskOffering string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchDiskOffering", ctx, domain, zone, account, diskOffering)
	ret0, _ := ret[1].(error)
	return "", ret0
}

// ValidateCloudStackSetup mocks base method.
func (m *MockProviderCloudMonkeyClient) ValidateCloudStackSetup(arg0 context.Context, arg1 *v1alpha1.CloudStackDeploymentConfig, arg2 *bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateCloudStackSetup", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchTemplate indicates an expected call of SearchTemplate.
func (mr *MockProviderCloudMonkeyClientMockRecorder) SearchTemplate(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchTemplate", reflect.TypeOf((*MockProviderCloudMonkeyClient)(nil).SearchTemplate), arg0, arg1, arg2, arg3, arg4)
}

// SearchComputeOffering indicates an expected call of SearchComputeOffering.
func (mr *MockProviderCloudMonkeyClientMockRecorder) SearchComputeOffering(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchComputeOffering", reflect.TypeOf((*MockProviderCloudMonkeyClient)(nil).SearchComputeOffering), arg0, arg1, arg2, arg3, arg4)
}

// SearchDiskOffering indicates an expected call of SearchDiskOffering.
func (mr *MockProviderCloudMonkeyClientMockRecorder) SearchDiskOffering(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchDiskOffering", reflect.TypeOf((*MockProviderCloudMonkeyClient)(nil).SearchDiskOffering), arg0, arg1, arg2, arg3, arg4)
}

// ValidateCloudStackSetup indicates an expected call of ValidateCloudStackSetup.
func (mr *MockProviderCloudMonkeyClientMockRecorder) ValidateCloudStackSetup(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateCloudStackSetup", reflect.TypeOf((*MockProviderCloudMonkeyClient)(nil).ValidateCloudStackSetup), arg0, arg1, arg2)
}

// ValidateCloudStackSetupMachineConfig mocks base method.
func (m *MockProviderCloudMonkeyClient) ValidateCloudStackSetupMachineConfig(arg0 context.Context, arg1 *v1alpha1.CloudStackDeploymentConfig, arg2 *v1alpha1.CloudStackMachineConfig, arg3 *bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateCloudStackSetupMachineConfig", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateCloudStackSetupMachineConfig indicates an expected call of ValidateCloudStackSetupMachineConfig.
func (mr *MockProviderCloudMonkeyClientMockRecorder) ValidateCloudStackSetupMachineConfig(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateCloudStackSetupMachineConfig", reflect.TypeOf((*MockProviderCloudMonkeyClient)(nil).ValidateCloudStackSetupMachineConfig), arg0, arg1, arg2, arg3)
}

// MockProviderKubectlClient is a mock of ProviderKubectlClient interface.
type MockProviderKubectlClient struct {
	ctrl     *gomock.Controller
	recorder *MockProviderKubectlClientMockRecorder
}

// MockProviderKubectlClientMockRecorder is the mock recorder for MockProviderKubectlClient.
type MockProviderKubectlClientMockRecorder struct {
	mock *MockProviderKubectlClient
}

// NewMockProviderKubectlClient creates a new mock instance.
func NewMockProviderKubectlClient(ctrl *gomock.Controller) *MockProviderKubectlClient {
	mock := &MockProviderKubectlClient{ctrl: ctrl}
	mock.recorder = &MockProviderKubectlClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProviderKubectlClient) EXPECT() *MockProviderKubectlClientMockRecorder {
	return m.recorder
}

// ApplyKubeSpecFromBytes mocks base method.
func (m *MockProviderKubectlClient) ApplyKubeSpecFromBytes(arg0 context.Context, arg1 *types.Cluster, arg2 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyKubeSpecFromBytes", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyKubeSpecFromBytes indicates an expected call of ApplyKubeSpecFromBytes.
func (mr *MockProviderKubectlClientMockRecorder) ApplyKubeSpecFromBytes(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyKubeSpecFromBytes", reflect.TypeOf((*MockProviderKubectlClient)(nil).ApplyKubeSpecFromBytes), arg0, arg1, arg2)
}

// CreateNamespace mocks base method.
func (m *MockProviderKubectlClient) CreateNamespace(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNamespace", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNamespace indicates an expected call of CreateNamespace.
func (mr *MockProviderKubectlClientMockRecorder) CreateNamespace(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNamespace", reflect.TypeOf((*MockProviderKubectlClient)(nil).CreateNamespace), arg0, arg1, arg2)
}

// DeleteEksaCloudStackDeploymentConfig mocks base method.
func (m *MockProviderKubectlClient) DeleteEksaCloudStackDeploymentConfig(arg0 context.Context, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEksaCloudStackDeploymentConfig", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEksaCloudStackDeploymentConfig indicates an expected call of DeleteEksaCloudStackDeploymentConfig.
func (mr *MockProviderKubectlClientMockRecorder) DeleteEksaCloudStackDeploymentConfig(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEksaCloudStackDeploymentConfig", reflect.TypeOf((*MockProviderKubectlClient)(nil).DeleteEksaCloudStackDeploymentConfig), arg0, arg1, arg2, arg3)
}

// DeleteEksaCloudStackMachineConfig mocks base method.
func (m *MockProviderKubectlClient) DeleteEksaCloudStackMachineConfig(arg0 context.Context, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEksaCloudStackMachineConfig", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEksaCloudStackMachineConfig indicates an expected call of DeleteEksaCloudStackMachineConfig.
func (mr *MockProviderKubectlClientMockRecorder) DeleteEksaCloudStackMachineConfig(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEksaCloudStackMachineConfig", reflect.TypeOf((*MockProviderKubectlClient)(nil).DeleteEksaCloudStackMachineConfig), arg0, arg1, arg2, arg3)
}

// GetEksaCluster mocks base method.
func (m *MockProviderKubectlClient) GetEksaCluster(arg0 context.Context, arg1 *types.Cluster, arg2 string) (*v1alpha1.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEksaCluster", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1alpha1.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEksaCluster indicates an expected call of GetEksaCluster.
func (mr *MockProviderKubectlClientMockRecorder) GetEksaCluster(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEksaCluster", reflect.TypeOf((*MockProviderKubectlClient)(nil).GetEksaCluster), arg0, arg1, arg2)
}

// GetEksaCloudStackDeploymentConfig mocks base method.
func (m *MockProviderKubectlClient) GetEksaCloudStackDeploymentConfig(arg0 context.Context, arg1, arg2, arg3 string) (*v1alpha1.CloudStackDeploymentConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEksaCloudStackDeploymentConfig", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*v1alpha1.CloudStackDeploymentConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEksaCloudStackDeploymentConfig indicates an expected call of GetEksaCloudStackDeploymentConfig.
func (mr *MockProviderKubectlClientMockRecorder) GetEksaCloudStackDeploymentConfig(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEksaCloudStackDeploymentConfig", reflect.TypeOf((*MockProviderKubectlClient)(nil).GetEksaCloudStackDeploymentConfig), arg0, arg1, arg2, arg3)
}

// GetEksaCloudStackMachineConfig mocks base method.
func (m *MockProviderKubectlClient) GetEksaCloudStackMachineConfig(arg0 context.Context, arg1, arg2, arg3 string) (*v1alpha1.CloudStackMachineConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEksaCloudStackMachineConfig", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*v1alpha1.CloudStackMachineConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEksaCloudStackMachineConfig indicates an expected call of GetEksaCloudStackMachineConfig.
func (mr *MockProviderKubectlClientMockRecorder) GetEksaCloudStackMachineConfig(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEksaCloudStackMachineConfig", reflect.TypeOf((*MockProviderKubectlClient)(nil).GetEksaCloudStackMachineConfig), arg0, arg1, arg2, arg3)
}

// GetEtcdadmCluster mocks base method.
func (m *MockProviderKubectlClient) GetEtcdadmCluster(arg0 context.Context, arg1 *types.Cluster, arg2 string, arg3 ...executables.KubectlOpt) (*v1alpha3.EtcdadmCluster, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEtcdadmCluster", varargs...)
	ret0, _ := ret[0].(*v1alpha3.EtcdadmCluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEtcdadmCluster indicates an expected call of GetEtcdadmCluster.
func (mr *MockProviderKubectlClientMockRecorder) GetEtcdadmCluster(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEtcdadmCluster", reflect.TypeOf((*MockProviderKubectlClient)(nil).GetEtcdadmCluster), varargs...)
}

// GetKubeadmControlPlane mocks base method.
func (m *MockProviderKubectlClient) GetKubeadmControlPlane(arg0 context.Context, arg1 *types.Cluster, arg2 string, arg3 ...executables.KubectlOpt) (*v1alpha31.KubeadmControlPlane, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetKubeadmControlPlane", varargs...)
	ret0, _ := ret[0].(*v1alpha31.KubeadmControlPlane)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKubeadmControlPlane indicates an expected call of GetKubeadmControlPlane.
func (mr *MockProviderKubectlClientMockRecorder) GetKubeadmControlPlane(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKubeadmControlPlane", reflect.TypeOf((*MockProviderKubectlClient)(nil).GetKubeadmControlPlane), varargs...)
}

// GetMachineDeployment mocks base method.
func (m *MockProviderKubectlClient) GetMachineDeployment(arg0 context.Context, arg1 *types.Cluster, arg2 string, arg3 ...executables.KubectlOpt) (*v1alpha30.MachineDeployment, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMachineDeployment", varargs...)
	ret0, _ := ret[0].(*v1alpha30.MachineDeployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachineDeployment indicates an expected call of GetMachineDeployment.
func (mr *MockProviderKubectlClientMockRecorder) GetMachineDeployment(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachineDeployment", reflect.TypeOf((*MockProviderKubectlClient)(nil).GetMachineDeployment), varargs...)
}

// GetSecret mocks base method.
func (m *MockProviderKubectlClient) GetSecret(arg0 context.Context, arg1 string, arg2 ...executables.KubectlOpt) (*v1.Secret, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSecret", varargs...)
	ret0, _ := ret[0].(*v1.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecret indicates an expected call of GetSecret.
func (mr *MockProviderKubectlClientMockRecorder) GetSecret(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecret", reflect.TypeOf((*MockProviderKubectlClient)(nil).GetSecret), varargs...)
}

// LoadSecret mocks base method.
func (m *MockProviderKubectlClient) LoadSecret(arg0 context.Context, arg1, arg2, arg3, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadSecret", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadSecret indicates an expected call of LoadSecret.
func (mr *MockProviderKubectlClientMockRecorder) LoadSecret(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadSecret", reflect.TypeOf((*MockProviderKubectlClient)(nil).LoadSecret), arg0, arg1, arg2, arg3, arg4)
}

// SearchCloudStackMachineConfig mocks base method.
func (m *MockProviderKubectlClient) SearchCloudStackMachineConfig(arg0 context.Context, arg1, arg2, arg3 string) ([]*v1alpha1.CloudStackMachineConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchCloudStackMachineConfig", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*v1alpha1.CloudStackMachineConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchCloudStackMachineConfig indicates an expected call of SearchCloudStackMachineConfig.
func (mr *MockProviderKubectlClientMockRecorder) SearchCloudStackMachineConfig(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchCloudStackMachineConfig", reflect.TypeOf((*MockProviderKubectlClient)(nil).SearchCloudStackMachineConfig), arg0, arg1, arg2, arg3)
}

// SearchCloudStackDeploymentConfig mocks base method.
func (m *MockProviderKubectlClient) SearchCloudStackDeploymentConfig(arg0 context.Context, arg1, arg2, arg3 string) ([]*v1alpha1.CloudStackDeploymentConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchCloudStackDeploymentConfig", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*v1alpha1.CloudStackDeploymentConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchCloudStackDeploymentConfig indicates an expected call of SearchCloudStackDeploymentConfig.
func (mr *MockProviderKubectlClientMockRecorder) SearchCloudStackDeploymentConfig(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchCloudStackDeploymentConfig", reflect.TypeOf((*MockProviderKubectlClient)(nil).SearchCloudStackDeploymentConfig), arg0, arg1, arg2, arg3)
}

// UpdateAnnotation mocks base method.
func (m *MockProviderKubectlClient) UpdateAnnotation(arg0 context.Context, arg1, arg2 string, arg3 map[string]string, arg4 ...executables.KubectlOpt) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAnnotation", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAnnotation indicates an expected call of UpdateAnnotation.
func (mr *MockProviderKubectlClientMockRecorder) UpdateAnnotation(arg0, arg1, arg2, arg3 interface{}, arg4 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnnotation", reflect.TypeOf((*MockProviderKubectlClient)(nil).UpdateAnnotation), varargs...)
}

// MockClusterResourceSetManager is a mock of ClusterResourceSetManager interface.
type MockClusterResourceSetManager struct {
	ctrl     *gomock.Controller
	recorder *MockClusterResourceSetManagerMockRecorder
}

// MockClusterResourceSetManagerMockRecorder is the mock recorder for MockClusterResourceSetManager.
type MockClusterResourceSetManagerMockRecorder struct {
	mock *MockClusterResourceSetManager
}

// NewMockClusterResourceSetManager creates a new mock instance.
func NewMockClusterResourceSetManager(ctrl *gomock.Controller) *MockClusterResourceSetManager {
	mock := &MockClusterResourceSetManager{ctrl: ctrl}
	mock.recorder = &MockClusterResourceSetManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterResourceSetManager) EXPECT() *MockClusterResourceSetManagerMockRecorder {
	return m.recorder
}

// ForceUpdate mocks base method.
func (m *MockClusterResourceSetManager) ForceUpdate(arg0 context.Context, arg1, arg2 string, arg3, arg4 *types.Cluster) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForceUpdate", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// ForceUpdate indicates an expected call of ForceUpdate.
func (mr *MockClusterResourceSetManagerMockRecorder) ForceUpdate(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForceUpdate", reflect.TypeOf((*MockClusterResourceSetManager)(nil).ForceUpdate), arg0, arg1, arg2, arg3, arg4)
}
