apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
kind: KubeadmConfigTemplate
metadata:
  name: {{.workloadkubeadmconfigTemplateName}}
  namespace: {{.eksaSystemNamespace}}
spec:
  template:
    spec:
      joinConfiguration:
{{- if .kubeletConfiguration }}
        patches: 
          directory: /etc/kubernetes/patches
{{- end }}
{{- if (eq .format "bottlerocket") }}
        pause:
          imageRepository: {{.pauseRepository}}
          imageTag: {{.pauseVersion}}
        bottlerocketBootstrap:
          imageRepository: {{.bottlerocketBootstrapRepository}}
          imageTag: {{.bottlerocketBootstrapVersion}}
{{- end }}
{{- if and .proxyConfig (eq .format "bottlerocket") }}
        proxy:
          httpsProxy: {{.httpsProxy}}
          noProxy: {{ range .noProxy }}
            - {{ . }}
          {{- end }}
{{- end }}
{{- if and .registryMirrorMap (eq .format "bottlerocket") }}
        registryMirror:
          {{- if .publicECRMirror }}
          endpoint: {{ .publicECRMirror }}
          {{- end }}
          {{- if .registryCACert }}
          caCert: |
{{ .registryCACert | indent 12 }}
          {{- end }}
          {{- if not .publicECRMirror }}
          mirrors:
          {{- range $orig, $mirror := .registryMirrorMap }}
            - registry: "{{ $orig }}"
              endpoints:
              - {{ $mirror }}
          {{- end }}
          {{- end }}
{{- end }}
{{- if .bottlerocketSettings }}
{{ .bottlerocketSettings | indent 8 }}
{{- end }}
{{- if .certBundles }}
        certBundles:
        {{- range .certBundles }}
        - name: "{{ .Name }}"
          data: |
{{ .Data | indent 12 }}
        {{- end }}
{{- end }}
        nodeRegistration:
          criSocket: /var/run/containerd/containerd.sock
{{- if .workerNodeGroupTaints }}
          taints:{{ range .workerNodeGroupTaints}}
            - key: {{ .Key }}
              value: {{ .Value }}
              effect: {{ .Effect }}
{{- if .TimeAdded }}
              timeAdded: {{ .TimeAdded }}
{{- end }}
{{- end }}
{{- else}}
          taints: []
{{- end }}
          kubeletExtraArgs:
            cloud-provider: external
{{- if not .kubeletConfiguration }}
            read-only-port: "0"
            anonymous-auth: "false"
{{- if .cgroupDriverSystemd}}
            cgroup-driver: systemd
{{- end }}
{{- if .kubeletExtraArgs }}
{{ .kubeletExtraArgs.ToYaml | indent 12 }}
{{- end }}
{{- end }}
{{- if .nodeLabelArgs }}
{{ .nodeLabelArgs.ToYaml | indent 12 }}
{{- end }}
          name: '{{"{{"}} ds.meta_data.hostname {{"}}"}}'
{{- if or (and (ne .format "bottlerocket") (or .proxyConfig .registryMirrorMap)) .kubeletConfiguration }}
      files:
{{- end }}
{{- if .kubeletConfiguration }}
      - content: |
{{ .kubeletConfiguration | indent 10 }}
        owner: root:root
        permissions: "0644"
        path: /etc/kubernetes/patches/kubeletconfiguration0+strategic.yaml
{{- end }}
{{- if and .proxyConfig (ne .format "bottlerocket") }}
      - content: |
          [Service]
          Environment="HTTP_PROXY={{.httpProxy}}"
          Environment="HTTPS_PROXY={{.httpsProxy}}"
          Environment="NO_PROXY={{ stringsJoin .noProxy "," }}"
        owner: root:root
        path: /etc/systemd/system/containerd.service.d/http-proxy.conf
{{- end }}
{{- if (ne .format "bottlerocket") }}
{{- if .registryCACert }}
      - content: |
{{ .registryCACert | indent 10 }}
        owner: root:root
        path: "/etc/containerd/certs.d/{{ .mirrorBase }}/ca.crt"
{{- end }}
{{- if .registryMirrorMap }}
      - content: |
          [plugins."io.containerd.grpc.v1.cri".registry.mirrors]
            {{- range $orig, $mirror := .registryMirrorMap }}
            [plugins."io.containerd.grpc.v1.cri".registry.mirrors."{{ $orig }}"]
              endpoint = ["https://{{ $mirror }}"]
            {{- end }}
            {{- if or .registryCACert .insecureSkip }}
            [plugins."io.containerd.grpc.v1.cri".registry.configs."{{ .mirrorBase }}".tls]
            {{- if .registryCACert }}
              ca_file = "/etc/containerd/certs.d/{{ .mirrorBase }}/ca.crt"
            {{- end }}
            {{- if .insecureSkip }}
              insecure_skip_verify = {{.insecureSkip}}
            {{- end }}
            {{- end }}
            {{- if .registryAuth }}
            [plugins."io.containerd.grpc.v1.cri".registry.configs."{{ .mirrorBase }}".auth]
              username = "{{.registryUsername}}"
              password = "{{.registryPassword}}"
            {{- end }}
        owner: root:root
        path: "/etc/containerd/config_append.toml"
{{- end }}
{{- end }}
{{- if .ntpServers }}
      ntp:
        enabled: true
        servers: {{ range .ntpServers }}
        - {{ . }}
        {{- end }}
{{- end }}
      preKubeadmCommands:
{{- if and .registryMirrorMap (ne .format "bottlerocket") }}
      - cat /etc/containerd/config_append.toml >> /etc/containerd/config.toml
{{- end }}
{{- if and (or .proxyConfig .registryMirrorMap) (ne .format "bottlerocket") }}
      - sudo systemctl daemon-reload
      - sudo systemctl restart containerd
{{- end }}
      - hostname "{{`{{ ds.meta_data.hostname }}`}}"
      - echo "::1         ipv6-localhost ipv6-loopback" >/etc/hosts
      - echo "127.0.0.1   localhost" >>/etc/hosts
      - echo "127.0.0.1   {{`{{ ds.meta_data.hostname }}`}}" >>/etc/hosts
      - echo "{{`{{ ds.meta_data.hostname }}`}}" >/etc/hostname
      users:
      - name: {{.workerSshUsername}}
        sshAuthorizedKeys:
        - '{{.vsphereWorkerSshAuthorizedKey}}'
        sudo: ALL=(ALL) NOPASSWD:ALL
      format: {{.format}}
---
apiVersion: cluster.x-k8s.io/v1beta1
kind: MachineDeployment
metadata:
  labels:
    cluster.x-k8s.io/cluster-name: {{.clusterName}}
  name: {{.workerNodeGroupName}}
  namespace: {{.eksaSystemNamespace}}
{{- if .autoscalingConfig }}
  annotations:
    cluster.x-k8s.io/cluster-api-autoscaler-node-group-min-size: "{{ .autoscalingConfig.MinCount }}"
    cluster.x-k8s.io/cluster-api-autoscaler-node-group-max-size: "{{ .autoscalingConfig.MaxCount }}"
{{- end }}
spec:
  clusterName: {{.clusterName}}
{{- if not .autoscalingConfig }}
  replicas: {{.workerReplicas}}
{{- end }}
  selector:
    matchLabels: {}
  template:
    metadata:
      labels:
        cluster.x-k8s.io/cluster-name: {{.clusterName}}
    spec:
      bootstrap:
        configRef:
          apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
          kind: KubeadmConfigTemplate
          name: {{.workloadkubeadmconfigTemplateName}}
      clusterName: {{.clusterName}}
      infrastructureRef:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        kind: VSphereMachineTemplate
        name: {{.workloadTemplateName}}
      version: {{.kubernetesVersion}}
{{- if .failureDomain }}
      failureDomain: {{.failureDomain}}
{{- end }}
{{- if .upgradeRolloutStrategy }}
  strategy:
{{- if (eq .upgradeRolloutStrategyType "InPlace") }}
    type: {{.upgradeRolloutStrategyType}}
{{- else}}
    rollingUpdate:
      maxSurge: {{.maxSurge}}
      maxUnavailable: {{.maxUnavailable}}
{{- end }}
{{- end }}
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: VSphereMachineTemplate
metadata:
  name: {{.workloadTemplateName}}
  namespace: {{.eksaSystemNamespace}}
spec:
  template:
    spec:
      cloneMode: {{.workerCloneMode}}
      datacenter: '{{.vsphereDatacenter}}'
      datastore: {{.workerVsphereDatastore}}
      diskGiB: {{.workloadDiskGiB}}
      folder: '{{.workerVsphereFolder}}'
      memoryMiB: {{.workloadVMsMemoryMiB}}
      network:
        devices:
{{- if .vsphereMultiNetworks }}
        {{range .vsphereMultiNetworks}}
        - dhcp4: true
          networkName: {{.}}
        {{- end }}
{{- else}}
        - dhcp4: true
          networkName: {{.vsphereNetwork}}
{{- end }}
      numCPUs: {{.workloadVMsNumCPUs}}
      resourcePool: '{{.workerVsphereResourcePool}}'
      server: {{.vsphereServer}}
{{- if (ne .workerVsphereStoragePolicyName "") }}
      storagePolicyName: "{{.workerVsphereStoragePolicyName}}"
{{- end }}
      template: {{.workerTemplate}}
      thumbprint: '{{.thumbprint}}'
{{- if .workerTagIDs }}
      tagIDs:
      {{- range .workerTagIDs }}
      - {{ . }}
      {{- end }}
{{- end }}
# #cloud-config
# write_files:
#   - path: /var/lib/netdog/net.toml
#     content: |
#       version = 2
#       [eth0]
#       dhcp4 = true
#       primary = true
#       [eth1]
#       dhcp4 = true
#     permissions: '0644'
# runcmd:
#   - systemctl restart netdog
#   - sleep 10  # Wait for network to be ready

      customVMXKeys:
        guestinfo.userdata: "W3NldHRpbmdzLmhvc3QtY29udGFpbmVycy5hZG1pbl0KZW5hYmxlZCA9IHRydWUKc3VwZXJwb3dlcmVkID0gdHJ1ZQp1c2VyLWRhdGEgPSBDbnNLQ1NKemMyZ2lPaUI3Q2drSkltRjFkR2h2Y21sNlpXUXRhMlY1Y3lJNklGc2ljM05vTFhKellTQkJRVUZCUWpOT2VtRkRNWGxqTWtWQlFVRkJSRUZSUVVKQlFVRkNRVkZEYTFOMmJUaHhTWEZaUTB0dGJDOUpZM2xSY1hoWlJYcDJhMEZWUTFWclUwZDJVbmxSY1VJcllYTjNWMFZ6VUZSQ01ESjFkazh4Vnk5bGVVWmhlbkZ2YVdkVFVqWnRVa3hJUmtSU1JUUmFTRlIxVVRBelMxRmlhbmRWUzB0YVduQXhXWEJ5YTNSdmVFdHRka0ZyYjBOS2RVeFlLM2hCU0dGVU5sRkZPRk5yTVhGcllURTFXVWREWVhJeU5IVjRURGN4UVU5bFNWWlRkSGxGU0VSWVRXWjNaSFJGVnpsUmVrMWFlVVl6Tkc1NVRWZ3dORlpJYlVOTlYzVlhXRGRZWTBSTVFXUnZRV3BNTXpocE9FNTRURU0yTVVkR05uaFVZVEpuTUcxTVpFZzNaMk13WjJ0SVlsTnJiek5OZVZsVlR5OUpSbWs1Y25ONFZrOXJabW9yYlM5UGVqVmtSalZDUjNoTFozQTRNVFl4YmxZNVEwazRWelUyV21oTlJWZG1OM3AyUm1wSmNGRkVkWE53TlhORWNIZFZVekpJZVhacVlXeHBURE01ZGs5c0t5dFRia1JDY0ZkVFlXeE9OMFo1TUhkR1NVUlVTVm9pWFFvSmZRcDkKW3NldHRpbmdzLmhvc3QtY29udGFpbmVycy5rdWJlYWRtLWJvb3RzdHJhcF0KZW5hYmxlZCA9IHRydWUKc3VwZXJwb3dlcmVkID0gdHJ1ZQpzb3VyY2UgPSBwdWJsaWMuZWNyLmF3cy9sMGc4cjhqNi9ib3R0bGVyb2NrZXQtYm9vdHN0cmFwOnYxLTMzLTEyLWVrcy1hLXYwLjI0LjAtZGV2LWJ1aWxkLjE2OQp1c2VyLWRhdGEgPSBJeU1nZEdWdGNHeGhkR1U2SUdwcGJtcGhDaU5qYkc5MVpDMWpiMjVtYVdjS0NuZHlhWFJsWDJacGJHVnpPZ290SUNBZ2NHRjBhRG9nTDNaaGNpOXNhV0l2Ym1WMFpHOW5MMjVsZEM1MGIyMXNDaUFnSUNCamIyNTBaVzUwT2lCOENpQWdJQ0FnSUhabGNuTnBiMjRnUFNBeUNpQWdJQ0FnSUZ0bGRHZ3dYUW9nSUNBZ0lDQmthR053TkNBOUlIUnlkV1VLSUNBZ0lDQWdjSEpwYldGeWVTQTlJSFJ5ZFdVS0lDQWdJQ0FnVzJWMGFERmRDaUFnSUNBZ0lHUm9ZM0EwSUQwZ2RISjFaUW9nSUNBZ2NHVnliV2x6YzJsdmJuTTZJQ2N3TmpRMEp3b3RJQ0FnY0dGMGFEb2dMM1poY2k5c2FXSXZhM1ZpWldGa2JTOXdhMmt2WTJFdVkzSjBDaUFnSUNCdmQyNWxjam9nY205dmREcHliMjkwQ2lBZ0lDQndaWEp0YVhOemFXOXVjem9nSnpBMk5EQW5DaUFnSUNCamIyNTBaVzUwT2lCOENpQWdJQ0FnSUMwdExTMHRRa1ZIU1U0Z1EwVlNWRWxHU1VOQlZFVXRMUzB0TFFvZ0lDQWdJQ0JOU1VsRE5tcERRMEZrUzJkQmQwbENRV2RKUWtGRVFVNUNaMnR4YUd0cFJ6bDNNRUpCVVhOR1FVUkJWazFTVFhkRlVWbEVWbEZSUkVWM2NISmtWMHBzQ2lBZ0lDQWdJR050Tld4a1IxWjZUVUkwV0VSVVNURk5WRUY0VGtSSmVVMTZUWGxPVm05WVJGUk5NVTFVUVhoTmFrbDVUWHBuZVU1V2IzZEdWRVZVVFVKRlIwRXhWVVVLSUNBZ0lDQWdRWGhOUzJFelZtbGFXRXAxV2xoU2JHTjZRME5CVTBsM1JGRlpTa3R2V2tsb2RtTk9RVkZGUWtKUlFVUm5aMFZRUVVSRFEwRlJiME5uWjBWQ1FVdDRTd29nSUNBZ0lDQmFUemwyVldaU2RFUklaVzFhWW5KSlNEUXdORXAyYkV0WE9WVkliRzB3ZURodFVIRXJhazFxVUd4RVIxVnFhV0k0VFdSNlIzaG1aaTlHVGpaMU1GYzJDaUFnSUNBZ0lFeEtXVXRJZEV3ME1FRjFNRFZEUzJST1dHZEZOVFZ6YW5KWVkwcFlRM1I1YUcxa1UzTm1OMXAzT0V0SldWbHBla3N6YkRGMk1XWXdOWEpFVjFWNE1UQUtJQ0FnSUNBZ1F6aDFXVEZqUTFkMGRVWnpPVGRoYml0MUt6Tldhemc1YWxsMmNFRm1kVXBrZUdsd1dXMXRNVEpCYUVoWk4xZzFiMHM0VG01YUsxRmthMlZOVW1JMmJ3b2dJQ0FnSUNCQ1NqbGxUMVpIU0VadGFFWkxkRk5KZEZWVlZuUlFRVWgxUW10MGMwTlFhVlo2YTFORVpqSkNXWFpWVGxJeFZuVTRjMXBHT1U5aVJrVkZWbXcyUVhkMkNpQWdJQ0FnSUhZMWJXeEJWVlozVUM5M1kxbHFWbkJxTDNsQlJucDZWbTVFVW5ZeWVHOWFTaTlCU25weWFrUmtkbEoxT1RadVNWTm1PSEJsVTJzeUszUXlSMkp5YTJzS0lDQWdJQ0FnZGxoS1RVWjRLMnhzZFVKQk5teFlSbWhqVlVOQmQwVkJRV0ZPUmsxRlRYZEVaMWxFVmxJd1VFRlJTQzlDUVZGRVFXZExhMDFDU1VkQk1WVmtSWGRGUWdvZ0lDQWdJQ0F2ZDFGSlRVRlpRa0ZtT0VOQlVVRjNTRkZaUkZaU01FOUNRbGxGUmsxc09ETTFVMEV5V0dsc05IRnZiM041UzBwMVptdFFNVlJZUlUxQk1FZERVM0ZIQ2lBZ0lDQWdJRk5KWWpORVVVVkNRM2RWUVVFMFNVSkJVVUZRZWxZcldtYzBZVFZ5YW05eVozZG9lV3hHWkdkTk9FeE1abFJaVlRGSlVTOURla2xPV2t0dWRXdEpiM2NLSUNBZ0lDQWdURVJaYm5kVGRUaDRLM1J4TUcxMUwwcEJRbGRET0Vobk9YbEhWWEJ3TDBoaU5sRkZOSFJRV0hkTVNTdHhhbXRXYTAxc2NWUnBkMVpWSzFkbWVrSjNUd29nSUNBZ0lDQlJiM00wT0dZck4xTkdhMWRuUkdkYVRqUk9ZMUZSTldkc1JYTm1jVll5WTFVemMzTmxlSGxMWjBac05UZE1NSHBPYmtKNGJEVjNiMnRHVFcxblVXVlpDaUFnSUNBZ0lGVkZhUzlVTW1kSGExaDJVbk5xVUhsSFlVNTFOa3RJYm14UVRtRnNObVJIWTNGaU5uSjNiMUZsTkRrd1VHOXlZVzVWWTNwSFRsQXdiblJtZUhwVVZ6Y0tJQ0FnSUNBZ09ISnJhMU52UTFwdGNUaHhjRlU0VlVOclJ6ZHVWVXh0UVRocU5tRXZTa3BHVUhkUVZWWnRSa2t2Vlc1V2QyNXRkWEZWUkhSVFJWWXJMMlUzY1doSGJ3b2dJQ0FnSUNBMlZHRjVjbk12Ym1aclMzWktkazltY2xSNlFWaEdSMU5SU0ZaVWNsaEpSRmxvVmxKak5HRXJDaUFnSUNBZ0lDMHRMUzB0UlU1RUlFTkZVbFJKUmtsRFFWUkZMUzB0TFMwS0lDQWdJQ0FnQ2kwZ0lDQndZWFJvT2lBdmRtRnlMMnhwWWk5cmRXSmxZV1J0TDNCcmFTOWpZUzVyWlhrS0lDQWdJRzkzYm1WeU9pQnliMjkwT25KdmIzUUtJQ0FnSUhCbGNtMXBjM05wYjI1ek9pQW5NRFl3TUNjS0lDQWdJR052Ym5SbGJuUTZJSHdLSUNBZ0lDQWdMUzB0TFMxQ1JVZEpUaUJTVTBFZ1VGSkpWa0ZVUlNCTFJWa3RMUzB0TFFvZ0lDQWdJQ0JOU1VsRmNFRkpRa0ZCUzBOQlVVVkJja1Z3YXpjeU9WSTVSekJOWkRaYWJIVnpaMlpxVkdkdEsxVndZakZSWlZkaVZFaDVXU3R5TmsxNVRTdFZUVnBUQ2lBZ0lDQWdJRTlLZG5kNE0wMWlSamt2T0ZVemNUZFNZbTl6YkdkdlpUQjJhbEZETjFSclNYQXdNV1ZCVkc1dGVVOTBaSGRzWTBzelMwZGFNVXQ0TDNSdVJIZHZhR2dLSUNBZ0lDQWdhVXhOY21WWVZ5OVdMMVJ0YzA1YVZFaFlVVXg1TldwV2QwcGhNalJYZWpOMGNXWTJOemRrVjFSNk1rNXBLMnRDS3pSc00wZExiR2xoWWxoWlEwVmthZ29nSUNBZ0lDQjBabTFuY25jeVpHNDFRakpTTkhoR2RuRm5SVzR4TkRWVldXTlhZVVZWY1RGSmFURlNVbGN3T0VGbE5FZFRNbmRKSzBwWVQxSkpUaTlaUm1rNVVURklDaUFnSUNBZ0lGWlhOM2w0YTFnd05YTlZVVkpYV0c5RVF5c3ZiV0ZWUWxKWVFTOHZRbmhwVGxkdFVDOUpRVmhRVGxkalRrY3ZZa2RvYTI0NFFXNVBkVTFPTWpsSE56TUtJQ0FnSUNBZ2NXTm9TaTk1YkRWTFZHSTJNMWxhZFhWVFV6bGphM2RZU0RaWFZ6UkZSSEZXWTFkR2VGRkpSRUZSUVVKQmIwbENRVWRVV1RoMldETjVhR1o0YTB3cmF3b2dJQ0FnSUNCb1dqRnpUVXBQTDNvMGFGTkVlV3BHTVZSWk4yRjVPSHBTY0hGVFVWcExWVlV5U2xKWVVVaFRSRmxVVUVabGNHcFNObFZNTUdKa1RsZDZaVkZpYlRZM0NpQWdJQ0FnSUhodFNFRmtZVU16T1dveWIwSTBlRXQ2Vlcxa1RYSkVaVUprVVhZNFZtTXpOM2xrVDBGT0swdHVZVXhHWkdoalEycFJiMHhsUkVGSVYwODNka05WVFhjS0lDQWdJQ0FnVUd4elRGQnRXRGhuWVdaSFZuTnJWR0phWVc1dmVTdHlWR3BEYWxOM1RsTXZUVmh1Wmpob2FFOHdTbEpCT0RsWE5XbFNaMlphY1ZFMk5TOVFNRU12VndvZ0lDQWdJQ0JuSzI5T2VGRXZkVWhsZEdKNWRGWmFOM1ZrYTNVeWFuWjZkRkpCYXpKalJXSnBieko0ZW5KT1ZrMDVTekJ5UW04MFdsbzNSMkpYVkdWSlVuUmpiMHRzQ2lBZ0lDQWdJR05UUlV4V1lrMVhiV1JQTkV4YWQxQkJWMDlyY21Zd01EWnlWM2d5YVhack1uWjRNaTl6U1ZOVU5tMXZVRWxHWWt0b01VODBNMVpHYTNKRGJESTBlRkVLSUNBZ0lDQWdkekpHTTJKeFJVTm5XVVZCZUhSNVIwNHhTRFJ3TjFWd1RESlRXamROVVVKalNsUkJkRkZLVG1SVFlsUXpSbVo0VVVKMGJYTkNVSE5KYjAxUE5rbHpXZ29nSUNBZ0lDQnpNa05RVVhwb2NGWjZiVmRCVG01SVdXZFFSRVJqUjBOSVdUTjNaSFoyVERoclVsbzBLM2xWZEhscVUybzRhMWh3T0ZWakswbFliM2hVTlRsWFp5dHRDaUFnSUNBZ0lHY3pWMlpFTDJoRldrMHJhV280UkV4b1lYZDFRbGMyWWxaa2RHUkNWbU5KZEZkbGFUWllZelJDUkcxVFozbHVWRzU0VWxwdVR6QkRaMWxGUVROamRITUtJQ0FnSUNBZ1dreENSVWd6VFVwQ1owOW5RVWhRU1VaalRFTTBXSE15TWpKWllYSkJRak5xWjAxTVNFRjZlbVZ0UkVwM2RqWmxNelZYYVZKbVJYZ3JXa3RuWWpaTWJRb2dJQ0FnSUNCQ09VVkRRVmh2WW1FeE0xUklSbWxDYW1scVl6SkJkeXMyYnpSMlZraGpja0ZxWTBwMGEzaHJiRk5xWTJWcFZrdEpWa3QyZW1SQk1HUmtkbFY2YjFwdENpQWdJQ0FnSUM4ek5FSnhTRkJOYUVSQ04yUktTVWxJVm0xcldGWjJNbTFRVVZOWWEyMUdWM0JCWVZOVWEwTm5XVUZ3YXpWWGEwZ3diRVJzZDJKRVZqazRkWFF4VVhRS0lDQWdJQ0FnZFRSM1IzcEVTbmh0WlhGV2JWQldhR3c1YTBOWE1HWXhaSG93TkhSVmVITlRibGh3WTJaUWExQnhMekJCV2xKRlJUbEdSMGxRTUZwUVRVaFlkbkJHU0FvZ0lDQWdJQ0JXTmpoTWFtb3dVbWhyUm5aMWJsWjBjVVJMUldFd2NtUlpiRVpIT0ZKeE5WSllRVFpKU1dZNFNUaFZla1pRV0RSUWNWWnZhMVpXT0hZNU5WVTNXSFIxQ2lBZ0lDQWdJRzltY0ZodldYUmxjSE5NVWtaWUsyWk9Ubll2YVZGTFFtZFJRMlo2YUZwSVdtZHNkbUl6T0hNMmFXVTJjVGRIWVc1RU1qSkpVVlZvYURaMmIwTnNORm9LSUNBZ0lDQWdORWM1T0hkdloySjNUMnRsY1dvM2JXTm1XRGt4ZHpsbE9YaHlTakZQUmxFclNFMTBhRlZIUlZad1NIQmtiM1pEVm1kaWNGVTRiSGhVZDJ0cVNITnVTd29nSUNBZ0lDQlRjMWRuY0N0S1FUVnlVVlV2YUVWMlpWWm9ZVkJ2TTA0M1duRnFVVFIxY1hkeGRVaExRV2hRY0cwNFRsTnljVEpEZDFNeWFqZENXaTlIU0ZCMFkwWjZDaUFnSUNBZ0lIZDVhSFJaVVV0Q1oxRkRUblIwTkV0VFoxVk9ka2s1YVVRd05XZHphRVl5TmtaMlUzY3JPVGxqU2pkSFVWYzNNRE5DZFd4ek9GWktNRVIzY2tsdlQxQUtJQ0FnSUNBZ1YyNHlXVU5vTjJwWWNuQkVXVkpxYVRoMlQxZGFNMEZhUmpCcU0wWlpiVTg0TWxKdVdEWjNZVVI1VWtaeWVGbzNja2RQTDJoNVNXSkpMMUZyZDNCd1dRb2dJQ0FnSUNCbVJtUXZiak5HVDBjMGF5dG5OVWN3UlM4dk1tMWphRGs0TTJkeE9YSlBNa2cyZW1VeGRUTjVWa3BNT1cxVVJXbHVaRkZEWTNjOVBRb2dJQ0FnSUNBdExTMHRMVVZPUkNCU1UwRWdVRkpKVmtGVVJTQkxSVmt0TFMwdExRb2dJQ0FnSUNBS0xTQWdJSEJoZEdnNklDOTJZWEl2YkdsaUwydDFZbVZoWkcwdmNHdHBMMlYwWTJRdlkyRXVZM0owQ2lBZ0lDQnZkMjVsY2pvZ2NtOXZkRHB5YjI5MENpQWdJQ0J3WlhKdGFYTnphVzl1Y3pvZ0p6QTJOREFuQ2lBZ0lDQmpiMjUwWlc1ME9pQjhDaUFnSUNBZ0lDMHRMUzB0UWtWSFNVNGdRMFZTVkVsR1NVTkJWRVV0TFMwdExRb2dJQ0FnSUNCTlNVbERObXBEUTBGa1MyZEJkMGxDUVdkSlFrRkVRVTVDWjJ0eGFHdHBSemwzTUVKQlVYTkdRVVJCVmsxU1RYZEZVVmxFVmxGUlJFVjNjSEprVjBwc0NpQWdJQ0FnSUdOdE5XeGtSMVo2VFVJMFdFUlVTVEZOVkVGNFRrUkplVTE2VFhsT2JHOVlSRlJOTVUxVVFYaE5ha2w1VFhwbmVVNXNiM2RHVkVWVVRVSkZSMEV4VlVVS0lDQWdJQ0FnUVhoTlMyRXpWbWxhV0VwMVdsaFNiR042UTBOQlUwbDNSRkZaU2t0dldrbG9kbU5PUVZGRlFrSlJRVVJuWjBWUVFVUkRRMEZSYjBOblowVkNRVXhST1FvZ0lDQWdJQ0JVYlhsT1NVeHhUVkp0VGtadVZGaEtkalZ1WWxCNWJEQlpVMWQxY1VsYWQzZG9USEY1VlU5WlFUUk9RbXBUVW5rM2MxWnRhR1J2VFRKemRqTktiMm93Q2lBZ0lDQWdJR2t6UzBWYVpuaFFRMGR2VUVOck5uSjJhak5rWWs5SVRVVjNOVWwwU2pkaGRqUlFhazR5YjJad1N6VlJVekp5UXpKbWFFc3ZaWFJaVG5sM1NFdG1hWElLSUNBZ0lDQWdPRzB5VkhGVlFUaGFMMDFyVGk5M1dqZGxSMFF2TmtKd2RVUlhWV0ozZG1keUx6aEhObmhZZVRSR2MzbGpkVUkwYjFFd05taDBiVTFSYldKdU0zVkNXQW9nSUNBZ0lDQlVaRWxuYnpob01VWjJiM3B1WkRnelIzY3lOMFZXTTBkT05WZzRRWGh4VG5kWmVrVmxkMVF5TTNsUlZuWXlOblZ1Vmt4WFluQXJaMG8xU2pONFIydE9DaUFnSUNBZ0lGSndaMVp4Tm0xWlRHcEpRMk5uTkZGdFFsZDVZMFpyV0hVMFduTTNZWGRzU3pWTk9UZzJhelZ3ZFhZNFVXeHpVMnBJVWxvd1ptRklNbFYxTUU4NVpURUtJQ0FnSUNBZ1ZtbEtWbUpIVDNBeFVYWkthV2RGV2xkUk1FTkJkMFZCUVdGT1JrMUZUWGRFWjFsRVZsSXdVRUZSU0M5Q1FWRkVRV2RMYTAxQ1NVZEJNVlZrUlhkRlFnb2dJQ0FnSUNBdmQxRkpUVUZaUWtGbU9FTkJVVUYzU0ZGWlJGWlNNRTlDUWxsRlJrUkdNM0UwVlhwVGVWZDJkbFJJYVZVclkwaHpWMVpvZFUxdmVFMUJNRWREVTNGSENpQWdJQ0FnSUZOSllqTkVVVVZDUTNkVlFVRTBTVUpCVVVOeVYwODFaMWxzWVZOd1JYZzNVR1JrUmxCdWFqTjNaR3RGYWxwTlNuZHdOV2Q0ZUdKRGFEUm1SVkp2YzBNS0lDQWdJQ0FnWkVKemJqa3dkbFZtYzFKNGVFeHRURGhCYlN0VWVVWnpZalp0YWs4ellrOUxZMDVtU2tGcFJ6SlVkbmxtVlZGeVlWaEdTbEJFVEdObVMwTmtSamRNTlFvZ0lDQWdJQ0JtWjBScVpsQXJVRk4xUWxOVGVXUnRjSEF6UWsxSFNGcHdZWGRDWW1neVR6WlpLekZGVHpkVVp6VjFWVVJwV1RsR1puSnFXVTVUVVVscVNHRjNkbEJEQ2lBZ0lDQWdJSEpRYUdvdlVsSmtUVEJtVkdwSFN6VjJkR2RRZDI5YVZrUklhbkpTZDFocGRrYzJaWFUyZFhwa2JEZEZZa2hpTTJKSGFHVlhkVGhuVjFGaWJtdDFWVFlLSUNBZ0lDQWdOek54VjBOcVNHZERlVVJ1TWtrMGIzTkJObVprSzI5WFFWcDNhak42VVRSTlJGTk1jemRIZWtJdlpFZHViM0oxTTFSbVlrVldLMGxsUmxwelRsVTNiQW9nSUNBZ0lDQnVRbEp0YW01dlpHVklSelpxT0RaeE1XZG1WbE5WUW00emFsVTVNRTlTTnpsT1dEWklWMUowQ2lBZ0lDQWdJQzB0TFMwdFJVNUVJRU5GVWxSSlJrbERRVlJGTFMwdExTMEtJQ0FnSUNBZ0NpMGdJQ0J3WVhSb09pQXZkbUZ5TDJ4cFlpOXJkV0psWVdSdEwzQnJhUzlsZEdOa0wyTmhMbXRsZVFvZ0lDQWdiM2R1WlhJNklISnZiM1E2Y205dmRBb2dJQ0FnY0dWeWJXbHpjMmx2Ym5NNklDY3dOakF3SndvZ0lDQWdZMjl1ZEdWdWREb2dmQW9nSUNBZ0lDQXRMUzB0TFVKRlIwbE9JRkpUUVNCUVVrbFdRVlJGSUV0RldTMHRMUzB0Q2lBZ0lDQWdJRTFKU1VWd1VVbENRVUZMUTBGUlJVRjBSREZQWWtrd1ozVnZlRWRaTUZka1RtTnRMMjFrY3k5TFdGSm9TbUUyYjJodVJFTkZkWEpLVVRWblJHY3dSMDRLSUNBZ0lDQWdTa2hNZFhoWFlVWXlaM3BoZVM5amJXbFFVMHhqYjFKc0wwVTRTV0ZuT0V0VWNYVXJVR1F4Y3pSamQxUkVhMmt3Ym5SeEwyY3JUVE5oYUN0cmNteENUQW9nSUNBZ0lDQmhjMHhhSzBWeU9UWXhaek5NUVdOd0swdDJlV0phVDNCUlJIaHVPSGxSTXk5Q2JuUTBXVkF2YjBkdE5FNWFVblpESzBOMkwzZGlja1ptVEdkWGVrcDVDaUFnSUNBZ0lEUklhV2hFVkhGSE1sbDRRMXAxWm1VMFJtUk9NR2xEYW5sSVZWY3JhazlrTTNwallrUmljMUpZWTFremJHWjNSRWR2TTBKcVRWSTNRbEJpWmtwQ1Z5OEtJQ0FnSUNBZ1luRTJaRlYwV25WdU5rRnVhMjVtUldGUk1VZHRRbGR5Y1ZwbmRVMW5TbmxFYUVOWlJtSktkMWRTWlRkb2JYcDBja05WY210Nk0zcHhWRzF0Tmk5NFF3b2dJQ0FnSUNCWGVFdE5aRVp1VWpsdlpscFROMUUzTVRkV1YwbHNWbk5aTm01V1F6aHRTMEZTYkZwRVVVbEVRVkZCUWtGdlNVSkJVVU4yTUdWWlFYRnBTekZHTUZaTENpQWdJQ0FnSUdKWmQxQXZhaTk2YmtKWlprbEVTSE5EYkdKSE0zQlFVekZGYlVWelNFMXplRkJOYTBSVFIzbFhia3BVTlVwd1EzZFdUa3cwYUVaMGIyOHpRamxITm0wS0lDQWdJQ0FnTVhkcll5dFNabHBVV0dnM1VYaEhUSEUwZWxkTlZtdEdSazAzYm5KUWNDdFBSVVkxV1ZvMGVsRlRVVEZSV21GQlZXNVRNRFpVWWxKblYzUnVRMEZZTWdvZ0lDQWdJQ0F2ZFhaR09YQXhRV3RtZWpSNFIyY3pha0phVUVwa01VcEVOM2xtWVU5ME1ERTFPVVphUTFaS2NWWTBOVUZOUlVaUFlYWmhlbVlyZHpFclFXTkNaRVJyQ2lBZ0lDQWdJRWR3TmsxUk56Vk5jVzlPVGtzeFEwMXdSakpXVjFGT1pUVlRRa3R5ZEdGUVVIbE5Zalo0UjAxNFZUTm5UVkYyYWtwVVZ6RnFURXhNYm01dk5qTm5jbWdLSUNBZ0lDQWdPRGR0Y1VFdlVqVlVjbUZ3ZGpWYWN5dGpSMkZyWmxCRU9VRkJWVk56VUVoeVVrbFpUWGd2YkZGa1VURkNTU3RDY0RNelRqSTJNbWxwVTBGdGFGVlFlUW9nSUNBZ0lDQXZjSFUyUTBKUFFrRnZSMEpCVFhCMlVYbG5RVlpLUlhGMFlYQTBWR3N2VVRsemJGUkhUVmxXVHpKRVN6SjNUVEF3YzIxeWNUUkNTVUV5TDBOVVZFdDRDaUFnSUNBZ0lGRnJObGQxVmtkYWMyRnhSREkzZGxsR09WbHhjV1JtZEZKd1JIcHRlbkpNUmpZM09WWlFiMDVZTDFwalltRk5jRUZGV0U1cVJGWnlSR3ROUlRSRVZHOEtJQ0FnSUNBZ1JWbzRNRlF3VW1ReFUyZDNWMVpLY1VsWmVHTnlPWFpHVlhJNVRtVXZZMU5VVkdkTlZGWjJjMmhSU1ZWbVZtcFhVVVk1TnpCNGREbEJiMGRDUVU5UWRRb2dJQ0FnSUNCclRHUjVVRk0zVFhCM1lsWk5iV2R3YTI5MGFDdFVhSFZwUWxZclVqSlpkV1JKVFVoaWNFbFJjbmcwTjI1NFdEY3ZUR2t5WXpKcFIydzRWbkIwTUZkTkNpQWdJQ0FnSUhseWRtRkVLMGRuTVU1WGVXWnhRWFZ4VHl0YWMyeExNVVZwSzJKR2VEa3dSek5GY0VWaGNEa3JUVWcwVUd0cVdWRnNPVFJMYlhOVGRqVlljVzEyVlRjS0lDQWdJQ0FnZERreVpuVTJlbFZsUkRCcGNXaFJaMUJwTkhBeWQxSndiVzh5TlhSWGFUVkNOR0ZDZEVGcVVrRnZSMEZoTlVWRWJHeFlWMjFsZVdZMk5URlNkalJtUXdvZ0lDQWdJQ0JIZFdoVk1tRjVaV2xMYUVORFJXOW9WalZuYnpSV2JHbDFhR1k0TDFaeVJHRlJPR1ZIWjFsYVMyZHZNakJJU0dFclMzQnBOV0ZJYmxKVk5uTjRWMm94Q2lBZ0lDQWdJR2hNTmtsVlVHRmhZakJhWkRJM01FWnpRa2QzTVhoSGVqSnNhbFUyYTJkSFZsSndkWEJHTVZoNmNYTnBVek5EY0hOMlVIUlliRXBVZW1WT1YxazRjMDRLSUNBZ0lDQWdlbE5LT0ZkTlVYUlRVbGR4U2xoS2VtTnJiRkoxSzBWRFoxbEZRWEpzU0d0TFFXbGpkR3hCWVZwbFZtcDFZbTlvY3paMmIyVk1jRUZLV1VGQmFIbDBPQW9nSUNBZ0lDQlFSVWhSTVV4RmFETlNUbTlLWkRSclpDOW9RalV5TUZsWloycHdLell3YWpFcmREaFFaV3hPU0Zkd016UllXVTlEWTBWWlYzQjZWa2hqWlZaT1dqaE5DaUFnSUNBZ0lEVmplWFJGUTBaeWQwb3hhM1JVTVM4NVdtWnVhVk5CTjIxcFNteENTM28xWml0M1RVVnlRV3RxVlRCWWJXNUVWMWhYVUhoa2VuZ3dNRmhPTkZKSVJrOEtJQ0FnSUNBZ1UyaGhhMXBEUlVObldVVkJkblU1WVcxYVprMXBjazQ0YVZKVE5VczRjWFkyWkRkclIyczFaM0ZIVkc5alpWVjZlRkU0UVhSRFpWZFBXbGREY2sxcVJ3b2dJQ0FnSUNCeFEzbEVTVGdyVm1KT01TOUlabEpXTm04eGREaEpZbGh5VEUwNFZIaFdSVXRzUVc1VFRtRTVaM0ZwYVdkSmVHSnRhM2gzUzNaUVluWkpiVXN2TTJaaUNpQWdJQ0FnSUZod1pXbFNWRUZPTVRoTWRTOXdOQ3R5ZVhGTGNXWm5RWGcyVWtFNFZIbG5UU3RhV1VOTFZrMXpPVTQyTmxkV05XNTBVRFUzUVhjOUNpQWdJQ0FnSUMwdExTMHRSVTVFSUZKVFFTQlFVa2xXUVZSRklFdEZXUzB0TFMwdENpQWdJQ0FnSUFvdElDQWdjR0YwYURvZ0wzWmhjaTlzYVdJdmEzVmlaV0ZrYlM5d2Eya3Zabkp2Ym5RdGNISnZlSGt0WTJFdVkzSjBDaUFnSUNCdmQyNWxjam9nY205dmREcHliMjkwQ2lBZ0lDQndaWEp0YVhOemFXOXVjem9nSnpBMk5EQW5DaUFnSUNCamIyNTBaVzUwT2lCOENpQWdJQ0FnSUMwdExTMHRRa1ZIU1U0Z1EwVlNWRWxHU1VOQlZFVXRMUzB0TFFvZ0lDQWdJQ0JOU1VsRE5tcERRMEZrUzJkQmQwbENRV2RKUWtGRVFVNUNaMnR4YUd0cFJ6bDNNRUpCVVhOR1FVUkJWazFTVFhkRlVWbEVWbEZSUkVWM2NISmtWMHBzQ2lBZ0lDQWdJR050Tld4a1IxWjZUVUkwV0VSVVNURk5WRUY0VGtSSmVVMTZUWGxPVm05WVJGUk5NVTFVUVhoTmFrbDVUWHBuZVU1V2IzZEdWRVZVVFVKRlIwRXhWVVVLSUNBZ0lDQWdRWGhOUzJFelZtbGFXRXAxV2xoU2JHTjZRME5CVTBsM1JGRlpTa3R2V2tsb2RtTk9RVkZGUWtKUlFVUm5aMFZRUVVSRFEwRlJiME5uWjBWQ1FVNDBOUW9nSUNBZ0lDQjJjbmRzWVhocWNraFFUM3BKVkV4Tk4xWjNURXRGYnpSWVMyRkVWams0YkhGM2JFUnViV1ZUUVZwaE5IQklhVFpyYW1oWk1FMDRibWhVYW5SSFUxVnhDaUFnSUNBZ0lGSnBWMHBwVFRkamRHdGxSM2x0Tmxoc2VVOVJla1ZqYjFodGRrSlVWSEo0V205TU1XbHVTelZDT0dOM2RtVmFRV1k0UzFKRmEyNXFjM1pCU0VNM1pXd0tJQ0FnSUNBZ2FuSldObmcwTW1kMFFVdDZWek0wTm1wSGVrZGtka0ZuZFhCc1RHbE9iQzh2ZG05c05GSmlkbU5RTDAxblNGTkVkamh3YVdVcmVtdExWU3RxTjBoQ1Fnb2dJQ0FnSUNCb1QxRXJXVkpXYlZCTWFqbERZbkpWVFZOclFXeFlVRUpvU1doeVduaFBUMlpDYzFGTU4zQlhZVGw1ZVd4c1ZXNXdPR3hIZVZOSFdUaHZTVVJoWlZab0NpQWdJQ0FnSUdKNGF5dEhSVWxoVERaeFpWVkpkbWhpYW5WSFZXNDRLMEZyVVVaNVlWSktjR2QyWjFoMFdtaDBPVUp0U1ZCUGQzQmhhRWRNYmtZdllVWTVSUzl1U1dvS0lDQWdJQ0FnYjJkS2JWTjNVWFZ0YmpSeVZIVTFTMHhWVlVOQmQwVkJRV0ZPUmsxRlRYZEVaMWxFVmxJd1VFRlJTQzlDUVZGRVFXZExhMDFDU1VkQk1WVmtSWGRGUWdvZ0lDQWdJQ0F2ZDFGSlRVRlpRa0ZtT0VOQlVVRjNTRkZaUkZaU01FOUNRbGxGUms1RmJqZE5RbTVaTWs5cVMwMUVkRFpsY2tkVVMxQlRObmxuY2sxQk1FZERVM0ZIQ2lBZ0lDQWdJRk5KWWpORVVVVkNRM2RWUVVFMFNVSkJVVVJOVG5aT1EyTkJVemhHTVRGdWNFWXhNalpZZGxOTVNXMVljRXgwS3pWcFIweEtabTVwTVVGdVFVTk9Ua3dLSUNBZ0lDQWdaVTkwYUdWV09VNWhXamRXU0hwbFpuUkViMjVpVm5weVJsWm5UVEE1UWtOVk5UWjVMM2t2WTBzMVdWVnhNVWd3TW1wV00wazNPR3dyVFdaMU5GZFRSUW9nSUNBZ0lDQldXbWxpUzJGamNreGxjWFoxTVVKb2NsRXhaR1V6YVVoMU56a3JlbkoyZDBaeVkzZEJUSGRFYjJjMlpXOHJTVVV2UXpVcmJUTnhkazFLTVZsbFRtcEVDaUFnSUNBZ0lGZzVMMlY1YWpReU1WaHdRek41T1ZKVVV6WnZZM2hsZEhGSVNGaEZhMjQxWlVkNVlUVm9TRFZTYjFCMWJFRlVTVGQ1T0ROSEx6UmFNRmRaVkRodk1UWUtJQ0FnSUNBZ2EzWjBObFYwZEdKR2NVMHZkeXRxVm1GeU5YUkNaMXB0YTNwa1NIUTJjVVF3TjBkeEwwZHJkRTVaVGtaU05rUjVkR0pVUWpJNVF6Sm9UMkp5WlN0S1VRb2dJQ0FnSUNCdFdUSnpOMEZUVW1SRFMyOVJNRTFYZFUxbk0yWkxjbE5EVkZGbllVNTVRbTlLTjB4MFEyMUtDaUFnSUNBZ0lDMHRMUzB0UlU1RUlFTkZVbFJKUmtsRFFWUkZMUzB0TFMwS0lDQWdJQ0FnQ2kwZ0lDQndZWFJvT2lBdmRtRnlMMnhwWWk5cmRXSmxZV1J0TDNCcmFTOW1jbTl1ZEMxd2NtOTRlUzFqWVM1clpYa0tJQ0FnSUc5M2JtVnlPaUJ5YjI5ME9uSnZiM1FLSUNBZ0lIQmxjbTFwYzNOcGIyNXpPaUFuTURZd01DY0tJQ0FnSUdOdmJuUmxiblE2SUh3S0lDQWdJQ0FnTFMwdExTMUNSVWRKVGlCU1UwRWdVRkpKVmtGVVJTQkxSVmt0TFMwdExRb2dJQ0FnSUNCTlNVbEZiM2RKUWtGQlMwTkJVVVZCTTJwdEszWkRWbkpIVDNOak9EZE5hRTF6ZW5SWVFYTnZVMnBvWTNCdlRsZ3plVmR5UTFWUFpWbzFTVUpzY21sckNpQWdJQ0FnSUdWTWNWTlBSbXBSZW5sbFJrOVBNRnBLVTNCSFNsbHRTWHAwZVRKU05HSkxZbkJsV0VrMVJFMVNlV2hsWVRoR1RrOTJSbTFuZGxkTFkzSnJTSGg2UXprS0lDQWdJQ0FnTld0Q0wzZHdSVk5UWlU5NU9FRmpUSFEyVjA5MFdISklhbUZETUVGeVRtSm1hbkZOWWsxYU1qaERRelp0VlhWSk1sZ3ZLeXRwV0doR2RUbDNMemg1UVFvZ0lDQWdJQ0JrU1U4dmVXMUtOemRQVVhCVU5sQnpZMFZIUlRWRU5XaEdWMWs0ZFZBd1NuVjBVWGhMVVVOV1l6aEhSV2xIZEc1Rk5EVTRSM2hCZG5Wc1duSXpURXRYQ2lBZ0lDQWdJRlpUWlc1NVZXSktTVnBxZVdkblRuQTFWMFoyUjFRMFdWRm9iM1p4Y0RWUmFTdEdkVTgwV2xObWVqUkRVa0ZZU25CRmJXMURLMEpsTVcxSE16QkhXV2NLSUNBZ0lDQWdPRGREYkhGRldYVmpXRGx2V0RCVUsyTnBUMmxCYlZwTVFrTTJZV1pwZEU4M2EyOTBVbEZKUkVGUlFVSkJiMGxDUVZGRVQyRm5Relp5YkRjclRrWlZaUW9nSUNBZ0lDQkpRVXd3VG5Sck5uQTNjSGw0YTNRME9UUk5SbUZQTW01dE1FWnNibTQ0VUZOek5uRjJWa2haVDA1amNuTTVMMUU0Y0hCeGNGRjFia1JyYzJaTGJTczVDaUFnSUNBZ0lHNUlkMjV2V0V4dWRrUlhhVEoxU25CWlNrZHNPRVpvZUhsRVZXcFFjVGN3TTBaa2JuRm1Na0k0YkVvd1p6WllVSGRvZFcxS05HVmFSbXRUU2xSMk5Hd0tJQ0FnSUNBZ2FrRmxkVUpwUVhSWlYwNVZlRWhJVDNSb1UxWlJiMnBMVUdGclNVeFJSV2czYkRCdlNGSnhiWFkxU21jelUyaHZhM0UyWWpaclMwczJTM0pMVDBKcE5Rb2dJQ0FnSUNBcldpdHFUVW96WmtkMFMyUllNRTlETm1kM2NHeE9NVkpHWlN0MkwwUnhkREJTY20xV2JYQnFhRlF6WWpnMk16aHpUVWhhVVZkb1p6ZDNUQzlCVFRaakNpQWdJQ0FnSUdNMWFGcGpjRVZLSzBrMWJEZGxlVzVRV0daa1JHaE5ORmhTYldjd1UwMXRTV1JDZEZac2RGRllhQ3Q2VDB0NFEzQTFjazFzYWxGUVdtdHlZak5KYUZNS0lDQWdJQ0FnT0U1aE5WZ3llVFZCYjBkQ1FVOXBVa1JyY1RFemVFbHNNVUpVVjIxTGFHTnVWRk5VWW1sMlFrZFpUUzloTVV0eFRHWmxTbGxRWlV4a1pHcDVkMFZETlFvZ0lDQWdJQ0JRVlVWbFRtRXZUbXc0VkRkbE0zbFRTVmRMY1dGb05VRlVVWGRTV1RjMmVtUldaMjk0WkRSS2FrdDVOSEZsTTJoRVpYTk5jMkpRTUdWVVprOVhOVEJoQ2lBZ0lDQWdJRzVUYkdkeFVrWkVRVXgwVVVGa1NrcFdWMmx2Tm5sTlNEUmlTME5VWVVOVFVsVnNUMkZKTldVNU1qbFFiVTloWWxWRmRFeGpXazVZUVc5SFFrRlFVMlFLSUNBZ0lDQWdPR3hZY0M4dmRXVjJiRXRvVldKelZETmhjMmRUVUhKa1N6RndRVEpyWVN0d2RqZERkMUpwY0hWbE5EaGxOR1ExVHpKUlMxTlNWVE5YUkhacWIzUlVkd29nSUNBZ0lDQnZPRVJLVGxFeFNWSXZXWHBxVmtJMFNpdHljblZGVVZKT09IcExaelJzUkM5aVRUTm1NR2xVTnpablRYRTFVbFpTTW5sRmVGQkRha3RJZDJoQ1YwNVJDaUFnSUNBZ0lHWmxlSFpNWW5ZcldVcHJXVGMwTlU5eFVuRk5VMEZ2VGxBek4zVTVORU0zTWxsVE4yMHhOMFJCYjBkQlFsUXJXWGxtYWxkM2RYTldiMU0zUTI1VVNWSUtJQ0FnSUNBZ00ybHFhRzFLTUhZdlZGWkhURGhTYkdGNWRYWm5OR0ZxVEhwVmVsQTBTM1Z5YWxOSVZUWk9Xa3BJYm10aVNXaEVkSEF4VURkalZGaDFSV3RCVEd0TFVRb2dJQ0FnSUNCcFJpOU1UREZ4V2pCVFFVNTJZU3RTYURsa2RXWjZaM0ZOUTJNMVJFRXJXWE50Um1KRU1tVnhjMWs1TlhGM2R6WnZSRlZJYzFjcmVFZFVNREZyVlZWaUNpQWdJQ0FnSUhsVE5qWjZNVTh6VlRoNlFrUTFjemR6WVdSUVRtUnpRMmRaUVRWUVQyZHBhMFpIVlhGQk1YbDFhM0Z6YTNKYWQzWXliekJSVTBwUGVWSlJTMHczZUZZS0lDQWdJQ0FnY1cwMlUyWmplVU0wVjFseFUyZFVTMjlPYkNzdlIyUkxRa1JpY1hseVFWZG5WRFZJYzBZd1pWUXJka2RKTkdRM2IyUkxTa2wwY0VOemFsSmlTSGw1ZWdvZ0lDQWdJQ0JFWXpWaWVHcHVlWGRhZHpSYWEyZEVURmxKUkhGTWJteGhZbWxuUWpSeFptc3hhRXBRTDIxTlpWWm5PRzVWTVZkYUwweElXREZuTTA1SFZqTnRkakJJQ2lBZ0lDQWdJRFJRYnpORWQwdENaMEY2SzNVNFkxWlBjalVyWVUxbmNtbE9WM0V3V0VVMGJUTlZVVTl6ZDFvelNrOTVabXB4ZFRRclZTOTJOWEJhWW5SclVIUTVNemdLSUNBZ0lDQWdNRmhqY0ZONk16RkJRMUpaYTNabVdrSjBUVFpJV2tWVmQzb3ZRVkJrWVU0MU1sQnFUaTl1VkVwWU5YTnJhRXhQVkM5dk1UZDJVRFYwYldWU2J6VnRNUW9nSUNBZ0lDQkdNbTl6VVhKWU0zWkhkRkJFZW5wVVdGVjNZVVF6ZEZoMmNuTkJlV05WWjNsS1YweG9kSEJ0TkRSTWNqUlJUU3QyUzNwMkNpQWdJQ0FnSUMwdExTMHRSVTVFSUZKVFFTQlFVa2xXUVZSRklFdEZXUzB0TFMwdENpQWdJQ0FnSUFvdElDQWdjR0YwYURvZ0wzWmhjaTlzYVdJdmEzVmlaV0ZrYlM5d2Eya3ZjMkV1Y0hWaUNpQWdJQ0J2ZDI1bGNqb2djbTl2ZERweWIyOTBDaUFnSUNCd1pYSnRhWE56YVc5dWN6b2dKekEyTkRBbkNpQWdJQ0JqYjI1MFpXNTBPaUI4Q2lBZ0lDQWdJQzB0TFMwdFFrVkhTVTRnVUZWQ1RFbERJRXRGV1MwdExTMHRDaUFnSUNBZ0lFMUpTVUpKYWtGT1FtZHJjV2hyYVVjNWR6QkNRVkZGUmtGQlQwTkJVVGhCVFVsSlFrTm5TME5CVVVWQmN6aG9lWEF3TWs1eFEyOXhkVkI2T1ZJd05EWUtJQ0FnSUNBZ01FdFNlR0V4TkVSSE1HbHdWRXd3V0haRGJIQlpTamcySzFGMldETldMMlV4VjBOSGRrNTFSVWtyYlN0YVQwRnlTa1paZEZWMmFWVktXV2cxVXk5bGVBb2dJQ0FnSUNCSk16WjJVR2wxT0hKa1MyOTRkVlIwVG1WeE1GSnJRM1I0UXpkV1NFWlZNMFpCVUM5a2MyZ3ZNbVk0Umtac1MyZDFLMHB6T1hWdlIwUnNOeTg0YlhZNUNpQWdJQ0FnSUdGbVpHY3diVlpPTTJnMFNreFNWa1p3YVdwS05pdElLMlE1VTJaSE5tOHdkazQyVkV4dU1rSlpLekZ1Y1Rrdk5WZEVhaXQ0SzJsM05VSlpjMlZQTjFJS0lDQWdJQ0FnTkVwc0swMXhVbVpwSzA5S1JUbGlhalJ5YzNONWRYRnNhaTlNYlVaQ1VUQTJaVXRUWlU5d1JHVlNXbXg0UWpsSlMxWlZVRTFpUzI1MU1FWTVaR0pNYmdvZ0lDQWdJQ0JYU0haRU9GbFFiR1Y2U1RGSlFURldNRU5MTW5oYWVWRm1NMjR5U3pGMVEyOXFZa3RIWjNGM1pWZFJXRFZKTDFKRFNHWnRjVGhqZDFRNFVESk5hRkpTQ2lBZ0lDQWdJRmhSU1VSQlVVRkNDaUFnSUNBZ0lDMHRMUzB0UlU1RUlGQlZRa3hKUXlCTFJWa3RMUzB0TFFvZ0lDQWdJQ0FLTFNBZ0lIQmhkR2c2SUM5MllYSXZiR2xpTDJ0MVltVmhaRzB2Y0d0cEwzTmhMbXRsZVFvZ0lDQWdiM2R1WlhJNklISnZiM1E2Y205dmRBb2dJQ0FnY0dWeWJXbHpjMmx2Ym5NNklDY3dOakF3SndvZ0lDQWdZMjl1ZEdWdWREb2dmQW9nSUNBZ0lDQXRMUzB0TFVKRlIwbE9JRkpUUVNCUVVrbFdRVlJGSUV0RldTMHRMUzB0Q2lBZ0lDQWdJRTFKU1VWd1FVbENRVUZMUTBGUlJVRnpPR2g1Y0RBeVRuRkRiM0YxVUhvNVVqQTBOakJMVW5oaE1UUkVSekJwY0ZSTU1GaDJRMnh3V1VvNE5pdFJkbGdLSUNBZ0lDQWdNMVl2WlRGWFEwZDJUblZGU1N0dEsxcFBRWEpLUmxsMFZYWnBWVXBaYURWVEwyVjRTVE0yZGxCcGRUaHlaRXR2ZUhWVWRFNWxjVEJTYTBOMGVFTTNWZ29nSUNBZ0lDQklSbFV6UmtGUUwyUnphQzh5WmpoR1JteExaM1VyU25NNWRXOUhSR3czTHpodGRqbGhabVJuTUcxV1RqTm9ORXBNVWxaR2NHbHFTallyU0N0a09WTm1DaUFnSUNBZ0lFYzJiekIyVGpaVVRHNHlRbGtyTVc1eE9TODFWMFJxSzNncmFYYzFRbGx6WlU4M1VqUktiQ3ROY1ZKbWFTdFBTa1U1WW1vMGNuTnplWFZ4YkdvdlRHMEtJQ0FnSUNBZ1JrSlJNRFpsUzFObFQzQkVaVkphYkhoQ09VbExWbFZRVFdKTGJuVXdSamxrWWt4dVYwaDJSRGhaVUd4bGVra3hTVUV4VmpCRFN6SjRXbmxSWmpOdU1nb2dJQ0FnSUNCTE1YVkRiMnBpUzBkbmNYZGxWMUZZTlVrdlVrTklabTF4T0dOM1ZEaFFNazFvVWxKWVVVbEVRVkZCUWtGdlNVSkJVVU56VFZWaGRrOTZXamhhVEdFMkNpQWdJQ0FnSUhFMFZXcE5TMmhuWjJOQmIwbzRhM1EzY2tKSk1HRjJWVU52TTJ4bU1UQkxaaXM1Ymtad1dHeEtVMmx1Tld4Q2RqTlZZMEZqZW5sbE9YWk5LMVIwZDBZS0lDQWdJQ0FnTDNWeEsyVnBVblJpVERoSUszWm5hVkJIZUhVME5FUllZbFUzZUVseE0wMUJNV05YV21Zdk1EWmpaR0Y1TjNFME0zVnlUMk5MUjBkcmRETjFkVVZNU1FvZ0lDQWdJQ0J5VUVSVlJHUTJVVU5sU0hkWmFISnpjbFJRTkhaRVJWUmliVzVJZHk5aFdESk1VRk4wUWpGc1JHVnhSVGh3VlhsNk0xQnNZekpXWWpJNE0yUnZTRFpRQ2lBZ0lDQWdJREZQY1ZFeGIxbHBkMUJwZW14UVRXb3pXazVRTm1wbWRHTjVOa2hOYVRjMEwxa3pUVEl5YlZCTFlqVkdja054U213eU1HbFpiekpXTmxKbFQwOVpjV2dLSUNBZ0lDQWdURmxGWjNWc1pFRnBSa2RJYkhSYWRHVnJlRU52TXk5bk9XcGxWM2czTUV3ek4xRlZjM0JWTkcxdWVqbEdkRVl3TkdaNVkzZE9MM2xYT1hsalVGTm1Td29nSUNBZ0lDQkpRMjlpWlVwWFFrRnZSMEpCVFZoTFFqRjVNREpZUkU4NGIxaE1LM3BuZVhvM1lYY3dTeTlEYmpGelNGZDRlbnBSU1haNE1rMWFMekl6ZVVaTlNYRmpDaUFnSUNBZ0lFbHZSMDVJVTFacGIwNURLM1pvWm10amJXZDZURWx6UVZFNVdsQlZUVE5UVVN0SVpFaFViVnAwYUdaUFMzaHFVaTgwT1VNNVZrNUtaMlpEVW10VFNsTUtJQ0FnSUNBZ1NXUjVRM0ZKVjJwWVdGVlpLMEozVG00d04xSlVhR3B6VlZsUWVtaHpOV1ZUTW5aQlNVdzJTbFV4VG10VlFsRlhhMFpxUjBsTWQxSkJiMGRDUVU5cGVBb2dJQ0FnSUNCNVVVTTVLM0J1WVVoemIwSndTazlNUlU5NFVsSlllR1pHV0VkNVUxRTVkelEzTm5FdlRuaE5lbGhWY1hWaVpFdHZhakozWTNkaFVrWnpaR2htT0VKMUNpQWdJQ0FnSUhwcFp6bE1ORkJVYVUwelJWcFpObTVOY0hSeVUxcDFkRFZYWWpGek9VRTBURWhZY1RabmVWTk9RMFpHYzNOWVFYZHhaSGRJWkdwclowWkJNblpVWjNnS0lDQWdJQ0FnVHpkSWJHeHRSM2xJU3psQmFIbExlbFZtVjJScVF6VlBXV1V3ZHpGTmNHaHdTalJ0VEZCNVRrRnZSMEpCVEdSMmFVZGFkR1lyUTBWMmFEVnBjMUZ3VFFvZ0lDQWdJQ0EzWVVkck1rNWhOVXhMZG5rMVdXbDVMMkZGVFRKd2R6SlNiWGd3TldwRldGZ3hWa0prT0N0T1lXeEtVRXBQVUhCNGExWnVaVW80ZEhweWVEWTRVbXREQ2lBZ0lDQWdJRTFzZWs5bmJWWkRZbk5SYWxCSmMxaGlLMjlDUlhBNU9EVkNjMjFHYWtZM1pFNVpZa0UwY0RGdFdqWmFWM0p3UWpGQllqUlVXRTFHT0ZFdmMydHdSR2NLSUNBZ0lDQWdiVkpvUlhCMGJYWmhUekZHWTNCTkt6Tm1OMGhQWlV4U1FXOUhRVWR6U3k5bVFUbGtURFkxZGtabmNFVldRbVZPVG1KQ1VFUnVUMk00Y25SMlVGcENaQW9nSUNBZ0lDQkZUVTR6VjNoeFYwVnRRamhvVlVSWVJXTk5iVW94TkhWUldGaE5SRWRTZURONGVsTlNlRmhtZVU1S1MxZzNTMGt4YldweVUxUlZhR2xqY1N0RFJHTTVDaUFnSUNBZ0lHNWlORXhrY2tOc2QwTklWVFJ1Y3psd05sZ3dUMDF3YlcweFRVRlNaVTFpYlRKVWN5czBWbEpYVkVwU2JVVk5Ta3hRWTFka1VXcGpjVVIxVTJKVlpqTUtJQ0FnSUNBZ1pEVjVjVlpqTUVObldVSnJUbnBMVUZsNVRrWnlhalJ5Ym1OaGJsUlBNRWRJY1ROc05FRmpjRTlrU1VKdlV6WnhhblpLTlhOTVVFcHZMMHh5ZEZkU1dBb2dJQ0FnSUNCNlFYbGhXR3BFYkV3clVHdHhRVGg0YVZkMk1sVlhjSFZWTWtscE9FOWhUMFJhYzNOMVlUWkRialZWVVhwdVZFTklVa055Y0dwMU1qZDNNM3BOZWxRM0NpQWdJQ0FnSUd0dVRFNWxVRFFyT0dSVGVrRm5ORVYwWmxodlZXbE1VVEJUUW1OclpUWjFWM0ZYYUVVeFVtNHhVak50UmpkS1JYb3ZibE12ZHowOUNpQWdJQ0FnSUMwdExTMHRSVTVFSUZKVFFTQlFVa2xXUVZSRklFdEZXUzB0TFMwdENpQWdJQ0FnSUFvdElDQWdjR0YwYURvZ0wyVjBZeTlyZFdKbGNtNWxkR1Z6TDIxaGJtbG1aWE4wY3k5cmRXSmxMWFpwY0M1NVlXMXNDaUFnSUNCdmQyNWxjam9nY205dmREcHliMjkwQ2lBZ0lDQmpiMjUwWlc1ME9pQjhDaUFnSUNBZ0lHRndhVlpsY25OcGIyNDZJSFl4Q2lBZ0lDQWdJR3RwYm1RNklGQnZaQW9nSUNBZ0lDQnRaWFJoWkdGMFlUb0tJQ0FnSUNBZ0lDQmpjbVZoZEdsdmJsUnBiV1Z6ZEdGdGNEb2diblZzYkFvZ0lDQWdJQ0FnSUc1aGJXVTZJR3QxWW1VdGRtbHdDaUFnSUNBZ0lDQWdibUZ0WlhOd1lXTmxPaUJyZFdKbExYTjVjM1JsYlFvZ0lDQWdJQ0J6Y0dWak9nb2dJQ0FnSUNBZ0lHTnZiblJoYVc1bGNuTTZDaUFnSUNBZ0lDQWdMU0JoY21kek9nb2dJQ0FnSUNBZ0lDQWdMU0J0WVc1aFoyVnlDaUFnSUNBZ0lDQWdJQ0JsYm5ZNkNpQWdJQ0FnSUNBZ0lDQXRJRzVoYldVNklIWnBjRjloY25BS0lDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVNklIUnlkV1VLSUNBZ0lDQWdJQ0FnSUMwZ2JtRnRaVG9nY0c5eWRBb2dJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpUb2dOalEwTXdvZ0lDQWdJQ0FnSUNBZ0xTQnVZVzFsT2lCMmFYQmZZMmxrY2dvZ0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlRvZ016SUtJQ0FnSUNBZ0lDQWdJQzBnYm1GdFpUb2dZM0JmWlc1aFlteGxDaUFnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUIwY25WbENpQWdJQ0FnSUNBZ0lDQXRJRzVoYldVNklHTndYMjVoYldWemNHRmpaUW9nSUNBZ0lDQWdJQ0FnSUNCMllXeDFaVG9nYTNWaVpTMXplWE4wWlcwS0lDQWdJQ0FnSUNBZ0lDMGdibUZ0WlRvZ2RtbHdYMlJrYm5NS0lDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVNklHWmhiSE5sQ2lBZ0lDQWdJQ0FnSUNBdElHNWhiV1U2SUhacGNGOXNaV0ZrWlhKbGJHVmpkR2x2YmdvZ0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlRvZ2RISjFaUW9nSUNBZ0lDQWdJQ0FnTFNCdVlXMWxPaUIyYVhCZmJHVmhjMlZrZFhKaGRHbHZiZ29nSUNBZ0lDQWdJQ0FnSUNCMllXeDFaVG9nTVRVS0lDQWdJQ0FnSUNBZ0lDMGdibUZ0WlRvZ2RtbHdYM0psYm1WM1pHVmhaR3hwYm1VS0lDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVNklERXdDaUFnSUNBZ0lDQWdJQ0F0SUc1aGJXVTZJSFpwY0Y5eVpYUnllWEJsY21sdlpBb2dJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpUb2dNZ29nSUNBZ0lDQWdJQ0FnTFNCdVlXMWxPaUJoWkdSeVpYTnpDaUFnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUF4T1RVdU1UY3VNVEl1T1RJS0lDQWdJQ0FnSUNBZ0lHbHRZV2RsT2lCd2RXSnNhV011WldOeUxtRjNjeTlzTUdjNGNqaHFOaTlyZFdKbExYWnBjQzlyZFdKbExYWnBjRHAyTVM0d0xqQXRaV3R6TFdFdGRqQXVNalF1TUMxa1pYWXRZblZwYkdRdU1UWTVDaUFnSUNBZ0lDQWdJQ0JwYldGblpWQjFiR3hRYjJ4cFkzazZJRWxtVG05MFVISmxjMlZ1ZEFvZ0lDQWdJQ0FnSUNBZ2JtRnRaVG9nYTNWaVpTMTJhWEFLSUNBZ0lDQWdJQ0FnSUhKbGMyOTFjbU5sY3pvZ2UzMEtJQ0FnSUNBZ0lDQWdJSE5sWTNWeWFYUjVRMjl1ZEdWNGREb0tJQ0FnSUNBZ0lDQWdJQ0FnWTJGd1lXSnBiR2wwYVdWek9nb2dJQ0FnSUNBZ0lDQWdJQ0FnSUdGa1pEb0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBdElFNUZWRjlCUkUxSlRnb2dJQ0FnSUNBZ0lDQWdJQ0FnSUMwZ1RrVlVYMUpCVndvZ0lDQWdJQ0FnSUNBZ2RtOXNkVzFsVFc5MWJuUnpPZ29nSUNBZ0lDQWdJQ0FnTFNCdGIzVnVkRkJoZEdnNklDOWxkR012YTNWaVpYSnVaWFJsY3k5aFpHMXBiaTVqYjI1bUNpQWdJQ0FnSUNBZ0lDQWdJRzVoYldVNklHdDFZbVZqYjI1bWFXY0tJQ0FnSUNBZ0lDQm9iM04wVG1WMGQyOXlhem9nZEhKMVpRb2dJQ0FnSUNBZ0lIWnZiSFZ0WlhNNkNpQWdJQ0FnSUNBZ0xTQm9iM04wVUdGMGFEb0tJQ0FnSUNBZ0lDQWdJQ0FnY0dGMGFEb2dMM1poY2k5c2FXSXZhM1ZpWldGa2JTOWhaRzFwYmk1amIyNW1DaUFnSUNBZ0lDQWdJQ0FnSUhSNWNHVTZJRVpwYkdVS0lDQWdJQ0FnSUNBZ0lHNWhiV1U2SUd0MVltVmpiMjVtYVdjS0lDQWdJQ0FnYzNSaGRIVnpPaUI3ZlFvZ0lDQWdJQ0FLTFNBZ0lIQmhkR2c2SUM5bGRHTXZhM1ZpWlhKdVpYUmxjeTloZFdScGRDMXdiMnhwWTNrdWVXRnRiQW9nSUNBZ2IzZHVaWEk2SUhKdmIzUTZjbTl2ZEFvZ0lDQWdZMjl1ZEdWdWREb2dmQW9nSUNBZ0lDQmhjR2xXWlhKemFXOXVPaUJoZFdScGRDNXJPSE11YVc4dmRqRUtJQ0FnSUNBZ2EybHVaRG9nVUc5c2FXTjVDaUFnSUNBZ0lHMWxkR0ZrWVhSaE9nb2dJQ0FnSUNBZ0lHTnlaV0YwYVc5dVZHbHRaWE4wWVcxd09pQnVkV3hzQ2lBZ0lDQWdJSEoxYkdWek9nb2dJQ0FnSUNBdElHeGxkbVZzT2lCU1pYRjFaWE4wVW1WemNHOXVjMlVLSUNBZ0lDQWdJQ0J1WVcxbGMzQmhZMlZ6T2dvZ0lDQWdJQ0FnSUMwZ2EzVmlaUzF6ZVhOMFpXMEtJQ0FnSUNBZ0lDQnZiV2wwVTNSaFoyVnpPZ29nSUNBZ0lDQWdJQzBnVW1WeGRXVnpkRkpsWTJWcGRtVmtDaUFnSUNBZ0lDQWdjbVZ6YjNWeVkyVnpPZ29nSUNBZ0lDQWdJQzBnY21WemIzVnlZMlZPWVcxbGN6b0tJQ0FnSUNBZ0lDQWdJQzBnWVhkekxXRjFkR2dLSUNBZ0lDQWdJQ0FnSUhKbGMyOTFjbU5sY3pvS0lDQWdJQ0FnSUNBZ0lDMGdZMjl1Wm1sbmJXRndjd29nSUNBZ0lDQWdJSFpsY21Kek9nb2dJQ0FnSUNBZ0lDMGdkWEJrWVhSbENpQWdJQ0FnSUNBZ0xTQndZWFJqYUFvZ0lDQWdJQ0FnSUMwZ1pHVnNaWFJsQ2lBZ0lDQWdJQzBnYkdWMlpXdzZJRTV2Ym1VS0lDQWdJQ0FnSUNCeVpYTnZkWEpqWlhNNkNpQWdJQ0FnSUNBZ0xTQnlaWE52ZFhKalpYTTZDaUFnSUNBZ0lDQWdJQ0F0SUdWdVpIQnZhVzUwY3dvZ0lDQWdJQ0FnSUNBZ0xTQnpaWEoyYVdObGN3b2dJQ0FnSUNBZ0lDQWdMU0J6WlhKMmFXTmxjeTl6ZEdGMGRYTUtJQ0FnSUNBZ0lDQjFjMlZ5Y3pvS0lDQWdJQ0FnSUNBdElITjVjM1JsYlRwcmRXSmxMWEJ5YjNoNUNpQWdJQ0FnSUNBZ2RtVnlZbk02Q2lBZ0lDQWdJQ0FnTFNCM1lYUmphQW9nSUNBZ0lDQXRJR3hsZG1Wc09pQk9iMjVsQ2lBZ0lDQWdJQ0FnY21WemIzVnlZMlZ6T2dvZ0lDQWdJQ0FnSUMwZ2NtVnpiM1Z5WTJWek9nb2dJQ0FnSUNBZ0lDQWdMU0J1YjJSbGN3b2dJQ0FnSUNBZ0lDQWdMU0J1YjJSbGN5OXpkR0YwZFhNS0lDQWdJQ0FnSUNCMWMyVnljem9LSUNBZ0lDQWdJQ0F0SUd0MVltVnNaWFFLSUNBZ0lDQWdJQ0IyWlhKaWN6b0tJQ0FnSUNBZ0lDQXRJR2RsZEFvZ0lDQWdJQ0F0SUd4bGRtVnNPaUJPYjI1bENpQWdJQ0FnSUNBZ2NtVnpiM1Z5WTJWek9nb2dJQ0FnSUNBZ0lDMGdjbVZ6YjNWeVkyVnpPZ29nSUNBZ0lDQWdJQ0FnTFNCdWIyUmxjd29nSUNBZ0lDQWdJQ0FnTFNCdWIyUmxjeTl6ZEdGMGRYTUtJQ0FnSUNBZ0lDQjJaWEppY3pvS0lDQWdJQ0FnSUNBdElHZGxkQW9nSUNBZ0lDQXRJR3hsZG1Wc09pQk9iMjVsQ2lBZ0lDQWdJQ0FnYm1GdFpYTndZV05sY3pvS0lDQWdJQ0FnSUNBdElHdDFZbVV0YzNsemRHVnRDaUFnSUNBZ0lDQWdjbVZ6YjNWeVkyVnpPZ29nSUNBZ0lDQWdJQzBnY21WemIzVnlZMlZ6T2dvZ0lDQWdJQ0FnSUNBZ0xTQmxibVJ3YjJsdWRITUtJQ0FnSUNBZ0lDQjFjMlZ5Y3pvS0lDQWdJQ0FnSUNBdElITjVjM1JsYlRwcmRXSmxMV052Ym5SeWIyeHNaWEl0YldGdVlXZGxjZ29nSUNBZ0lDQWdJQzBnYzNsemRHVnRPbXQxWW1VdGMyTm9aV1IxYkdWeUNpQWdJQ0FnSUNBZ0xTQnplWE4wWlcwNmMyVnlkbWxqWldGalkyOTFiblE2YTNWaVpTMXplWE4wWlcwNlpXNWtjRzlwYm5RdFkyOXVkSEp2Ykd4bGNnb2dJQ0FnSUNBZ0lIWmxjbUp6T2dvZ0lDQWdJQ0FnSUMwZ1oyVjBDaUFnSUNBZ0lDQWdMU0IxY0dSaGRHVUtJQ0FnSUNBZ0xTQnNaWFpsYkRvZ1RtOXVaUW9nSUNBZ0lDQWdJSEpsYzI5MWNtTmxjem9LSUNBZ0lDQWdJQ0F0SUhKbGMyOTFjbU5sY3pvS0lDQWdJQ0FnSUNBZ0lDMGdibUZ0WlhOd1lXTmxjd29nSUNBZ0lDQWdJQ0FnTFNCdVlXMWxjM0JoWTJWekwzTjBZWFIxY3dvZ0lDQWdJQ0FnSUNBZ0xTQnVZVzFsYzNCaFkyVnpMMlpwYm1Gc2FYcGxDaUFnSUNBZ0lDQWdkWE5sY25NNkNpQWdJQ0FnSUNBZ0xTQnplWE4wWlcwNllYQnBjMlZ5ZG1WeUNpQWdJQ0FnSUNBZ2RtVnlZbk02Q2lBZ0lDQWdJQ0FnTFNCblpYUUtJQ0FnSUNBZ0xTQnNaWFpsYkRvZ1RtOXVaUW9nSUNBZ0lDQWdJSEpsYzI5MWNtTmxjem9LSUNBZ0lDQWdJQ0F0SUdkeWIzVndPaUJ0WlhSeWFXTnpMbXM0Y3k1cGJ3b2dJQ0FnSUNBZ0lIVnpaWEp6T2dvZ0lDQWdJQ0FnSUMwZ2MzbHpkR1Z0T210MVltVXRZMjl1ZEhKdmJHeGxjaTF0WVc1aFoyVnlDaUFnSUNBZ0lDQWdkbVZ5WW5NNkNpQWdJQ0FnSUNBZ0xTQm5aWFFLSUNBZ0lDQWdJQ0F0SUd4cGMzUUtJQ0FnSUNBZ0xTQnNaWFpsYkRvZ1RtOXVaUW9nSUNBZ0lDQWdJRzV2YmxKbGMyOTFjbU5sVlZKTWN6b0tJQ0FnSUNBZ0lDQXRJQzlvWldGc2RHaDZLZ29nSUNBZ0lDQWdJQzBnTDNabGNuTnBiMjRLSUNBZ0lDQWdJQ0F0SUM5emQyRm5aMlZ5S2dvZ0lDQWdJQ0F0SUd4bGRtVnNPaUJPYjI1bENpQWdJQ0FnSUNBZ2NtVnpiM1Z5WTJWek9nb2dJQ0FnSUNBZ0lDMGdjbVZ6YjNWeVkyVnpPZ29nSUNBZ0lDQWdJQ0FnTFNCbGRtVnVkSE1LSUNBZ0lDQWdMU0JzWlhabGJEb2dVbVZ4ZFdWemRBb2dJQ0FnSUNBZ0lHOXRhWFJUZEdGblpYTTZDaUFnSUNBZ0lDQWdMU0JTWlhGMVpYTjBVbVZqWldsMlpXUUtJQ0FnSUNBZ0lDQnlaWE52ZFhKalpYTTZDaUFnSUNBZ0lDQWdMU0J5WlhOdmRYSmpaWE02Q2lBZ0lDQWdJQ0FnSUNBdElHNXZaR1Z6TDNOMFlYUjFjd29nSUNBZ0lDQWdJQ0FnTFNCd2IyUnpMM04wWVhSMWN3b2dJQ0FnSUNBZ0lIVnpaWEp6T2dvZ0lDQWdJQ0FnSUMwZ2EzVmlaV3hsZEFvZ0lDQWdJQ0FnSUMwZ2MzbHpkR1Z0T201dlpHVXRjSEp2WW14bGJTMWtaWFJsWTNSdmNnb2dJQ0FnSUNBZ0lDMGdjM2x6ZEdWdE9uTmxjblpwWTJWaFkyTnZkVzUwT210MVltVXRjM2x6ZEdWdE9tNXZaR1V0Y0hKdllteGxiUzFrWlhSbFkzUnZjZ29nSUNBZ0lDQWdJSFpsY21Kek9nb2dJQ0FnSUNBZ0lDMGdkWEJrWVhSbENpQWdJQ0FnSUNBZ0xTQndZWFJqYUFvZ0lDQWdJQ0F0SUd4bGRtVnNPaUJTWlhGMVpYTjBDaUFnSUNBZ0lDQWdiMjFwZEZOMFlXZGxjem9LSUNBZ0lDQWdJQ0F0SUZKbGNYVmxjM1JTWldObGFYWmxaQW9nSUNBZ0lDQWdJSEpsYzI5MWNtTmxjem9LSUNBZ0lDQWdJQ0F0SUhKbGMyOTFjbU5sY3pvS0lDQWdJQ0FnSUNBZ0lDMGdibTlrWlhNdmMzUmhkSFZ6Q2lBZ0lDQWdJQ0FnSUNBdElIQnZaSE12YzNSaGRIVnpDaUFnSUNBZ0lDQWdkWE5sY2tkeWIzVndjem9LSUNBZ0lDQWdJQ0F0SUhONWMzUmxiVHB1YjJSbGN3b2dJQ0FnSUNBZ0lIWmxjbUp6T2dvZ0lDQWdJQ0FnSUMwZ2RYQmtZWFJsQ2lBZ0lDQWdJQ0FnTFNCd1lYUmphQW9nSUNBZ0lDQXRJR3hsZG1Wc09pQlNaWEYxWlhOMENpQWdJQ0FnSUNBZ2IyMXBkRk4wWVdkbGN6b0tJQ0FnSUNBZ0lDQXRJRkpsY1hWbGMzUlNaV05sYVhabFpBb2dJQ0FnSUNBZ0lIVnpaWEp6T2dvZ0lDQWdJQ0FnSUMwZ2MzbHpkR1Z0T25ObGNuWnBZMlZoWTJOdmRXNTBPbXQxWW1VdGMzbHpkR1Z0T201aGJXVnpjR0ZqWlMxamIyNTBjbTlzYkdWeUNpQWdJQ0FnSUNBZ2RtVnlZbk02Q2lBZ0lDQWdJQ0FnTFNCa1pXeGxkR1ZqYjJ4c1pXTjBhVzl1Q2lBZ0lDQWdJQzBnYkdWMlpXdzZJRTFsZEdGa1lYUmhDaUFnSUNBZ0lDQWdiMjFwZEZOMFlXZGxjem9LSUNBZ0lDQWdJQ0F0SUZKbGNYVmxjM1JTWldObGFYWmxaQW9nSUNBZ0lDQWdJSEpsYzI5MWNtTmxjem9LSUNBZ0lDQWdJQ0F0SUhKbGMyOTFjbU5sY3pvS0lDQWdJQ0FnSUNBZ0lDMGdjMlZqY21WMGN3b2dJQ0FnSUNBZ0lDQWdMU0JqYjI1bWFXZHRZWEJ6Q2lBZ0lDQWdJQ0FnTFNCbmNtOTFjRG9nWVhWMGFHVnVkR2xqWVhScGIyNHVhemh6TG1sdkNpQWdJQ0FnSUNBZ0lDQnlaWE52ZFhKalpYTTZDaUFnSUNBZ0lDQWdJQ0F0SUhSdmEyVnVjbVYyYVdWM2N3b2dJQ0FnSUNBdElHeGxkbVZzT2lCU1pYRjFaWE4wQ2lBZ0lDQWdJQ0FnY21WemIzVnlZMlZ6T2dvZ0lDQWdJQ0FnSUMwZ2NtVnpiM1Z5WTJWek9nb2dJQ0FnSUNBZ0lDQWdMU0J6WlhKMmFXTmxZV05qYjNWdWRITXZkRzlyWlc0S0lDQWdJQ0FnTFNCc1pYWmxiRG9nVW1WeGRXVnpkQW9nSUNBZ0lDQWdJRzl0YVhSVGRHRm5aWE02Q2lBZ0lDQWdJQ0FnTFNCU1pYRjFaWE4wVW1WalpXbDJaV1FLSUNBZ0lDQWdJQ0J5WlhOdmRYSmpaWE02Q2lBZ0lDQWdJQ0FnTFNCN2ZRb2dJQ0FnSUNBZ0lDMGdaM0p2ZFhBNklHRmtiV2x6YzJsdmJuSmxaMmx6ZEhKaGRHbHZiaTVyT0hNdWFXOEtJQ0FnSUNBZ0lDQXRJR2R5YjNWd09pQmhjR2xsZUhSbGJuTnBiMjV6TG1zNGN5NXBid29nSUNBZ0lDQWdJQzBnWjNKdmRYQTZJR0Z3YVhKbFoybHpkSEpoZEdsdmJpNXJPSE11YVc4S0lDQWdJQ0FnSUNBdElHZHliM1Z3T2lCaGNIQnpDaUFnSUNBZ0lDQWdMU0JuY205MWNEb2dZWFYwYUdWdWRHbGpZWFJwYjI0dWF6aHpMbWx2Q2lBZ0lDQWdJQ0FnTFNCbmNtOTFjRG9nWVhWMGFHOXlhWHBoZEdsdmJpNXJPSE11YVc4S0lDQWdJQ0FnSUNBdElHZHliM1Z3T2lCaGRYUnZjMk5oYkdsdVp3b2dJQ0FnSUNBZ0lDMGdaM0p2ZFhBNklHSmhkR05vQ2lBZ0lDQWdJQ0FnTFNCbmNtOTFjRG9nWTJWeWRHbG1hV05oZEdWekxtczRjeTVwYndvZ0lDQWdJQ0FnSUMwZ1ozSnZkWEE2SUdWNGRHVnVjMmx2Ym5NS0lDQWdJQ0FnSUNBdElHZHliM1Z3T2lCdFpYUnlhV056TG1zNGN5NXBid29nSUNBZ0lDQWdJQzBnWjNKdmRYQTZJRzVsZEhkdmNtdHBibWN1YXpoekxtbHZDaUFnSUNBZ0lDQWdMU0JuY205MWNEb2djRzlzYVdONUNpQWdJQ0FnSUNBZ0xTQm5jbTkxY0RvZ2NtSmhZeTVoZFhSb2IzSnBlbUYwYVc5dUxtczRjeTVwYndvZ0lDQWdJQ0FnSUMwZ1ozSnZkWEE2SUhOamFHVmtkV3hwYm1jdWF6aHpMbWx2Q2lBZ0lDQWdJQ0FnTFNCbmNtOTFjRG9nYzJWMGRHbHVaM011YXpoekxtbHZDaUFnSUNBZ0lDQWdMU0JuY205MWNEb2djM1J2Y21GblpTNXJPSE11YVc4S0lDQWdJQ0FnSUNCMlpYSmljem9LSUNBZ0lDQWdJQ0F0SUdkbGRBb2dJQ0FnSUNBZ0lDMGdiR2x6ZEFvZ0lDQWdJQ0FnSUMwZ2QyRjBZMmdLSUNBZ0lDQWdMU0JzWlhabGJEb2dVbVZ4ZFdWemRGSmxjM0J2Ym5ObENpQWdJQ0FnSUNBZ2IyMXBkRk4wWVdkbGN6b0tJQ0FnSUNBZ0lDQXRJRkpsY1hWbGMzUlNaV05sYVhabFpBb2dJQ0FnSUNBZ0lISmxjMjkxY21ObGN6b0tJQ0FnSUNBZ0lDQXRJSHQ5Q2lBZ0lDQWdJQ0FnTFNCbmNtOTFjRG9nWVdSdGFYTnphVzl1Y21WbmFYTjBjbUYwYVc5dUxtczRjeTVwYndvZ0lDQWdJQ0FnSUMwZ1ozSnZkWEE2SUdGd2FXVjRkR1Z1YzJsdmJuTXVhemh6TG1sdkNpQWdJQ0FnSUNBZ0xTQm5jbTkxY0RvZ1lYQnBjbVZuYVhOMGNtRjBhVzl1TG1zNGN5NXBid29nSUNBZ0lDQWdJQzBnWjNKdmRYQTZJR0Z3Y0hNS0lDQWdJQ0FnSUNBdElHZHliM1Z3T2lCaGRYUm9aVzUwYVdOaGRHbHZiaTVyT0hNdWFXOEtJQ0FnSUNBZ0lDQXRJR2R5YjNWd09pQmhkWFJvYjNKcGVtRjBhVzl1TG1zNGN5NXBid29nSUNBZ0lDQWdJQzBnWjNKdmRYQTZJR0YxZEc5elkyRnNhVzVuQ2lBZ0lDQWdJQ0FnTFNCbmNtOTFjRG9nWW1GMFkyZ0tJQ0FnSUNBZ0lDQXRJR2R5YjNWd09pQmpaWEowYVdacFkyRjBaWE11YXpoekxtbHZDaUFnSUNBZ0lDQWdMU0JuY205MWNEb2daWGgwWlc1emFXOXVjd29nSUNBZ0lDQWdJQzBnWjNKdmRYQTZJRzFsZEhKcFkzTXVhemh6TG1sdkNpQWdJQ0FnSUNBZ0xTQm5jbTkxY0RvZ2JtVjBkMjl5YTJsdVp5NXJPSE11YVc4S0lDQWdJQ0FnSUNBdElHZHliM1Z3T2lCd2IyeHBZM2tLSUNBZ0lDQWdJQ0F0SUdkeWIzVndPaUJ5WW1GakxtRjFkR2h2Y21sNllYUnBiMjR1YXpoekxtbHZDaUFnSUNBZ0lDQWdMU0JuY205MWNEb2djMk5vWldSMWJHbHVaeTVyT0hNdWFXOEtJQ0FnSUNBZ0lDQXRJR2R5YjNWd09pQnpaWFIwYVc1bmN5NXJPSE11YVc4S0lDQWdJQ0FnSUNBdElHZHliM1Z3T2lCemRHOXlZV2RsTG1zNGN5NXBid29nSUNBZ0lDQXRJR3hsZG1Wc09pQk5aWFJoWkdGMFlRb2dJQ0FnSUNBZ0lHOXRhWFJUZEdGblpYTTZDaUFnSUNBZ0lDQWdMU0JTWlhGMVpYTjBVbVZqWldsMlpXUUtJQ0FnSUNBZ0NpMGdJQ0J3WVhSb09pQXZkRzF3TDJ0MVltVmhaRzB1ZVdGdGJBb2dJQ0FnYjNkdVpYSTZJSEp2YjNRNmNtOXZkQW9nSUNBZ2NHVnliV2x6YzJsdmJuTTZJQ2N3TmpRd0p3b2dJQ0FnWTI5dWRHVnVkRG9nZkFvZ0lDQWdJQ0F0TFMwS0lDQWdJQ0FnWVhCcFUyVnlkbVZ5T2dvZ0lDQWdJQ0FnSUdWNGRISmhRWEpuY3pvS0lDQWdJQ0FnSUNBdElHNWhiV1U2SUdGMVpHbDBMV3h2WnkxdFlYaGhaMlVLSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUF6TUFvZ0lDQWdJQ0FnSUMwZ2JtRnRaVG9nWVhWa2FYUXRiRzluTFcxaGVHSmhZMnQxY0FvZ0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SURFd0NpQWdJQ0FnSUNBZ0xTQnVZVzFsT2lCaGRXUnBkQzFzYjJjdGJXRjRjMmw2WlFvZ0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SURVeE1nb2dJQ0FnSUNBZ0lDMGdibUZ0WlRvZ1lYVmthWFF0Ykc5bkxYQmhkR2dLSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUF2ZG1GeUwyeHZaeTlyZFdKbGNtNWxkR1Z6TDJGd2FTMWhkV1JwZEM1c2IyY0tJQ0FnSUNBZ0lDQXRJRzVoYldVNklHRjFaR2wwTFhCdmJHbGplUzFtYVd4bENpQWdJQ0FnSUNBZ0lDQjJZV3gxWlRvZ0wyVjBZeTlyZFdKbGNtNWxkR1Z6TDJGMVpHbDBMWEJ2YkdsamVTNTVZVzFzQ2lBZ0lDQWdJQ0FnTFNCdVlXMWxPaUJ3Y205bWFXeHBibWNLSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUJtWVd4elpRb2dJQ0FnSUNBZ0lDMGdibUZ0WlRvZ2RHeHpMV05wY0dobGNpMXpkV2wwWlhNS0lDQWdJQ0FnSUNBZ0lIWmhiSFZsT2lCVVRGTmZSVU5FU0VWZlVsTkJYMWRKVkVoZlFVVlRYekV5T0Y5SFEwMWZVMGhCTWpVMkNpQWdJQ0FnSUNBZ1pYaDBjbUZXYjJ4MWJXVnpPZ29nSUNBZ0lDQWdJQzBnYUc5emRGQmhkR2c2SUM5MllYSXZiR2xpTDJ0MVltVmhaRzB2WVhWa2FYUXRjRzlzYVdONUxubGhiV3dLSUNBZ0lDQWdJQ0FnSUcxdmRXNTBVR0YwYURvZ0wyVjBZeTlyZFdKbGNtNWxkR1Z6TDJGMVpHbDBMWEJ2YkdsamVTNTVZVzFzQ2lBZ0lDQWdJQ0FnSUNCdVlXMWxPaUJoZFdScGRDMXdiMnhwWTNrS0lDQWdJQ0FnSUNBZ0lIQmhkR2hVZVhCbE9pQkdhV3hsQ2lBZ0lDQWdJQ0FnSUNCeVpXRmtUMjVzZVRvZ2RISjFaUW9nSUNBZ0lDQWdJQzBnYUc5emRGQmhkR2c2SUM5MllYSXZiRzluTDJ0MVltVnlibVYwWlhNS0lDQWdJQ0FnSUNBZ0lHMXZkVzUwVUdGMGFEb2dMM1poY2k5c2IyY3ZhM1ZpWlhKdVpYUmxjd29nSUNBZ0lDQWdJQ0FnYm1GdFpUb2dZWFZrYVhRdGJHOW5MV1JwY2dvZ0lDQWdJQ0FnSUNBZ2NHRjBhRlI1Y0dVNklFUnBjbVZqZEc5eWVVOXlRM0psWVhSbENpQWdJQ0FnSUdGd2FWWmxjbk5wYjI0NklHdDFZbVZoWkcwdWF6aHpMbWx2TDNZeFltVjBZVFFLSUNBZ0lDQWdZbTkwZEd4bGNtOWphMlYwUVdSdGFXNDZJSHQ5Q2lBZ0lDQWdJR0p2ZEhSc1pYSnZZMnRsZEVKdmIzUnpkSEpoY0RvS0lDQWdJQ0FnSUNCcGJXRm5aVkpsY0c5emFYUnZjbms2SUhCMVlteHBZeTVsWTNJdVlYZHpMMnd3WnpoeU9HbzJMMkp2ZEhSc1pYSnZZMnRsZEMxaWIyOTBjM1J5WVhBS0lDQWdJQ0FnSUNCcGJXRm5aVlJoWnpvZ2RqRXRNek10TVRJdFpXdHpMV0V0ZGpBdU1qUXVNQzFrWlhZdFluVnBiR1F1TVRZNUNpQWdJQ0FnSUdKdmRIUnNaWEp2WTJ0bGRFTnZiblJ5YjJ3NklIdDlDaUFnSUNBZ0lHTmxjblJwWm1sallYUmxjMFJwY2pvZ0wzWmhjaTlzYVdJdmEzVmlaV0ZrYlM5d2Eya0tJQ0FnSUNBZ1kyeDFjM1JsY2s1aGJXVTZJR0p2ZEhSc1pYSnZZMnRsZEMweE16TUtJQ0FnSUNBZ1kyOXVkSEp2YkZCc1lXNWxSVzVrY0c5cGJuUTZJREU1TlM0eE55NHhNaTQ1TWpvMk5EUXpDaUFnSUNBZ0lHTnZiblJ5YjJ4c1pYSk5ZVzVoWjJWeU9nb2dJQ0FnSUNBZ0lHVjRkSEpoUVhKbmN6b0tJQ0FnSUNBZ0lDQXRJRzVoYldVNklHTnNiM1ZrTFhCeWIzWnBaR1Z5Q2lBZ0lDQWdJQ0FnSUNCMllXeDFaVG9nWlhoMFpYSnVZV3dLSUNBZ0lDQWdJQ0F0SUc1aGJXVTZJSEJ5YjJacGJHbHVad29nSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJR1poYkhObENpQWdJQ0FnSUNBZ0xTQnVZVzFsT2lCMGJITXRZMmx3YUdWeUxYTjFhWFJsY3dvZ0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SUZSTVUxOUZRMFJJUlY5U1UwRmZWMGxVU0Y5QlJWTmZNVEk0WDBkRFRWOVRTRUV5TlRZS0lDQWdJQ0FnSUNCbGVIUnlZVlp2YkhWdFpYTTZDaUFnSUNBZ0lDQWdMU0JvYjNOMFVHRjBhRG9nTDNaaGNpOXNhV0l2YTNWaVpXRmtiUzlqYjI1MGNtOXNiR1Z5TFcxaGJtRm5aWEl1WTI5dVpnb2dJQ0FnSUNBZ0lDQWdiVzkxYm5SUVlYUm9PaUF2WlhSakwydDFZbVZ5Ym1WMFpYTXZZMjl1ZEhKdmJHeGxjaTF0WVc1aFoyVnlMbU52Ym1ZS0lDQWdJQ0FnSUNBZ0lHNWhiV1U2SUd0MVltVmpiMjVtYVdjS0lDQWdJQ0FnSUNBZ0lIQmhkR2hVZVhCbE9pQkdhV3hsQ2lBZ0lDQWdJQ0FnSUNCeVpXRmtUMjVzZVRvZ2RISjFaUW9nSUNBZ0lDQmtibk02Q2lBZ0lDQWdJQ0FnYVcxaFoyVlNaWEJ2YzJsMGIzSjVPaUJ3ZFdKc2FXTXVaV055TG1GM2N5OWxhM010WkdsemRISnZMMk52Y21Wa2JuTUtJQ0FnSUNBZ0lDQnBiV0ZuWlZSaFp6b2dkakV1TVRJdU1pMWxhM010TVMwek15MHhNZ29nSUNBZ0lDQmxkR05rT2dvZ0lDQWdJQ0FnSUd4dlkyRnNPZ29nSUNBZ0lDQWdJQ0FnWkdGMFlVUnBjam9nQ2lBZ0lDQWdJQ0FnSUNCbGVIUnlZVUZ5WjNNNkNpQWdJQ0FnSUNBZ0lDQXRJRzVoYldVNklHTnBjR2hsY2kxemRXbDBaWE1LSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SUZSTVUxOUZRMFJJUlY5U1UwRmZWMGxVU0Y5QlJWTmZNVEk0WDBkRFRWOVRTRUV5TlRZS0lDQWdJQ0FnSUNBZ0lHbHRZV2RsVW1Wd2IzTnBkRzl5ZVRvZ2NIVmliR2xqTG1WamNpNWhkM012Wld0ekxXUnBjM1J5Ynk5bGRHTmtMV2x2Q2lBZ0lDQWdJQ0FnSUNCcGJXRm5aVlJoWnpvZ2RqTXVOUzR4TmkxbGEzTXRNUzB6TXkweE1nb2dJQ0FnSUNCbVpXRjBkWEpsUjJGMFpYTTZDaUFnSUNBZ0lDQWdRMjl1ZEhKdmJGQnNZVzVsUzNWaVpXeGxkRXh2WTJGc1RXOWtaVG9nZEhKMVpRb2dJQ0FnSUNCcGJXRm5aVkpsY0c5emFYUnZjbms2SUhCMVlteHBZeTVsWTNJdVlYZHpMMlZyY3kxa2FYTjBjbTh2YTNWaVpYSnVaWFJsY3dvZ0lDQWdJQ0JyYVc1a09pQkRiSFZ6ZEdWeVEyOXVabWxuZFhKaGRHbHZiZ29nSUNBZ0lDQnJkV0psY201bGRHVnpWbVZ5YzJsdmJqb2dkakV1TXpNdU5DMWxhM010TVMwek15MHhNZ29nSUNBZ0lDQnVaWFIzYjNKcmFXNW5PZ29nSUNBZ0lDQWdJSEJ2WkZOMVltNWxkRG9nTVRreUxqRTJPQzR3TGpBdk1UWUtJQ0FnSUNBZ0lDQnpaWEoyYVdObFUzVmlibVYwT2lBeE1DNHhNREF1TUM0d0x6RXlDaUFnSUNBZ0lIQmhkWE5sT2dvZ0lDQWdJQ0FnSUdsdFlXZGxVbVZ3YjNOcGRHOXllVG9nY0hWaWJHbGpMbVZqY2k1aGQzTXZaV3R6TFdScGMzUnlieTlyZFdKbGNtNWxkR1Z6TDNCaGRYTmxDaUFnSUNBZ0lDQWdhVzFoWjJWVVlXYzZJSFl4TGpNekxqUXRaV3R6TFRFdE16TXRNVElLSUNBZ0lDQWdjSEp2ZUhrNklIdDlDaUFnSUNBZ0lISmxaMmx6ZEhKNVRXbHljbTl5T2lCN2ZRb2dJQ0FnSUNCelkyaGxaSFZzWlhJNkNpQWdJQ0FnSUNBZ1pYaDBjbUZCY21kek9nb2dJQ0FnSUNBZ0lDMGdibUZ0WlRvZ2NISnZabWxzYVc1bkNpQWdJQ0FnSUNBZ0lDQjJZV3gxWlRvZ1ptRnNjMlVLSUNBZ0lDQWdJQ0F0SUc1aGJXVTZJSFJzY3kxamFYQm9aWEl0YzNWcGRHVnpDaUFnSUNBZ0lDQWdJQ0IyWVd4MVpUb2dWRXhUWDBWRFJFaEZYMUpUUVY5WFNWUklYMEZGVTE4eE1qaGZSME5OWDFOSVFUSTFOZ29nSUNBZ0lDQWdJR1Y0ZEhKaFZtOXNkVzFsY3pvS0lDQWdJQ0FnSUNBdElHaHZjM1JRWVhSb09pQXZkbUZ5TDJ4cFlpOXJkV0psWVdSdEwzTmphR1ZrZFd4bGNpNWpiMjVtQ2lBZ0lDQWdJQ0FnSUNCdGIzVnVkRkJoZEdnNklDOWxkR012YTNWaVpYSnVaWFJsY3k5elkyaGxaSFZzWlhJdVkyOXVaZ29nSUNBZ0lDQWdJQ0FnYm1GdFpUb2dhM1ZpWldOdmJtWnBad29nSUNBZ0lDQWdJQ0FnY0dGMGFGUjVjR1U2SUVacGJHVUtJQ0FnSUNBZ0lDQWdJSEpsWVdSUGJteDVPaUIwY25WbENpQWdJQ0FnSUFvZ0lDQWdJQ0F0TFMwS0lDQWdJQ0FnWVhCcFZtVnljMmx2YmpvZ2EzVmlaV0ZrYlM1ck9ITXVhVzh2ZGpGaVpYUmhOQW9nSUNBZ0lDQnJhVzVrT2lCSmJtbDBRMjl1Wm1sbmRYSmhkR2x2YmdvZ0lDQWdJQ0JzYjJOaGJFRlFTVVZ1WkhCdmFXNTBPaUI3ZlFvZ0lDQWdJQ0J1YjJSbFVtVm5hWE4wY21GMGFXOXVPZ29nSUNBZ0lDQWdJR055YVZOdlkydGxkRG9nTDNaaGNpOXlkVzR2WTI5dWRHRnBibVZ5WkM5amIyNTBZV2x1WlhKa0xuTnZZMnNLSUNBZ0lDQWdJQ0JwYldGblpWQjFiR3hRYjJ4cFkzazZJRWxtVG05MFVISmxjMlZ1ZEFvZ0lDQWdJQ0FnSUd0MVltVnNaWFJGZUhSeVlVRnlaM002Q2lBZ0lDQWdJQ0FnTFNCdVlXMWxPaUJoYm05dWVXMXZkWE10WVhWMGFBb2dJQ0FnSUNBZ0lDQWdkbUZzZFdVNklHWmhiSE5sQ2lBZ0lDQWdJQ0FnTFNCdVlXMWxPaUJqYkc5MVpDMXdjbTkyYVdSbGNnb2dJQ0FnSUNBZ0lDQWdkbUZzZFdVNklHVjRkR1Z5Ym1Gc0NpQWdJQ0FnSUNBZ0xTQnVZVzFsT2lCeVpXRmtMVzl1YkhrdGNHOXlkQW9nSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJREFLSUNBZ0lDQWdJQ0F0SUc1aGJXVTZJSFJzY3kxamFYQm9aWEl0YzNWcGRHVnpDaUFnSUNBZ0lDQWdJQ0IyWVd4MVpUb2dWRXhUWDBWRFJFaEZYMUpUUVY5WFNWUklYMEZGVTE4eE1qaGZSME5OWDFOSVFUSTFOZ29nSUNBZ0lDQWdJRzVoYldVNklDZDdleUJrY3k1dFpYUmhYMlJoZEdFdWFHOXpkRzVoYldVZ2ZYMG5DaUFnSUNBZ0lDQWdkR0ZwYm5Sek9pQnVkV3hzQ2lBZ0lDQWdJQXB5ZFc1amJXUTZJRU52Ym5SeWIyeFFiR0Z1WlVsdWFYUUsKCltzZXR0aW5ncy5rdWJlcm5ldGVzXQpjbHVzdGVyLWRvbWFpbiA9IGNsdXN0ZXIubG9jYWwKc3RhbmRhbG9uZS1tb2RlID0gdHJ1ZQphdXRoZW50aWNhdGlvbi1tb2RlID0gdGxzCnNlcnZlci10bHMtYm9vdHN0cmFwID0gZmFsc2UKcG9kLWluZnJhLWNvbnRhaW5lci1pbWFnZSA9IHB1YmxpYy5lY3IuYXdzL2Vrcy1kaXN0cm8va3ViZXJuZXRlcy9wYXVzZTp2MS4zMy40LWVrcy0xLTMzLTEyCgo="
        guestinfo.userdata.encoding: "base64"
