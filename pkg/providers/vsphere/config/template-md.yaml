apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
kind: KubeadmConfigTemplate
metadata:
  name: {{.workloadkubeadmconfigTemplateName}}
  namespace: {{.eksaSystemNamespace}}
spec:
  template:
    spec:
      joinConfiguration:
{{- if .kubeletConfiguration }}
        patches: 
          directory: /etc/kubernetes/patches
{{- end }}
{{- if (eq .format "bottlerocket") }}
        pause:
          imageRepository: {{.pauseRepository}}
          imageTag: {{.pauseVersion}}
        bottlerocketBootstrap:
          imageRepository: {{.bottlerocketBootstrapRepository}}
          imageTag: {{.bottlerocketBootstrapVersion}}
{{- end }}
{{- if and .proxyConfig (eq .format "bottlerocket") }}
        proxy:
          httpsProxy: {{.httpsProxy}}
          noProxy: {{ range .noProxy }}
            - {{ . }}
          {{- end }}
{{- end }}
{{- if and .registryMirrorMap (eq .format "bottlerocket") }}
        registryMirror:
          {{- if .publicECRMirror }}
          endpoint: {{ .publicECRMirror }}
          {{- end }}
          {{- if .registryCACert }}
          caCert: |
{{ .registryCACert | indent 12 }}
          {{- end }}
          {{- if not .publicECRMirror }}
          mirrors:
          {{- range $orig, $mirror := .registryMirrorMap }}
            - registry: "{{ $orig }}"
              endpoints:
              - {{ $mirror }}
          {{- end }}
          {{- end }}
{{- end }}
{{- if .bottlerocketSettings }}
{{ .bottlerocketSettings | indent 8 }}
{{- end }}
{{- if .certBundles }}
        certBundles:
        {{- range .certBundles }}
        - name: "{{ .Name }}"
          data: |
{{ .Data | indent 12 }}
        {{- end }}
{{- end }}
        nodeRegistration:
          criSocket: /var/run/containerd/containerd.sock
{{- if .workerNodeGroupTaints }}
          taints:{{ range .workerNodeGroupTaints}}
            - key: {{ .Key }}
              value: {{ .Value }}
              effect: {{ .Effect }}
{{- if .TimeAdded }}
              timeAdded: {{ .TimeAdded }}
{{- end }}
{{- end }}
{{- else}}
          taints: []
{{- end }}
          kubeletExtraArgs:
            cloud-provider: external
{{- if not .kubeletConfiguration }}
            read-only-port: "0"
            anonymous-auth: "false"
{{- if .cgroupDriverSystemd}}
            cgroup-driver: systemd
{{- end }}
{{- if .kubeletExtraArgs }}
{{ .kubeletExtraArgs.ToYaml | indent 12 }}
{{- end }}
{{- end }}
{{- if .nodeLabelArgs }}
{{ .nodeLabelArgs.ToYaml | indent 12 }}
{{- end }}
          name: '{{"{{"}} ds.meta_data.hostname {{"}}"}}'
{{- if or (and (ne .format "bottlerocket") (or .proxyConfig .registryMirrorMap)) .kubeletConfiguration }}
      files:
{{- end }}
{{- if .kubeletConfiguration }}
      - content: |
{{ .kubeletConfiguration | indent 10 }}
        owner: root:root
        permissions: "0644"
        path: /etc/kubernetes/patches/kubeletconfiguration0+strategic.yaml
{{- end }}
{{- if and .proxyConfig (ne .format "bottlerocket") }}
      - content: |
          [Service]
          Environment="HTTP_PROXY={{.httpProxy}}"
          Environment="HTTPS_PROXY={{.httpsProxy}}"
          Environment="NO_PROXY={{ stringsJoin .noProxy "," }}"
        owner: root:root
        path: /etc/systemd/system/containerd.service.d/http-proxy.conf
{{- end }}
{{- if (ne .format "bottlerocket") }}
{{- if .registryCACert }}
      - content: |
{{ .registryCACert | indent 10 }}
        owner: root:root
        path: "/etc/containerd/certs.d/{{ .mirrorBase }}/ca.crt"
{{- end }}
{{- if .registryMirrorMap }}
      - content: |
          [plugins."io.containerd.grpc.v1.cri".registry.mirrors]
            {{- range $orig, $mirror := .registryMirrorMap }}
            [plugins."io.containerd.grpc.v1.cri".registry.mirrors."{{ $orig }}"]
              endpoint = ["https://{{ $mirror }}"]
            {{- end }}
            {{- if or .registryCACert .insecureSkip }}
            [plugins."io.containerd.grpc.v1.cri".registry.configs."{{ .mirrorBase }}".tls]
            {{- if .registryCACert }}
              ca_file = "/etc/containerd/certs.d/{{ .mirrorBase }}/ca.crt"
            {{- end }}
            {{- if .insecureSkip }}
              insecure_skip_verify = {{.insecureSkip}}
            {{- end }}
            {{- end }}
            {{- if .registryAuth }}
            [plugins."io.containerd.grpc.v1.cri".registry.configs."{{ .mirrorBase }}".auth]
              username = "{{.registryUsername}}"
              password = "{{.registryPassword}}"
            {{- end }}
        owner: root:root
        path: "/etc/containerd/config_append.toml"
{{- end }}
{{- end }}
{{- if .ntpServers }}
      ntp:
        enabled: true
        servers: {{ range .ntpServers }}
        - {{ . }}
        {{- end }}
{{- end }}
      preKubeadmCommands:
{{- if and .registryMirrorMap (ne .format "bottlerocket") }}
      - cat /etc/containerd/config_append.toml >> /etc/containerd/config.toml
{{- end }}
{{- if and (or .proxyConfig .registryMirrorMap) (ne .format "bottlerocket") }}
      - sudo systemctl daemon-reload
      - sudo systemctl restart containerd
{{- end }}
      - hostname "{{`{{ ds.meta_data.hostname }}`}}"
      - echo "::1         ipv6-localhost ipv6-loopback" >/etc/hosts
      - echo "127.0.0.1   localhost" >>/etc/hosts
      - echo "127.0.0.1   {{`{{ ds.meta_data.hostname }}`}}" >>/etc/hosts
      - echo "{{`{{ ds.meta_data.hostname }}`}}" >/etc/hostname
      users:
      - name: {{.workerSshUsername}}
        sshAuthorizedKeys:
        - '{{.vsphereWorkerSshAuthorizedKey}}'
        sudo: ALL=(ALL) NOPASSWD:ALL
      format: {{.format}}
---
apiVersion: cluster.x-k8s.io/v1beta1
kind: MachineDeployment
metadata:
  labels:
    cluster.x-k8s.io/cluster-name: {{.clusterName}}
  name: {{.workerNodeGroupName}}
  namespace: {{.eksaSystemNamespace}}
{{- if .autoscalingConfig }}
  annotations:
    cluster.x-k8s.io/cluster-api-autoscaler-node-group-min-size: "{{ .autoscalingConfig.MinCount }}"
    cluster.x-k8s.io/cluster-api-autoscaler-node-group-max-size: "{{ .autoscalingConfig.MaxCount }}"
{{- end }}
spec:
  clusterName: {{.clusterName}}
{{- if not .autoscalingConfig }}
  replicas: {{.workerReplicas}}
{{- end }}
  selector:
    matchLabels: {}
  template:
    metadata:
      labels:
        cluster.x-k8s.io/cluster-name: {{.clusterName}}
    spec:
      bootstrap:
        configRef:
          apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
          kind: KubeadmConfigTemplate
          name: {{.workloadkubeadmconfigTemplateName}}
      clusterName: {{.clusterName}}
      infrastructureRef:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        kind: VSphereMachineTemplate
        name: {{.workloadTemplateName}}
      version: {{.kubernetesVersion}}
{{- if .failureDomain }}
      failureDomain: {{.failureDomain}}
{{- end }}
{{- if .upgradeRolloutStrategy }}
  strategy:
{{- if (eq .upgradeRolloutStrategyType "InPlace") }}
    type: {{.upgradeRolloutStrategyType}}
{{- else}}
    rollingUpdate:
      maxSurge: {{.maxSurge}}
      maxUnavailable: {{.maxUnavailable}}
{{- end }}
{{- end }}
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: VSphereMachineTemplate
metadata:
  name: {{.workloadTemplateName}}
  namespace: {{.eksaSystemNamespace}}
spec:
  template:
    spec:
      cloneMode: {{.workerCloneMode}}
      datacenter: '{{.vsphereDatacenter}}'
      datastore: {{.workerVsphereDatastore}}
      diskGiB: {{.workloadDiskGiB}}
      folder: '{{.workerVsphereFolder}}'
      memoryMiB: {{.workloadVMsMemoryMiB}}
      network:
        devices:
{{- if .vsphereMultiNetworks }}
        {{range .vsphereMultiNetworks}}
        - dhcp4: true
          networkName: {{.}}
        {{- end }}
{{- else}}
        - dhcp4: true
          networkName: {{.vsphereNetwork}}
{{- end }}
      numCPUs: {{.workloadVMsNumCPUs}}
      resourcePool: '{{.workerVsphereResourcePool}}'
      server: {{.vsphereServer}}
{{- if (ne .workerVsphereStoragePolicyName "") }}
      storagePolicyName: "{{.workerVsphereStoragePolicyName}}"
{{- end }}
      template: {{.workerTemplate}}
      thumbprint: '{{.thumbprint}}'
{{- if .workerTagIDs }}
      tagIDs:
      {{- range .workerTagIDs }}
      - {{ . }}
      {{- end }}
{{- end }}
# #cloud-config
# write_files:
#   - path: /var/lib/netdog/net.toml
#     content: |
#       version = 2
#       [eth0]
#       dhcp4 = true
#       primary = true
#       [eth1]
#       dhcp4 = true
#     permissions: '0644'
# runcmd:
#   - systemctl restart netdog
#   - sleep 10  # Wait for network to be ready

      customVMXKeys:
        guestinfo.userdata: "CltzZXR0aW5ncy5ob3N0LWNvbnRhaW5lcnMuYWRtaW5dCmVuYWJsZWQgPSB0cnVlCnN1cGVycG93ZXJlZCA9IHRydWUKdXNlci1kYXRhID0gIkNuc0tDU0p6YzJnaU9pQjdDZ2tKSW1GMWRHaHZjbWw2WldRdGEyVjVjeUk2SUZzaWMzTm9MWEp6WVNCQlFVRkJRak5PZW1GRE1YbGpNa1ZCUVVGQlJFRlJRVUpCUVVGQ1FWRkRhMU4yYlRoeFNYRlpRMHR0YkM5SlkzbFJjWGhaUlhwMmEwRlZRMVZyVTBkMlVubFJjVUlyWVhOM1YwVnpVRlJDTURKMWRrOHhWeTlsZVVaaGVuRnZhV2RUVWpadFVreElSa1JTUlRSYVNGUjFVVEF6UzFGaWFuZFZTMHRhV25BeFdYQnlhM1J2ZUV0dGRrRnJiME5LZFV4WUszaEJTR0ZVTmxGRk9GTnJNWEZyWVRFMVdVZERZWEl5TkhWNFREY3hRVTlsU1ZaVGRIbEZTRVJZVFdaM1pIUkZWemxSZWsxYWVVWXpORzU1VFZnd05GWkliVU5OVjNWWFdEZFlZMFJNUVdSdlFXcE1NemhwT0U1NFRFTTJNVWRHTm5oVVlUSm5NRzFNWkVnM1oyTXdaMnRJWWxOcmJ6Tk5lVmxWVHk5SlJtazVjbk40Vms5clptb3JiUzlQZWpWa1JqVkNSM2hMWjNBNE1UWXhibFk1UTBrNFZ6VTJXbWhOUlZkbU4zcDJSbXBKY0ZGRWRYTndOWE5FY0hkVlV6SkllWFpxWVd4cFRETTVkazlzS3l0VGJrUkNjRmRUWVd4T04wWjVNSGRHU1VSVVNWb2lYUW9KZlFwOSIKW3NldHRpbmdzLmhvc3QtY29udGFpbmVycy5rdWJlYWRtLWJvb3RzdHJhcF0KZW5hYmxlZCA9IHRydWUKc3VwZXJwb3dlcmVkID0gdHJ1ZQpzb3VyY2UgPSAicHVibGljLmVjci5hd3MvbDBnOHI4ajYvYm90dGxlcm9ja2V0LWJvb3RzdHJhcDp2MS0zMy0xMi1la3MtYS12MC4yNC4wLWRldi1idWlsZC4xNjkiCnVzZXItZGF0YSA9ICJkM0pwZEdWZlptbHNaWE02Q2kwZ0lDQndZWFJvT2lBdmRHMXdMMlJsWW5WbkxXbHVkR1Z5Wm1GalpYTXVjMmdLSUNBZ0lDQWdjR1Z5YldsemMybHZibk02SUNjd056VTFKd29nSUNBZ0lDQmpiMjUwWlc1ME9pQjhDaUFnSUNBZ0lDQWdJeUV2WW1sdUwySmhjMmdLSUNBZ0lDQWdJQ0JsWTJodklDSTlQVDBnVG1WMGQyOXlheUJKYm5SbGNtWmhZMlZ6SUVSbFluVm5JRDA5UFNJZ1BpQXZkRzF3TDJsdWRHVnlabUZqWlMxa1pXSjFaeTVzYjJjS0lDQWdJQ0FnSUNCbFkyaHZJQ0pFWVhSbE9pQWtLR1JoZEdVcElpQStQaUF2ZEcxd0wybHVkR1Z5Wm1GalpTMWtaV0oxWnk1c2IyY0tJQ0FnSUNBZ0lDQmxZMmh2SUNJaUlENCtJQzkwYlhBdmFXNTBaWEptWVdObExXUmxZblZuTG14dlp3b2dJQ0FnSUNBZ0lBb2dJQ0FnSUNBZ0lHVmphRzhnSWtGc2JDQnVaWFIzYjNKcklHbHVkR1Z5Wm1GalpYTTZJaUErUGlBdmRHMXdMMmx1ZEdWeVptRmpaUzFrWldKMVp5NXNiMmNLSUNBZ0lDQWdJQ0JwY0NCc2FXNXJJSE5vYjNjZ1BqNGdMM1J0Y0M5cGJuUmxjbVpoWTJVdFpHVmlkV2N1Ykc5bkNpQWdJQ0FnSUNBZ1pXTm9ieUFpSWlBK1BpQXZkRzF3TDJsdWRHVnlabUZqWlMxa1pXSjFaeTVzYjJjS0lDQWdJQ0FnSUNBS0lDQWdJQ0FnSUNCbFkyaHZJQ0pKYm5SbGNtWmhZMlVnWkdWMFlXbHNjem9pSUQ0K0lDOTBiWEF2YVc1MFpYSm1ZV05sTFdSbFluVm5MbXh2WndvZ0lDQWdJQ0FnSUdsd0lHRmtaSElnYzJodmR5QStQaUF2ZEcxd0wybHVkR1Z5Wm1GalpTMWtaV0oxWnk1c2IyY0tJQ0FnSUNBZ0lDQmxZMmh2SUNJaUlENCtJQzkwYlhBdmFXNTBaWEptWVdObExXUmxZblZuTG14dlp3b2dJQ0FnSUNBZ0lBb2dJQ0FnSUNBZ0lHVmphRzhnSWxCRFNTQnVaWFIzYjNKcklHUmxkbWxqWlhNNklpQStQaUF2ZEcxd0wybHVkR1Z5Wm1GalpTMWtaV0oxWnk1c2IyY0tJQ0FnSUNBZ0lDQnNjM0JqYVNCOElHZHlaWEFnTFdrZ2JtVjBkMjl5YXlBK1BpQXZkRzF3TDJsdWRHVnlabUZqWlMxa1pXSjFaeTVzYjJjS0lDQWdJQ0FnSUNCbFkyaHZJQ0lpSUQ0K0lDOTBiWEF2YVc1MFpYSm1ZV05sTFdSbFluVm5MbXh2WndvZ0lDQWdJQ0FnSUFvZ0lDQWdJQ0FnSUdWamFHOGdJa3RsY201bGJDQnVaWFIzYjNKcklHMXZaSFZzWlhNNklpQStQaUF2ZEcxd0wybHVkR1Z5Wm1GalpTMWtaV0oxWnk1c2IyY0tJQ0FnSUNBZ0lDQnNjMjF2WkNCOElHZHlaWEFnTFVVZ0lpaGxNVEF3TUh4MmJYaHVaWFI4ZG1seWRHbHZLU0lnUGo0Z0wzUnRjQzlwYm5SbGNtWmhZMlV0WkdWaWRXY3ViRzluQ2kwZ0lDQndZWFJvT2lBdmRtRnlMMnhwWWk5dVpYUmtiMmN2Ym1WMExuUnZiV3dLSUNBZ0lDQWdZMjl1ZEdWdWREb2dmQW9nSUNBZ0lDQWdJSFpsY25OcGIyNGdQU0F5Q2lBZ0lDQWdJQ0FnVzJWMGFEQmRDaUFnSUNBZ0lDQWdaR2hqY0RRZ1BTQjBjblZsQ2lBZ0lDQWdJQ0FnY0hKcGJXRnllU0E5SUhSeWRXVUtJQ0FnSUNBZ0lDQmJaWFJvTVYwS0lDQWdJQ0FnSUNCa2FHTndOQ0E5SUhSeWRXVUtJQ0FnSUNBZ2NHVnliV2x6YzJsdmJuTTZJQ2N3TmpRMEp3b3RJQ0FnY0dGMGFEb2dMM1J0Y0M5cmRXSmxZV1J0TFdwdmFXNHRZMjl1Wm1sbkxubGhiV3dLSUNBZ0lHOTNibVZ5T2lCeWIyOTBPbkp2YjNRS0lDQWdJSEJsY20xcGMzTnBiMjV6T2lBbk1EWTBNQ2NLSUNBZ0lHTnZiblJsYm5RNklId0tJQ0FnSUNBZ0xTMHRDaUFnSUNBZ0lHRndhVlpsY25OcGIyNDZJR3QxWW1WaFpHMHVhemh6TG1sdkwzWXhZbVYwWVRRS0lDQWdJQ0FnWW05MGRHeGxjbTlqYTJWMFFXUnRhVzQ2SUh0OUNpQWdJQ0FnSUdKdmRIUnNaWEp2WTJ0bGRFSnZiM1J6ZEhKaGNEb0tJQ0FnSUNBZ0lDQnBiV0ZuWlZKbGNHOXphWFJ2Y25rNklIQjFZbXhwWXk1bFkzSXVZWGR6TDJ3d1p6aHlPR28yTDJKdmRIUnNaWEp2WTJ0bGRDMWliMjkwYzNSeVlYQUtJQ0FnSUNBZ0lDQnBiV0ZuWlZSaFp6b2dkakV0TXpNdE1USXRaV3R6TFdFdGRqQXVNalF1TUMxa1pYWXRZblZwYkdRdU1UWTVDaUFnSUNBZ0lHSnZkSFJzWlhKdlkydGxkRU52Ym5SeWIydzZJSHQ5Q2lBZ0lDQWdJR1JwYzJOdmRtVnllVG9LSUNBZ0lDQWdJQ0JpYjI5MGMzUnlZWEJVYjJ0bGJqb0tJQ0FnSUNBZ0lDQWdJR0Z3YVZObGNuWmxja1Z1WkhCdmFXNTBPaUF4T1RVdU1UY3VNVEl1T1RNNk5qUTBNd29nSUNBZ0lDQWdJQ0FnWTJGRFpYSjBTR0Z6YUdWek9nb2dJQ0FnSUNBZ0lDQWdMU0J6YUdFeU5UWTZaalk1TldKa1pqbGtNMll6WVRnd1pETm1NekEyTVRFMFpHWTNNMkk0TW1RMk9XTmhOREF3TVdNeE5XVmtOakppTkdNek5qTmhNemRoT0RneE5UQm1Zd29nSUNBZ0lDQWdJQ0FnZEc5clpXNDZJRzVpY25GeWRTNXJjek5uWVdzd2F6RTVPR0kzWjNsMENpQWdJQ0FnSUd0cGJtUTZJRXB2YVc1RGIyNW1hV2QxY21GMGFXOXVDaUFnSUNBZ0lHNXZaR1ZTWldkcGMzUnlZWFJwYjI0NkNpQWdJQ0FnSUNBZ1kzSnBVMjlqYTJWME9pQXZkbUZ5TDNKMWJpOWpiMjUwWVdsdVpYSmtMMk52Ym5SaGFXNWxjbVF1YzI5amF3b2dJQ0FnSUNBZ0lHbHRZV2RsVUhWc2JGQnZiR2xqZVRvZ1NXWk9iM1JRY21WelpXNTBDaUFnSUNBZ0lDQWdhM1ZpWld4bGRFVjRkSEpoUVhKbmN6b0tJQ0FnSUNBZ0lDQXRJRzVoYldVNklHRnViMjU1Ylc5MWN5MWhkWFJvQ2lBZ0lDQWdJQ0FnSUNCMllXeDFaVG9nSW1aaGJITmxJZ29nSUNBZ0lDQWdJQzBnYm1GdFpUb2dZMnh2ZFdRdGNISnZkbWxrWlhJS0lDQWdJQ0FnSUNBZ0lIWmhiSFZsT2lCbGVIUmxjbTVoYkFvZ0lDQWdJQ0FnSUMwZ2JtRnRaVG9nY21WaFpDMXZibXg1TFhCdmNuUUtJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQWlNQ0lLSUNBZ0lDQWdJQ0F0SUc1aGJXVTZJSFJzY3kxamFYQm9aWEl0YzNWcGRHVnpDaUFnSUNBZ0lDQWdJQ0IyWVd4MVpUb2dWRXhUWDBWRFJFaEZYMUpUUVY5WFNWUklYMEZGVTE4eE1qaGZSME5OWDFOSVFUSTFOZ29nSUNBZ0lDQWdJRzVoYldVNklDZDdleUJrY3k1dFpYUmhYMlJoZEdFdWFHOXpkRzVoYldVZ2ZYMG5DaUFnSUNBZ0lDQWdkR0ZwYm5Sek9nb2dJQ0FnSUNBZ0lDMGdaV1ptWldOME9pQk9iMU5qYUdWa2RXeGxDaUFnSUNBZ0lDQWdJQ0JyWlhrNklHNXZaR1V1WTJ4MWMzUmxjaTU0TFdzNGN5NXBieTkxYm1sdWFYUnBZV3hwZW1Wa0NpQWdJQ0FnSUhCaGRYTmxPZ29nSUNBZ0lDQWdJR2x0WVdkbFVtVndiM05wZEc5eWVUb2djSFZpYkdsakxtVmpjaTVoZDNNdlpXdHpMV1JwYzNSeWJ5OXJkV0psY201bGRHVnpMM0JoZFhObENpQWdJQ0FnSUNBZ2FXMWhaMlZVWVdjNklIWXhMak16TGpRdFpXdHpMVEV0TXpNdE1USUtJQ0FnSUNBZ2NISnZlSGs2SUh0OUNpQWdJQ0FnSUhKbFoybHpkSEo1VFdseWNtOXlPaUI3ZlFvZ0lDQWdJQ0FLY25WdVkyMWtPaUFLSUNBdElDOTBiWEF2WkdWaWRXY3RhVzUwWlhKbVlXTmxjeTV6YUFvZ0lDMGdibVYwWkc5bklHZGxibVZ5WVhSbExXNWxkQzFqYjI1bWFXY0tJQ0F0SUhONWMzUmxiV04wYkNCeVpYTjBZWEowSUhONWMzUmxiV1F0Ym1WMGQyOXlhMlFLSUNBdElDSlhiM0pyWlhKS2IybHVJZz09IgoKW3NldHRpbmdzLmt1YmVybmV0ZXNdCmNsdXN0ZXItZG9tYWluID0gImNsdXN0ZXIubG9jYWwiCnN0YW5kYWxvbmUtbW9kZSA9IHRydWUKYXV0aGVudGljYXRpb24tbW9kZSA9ICJ0bHMiCnNlcnZlci10bHMtYm9vdHN0cmFwID0gZmFsc2UKcG9kLWluZnJhLWNvbnRhaW5lci1pbWFnZSA9ICJwdWJsaWMuZWNyLmF3cy9la3MtZGlzdHJvL2t1YmVybmV0ZXMvcGF1c2U6djEuMzMuNC1la3MtMS0zMy0xMiIKCltzZXR0aW5ncy5uZXR3b3JrXQpob3N0bmFtZSA9ICJib3R0bGVyb2NrZXQtMTMzLWNsdXN0ZXItbWQtMC13Mng0dy00N200cyI="
        guestinfo.userdata.encoding: "base64"
