// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/eks-anywhere/pkg/providers/vsphere/setupuser (interfaces: SetupUserGovcClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSetupUserGovcClient is a mock of SetupUserGovcClient interface.
type MockSetupUserGovcClient struct {
	ctrl     *gomock.Controller
	recorder *MockSetupUserGovcClientMockRecorder
}

// MockSetupUserGovcClientMockRecorder is the mock recorder for MockSetupUserGovcClient.
type MockSetupUserGovcClientMockRecorder struct {
	mock *MockSetupUserGovcClient
}

// NewMockSetupUserGovcClient creates a new mock instance.
func NewMockSetupUserGovcClient(ctrl *gomock.Controller) *MockSetupUserGovcClient {
	mock := &MockSetupUserGovcClient{ctrl: ctrl}
	mock.recorder = &MockSetupUserGovcClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSetupUserGovcClient) EXPECT() *MockSetupUserGovcClientMockRecorder {
	return m.recorder
}

// AddUserToGroup mocks base method.
func (m *MockSetupUserGovcClient) AddUserToGroup(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserToGroup", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUserToGroup indicates an expected call of AddUserToGroup.
func (mr *MockSetupUserGovcClientMockRecorder) AddUserToGroup(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserToGroup", reflect.TypeOf((*MockSetupUserGovcClient)(nil).AddUserToGroup), arg0, arg1, arg2)
}

// CreateGroup mocks base method.
func (m *MockSetupUserGovcClient) CreateGroup(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGroup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGroup indicates an expected call of CreateGroup.
func (mr *MockSetupUserGovcClientMockRecorder) CreateGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroup", reflect.TypeOf((*MockSetupUserGovcClient)(nil).CreateGroup), arg0, arg1)
}

// CreateRole mocks base method.
func (m *MockSetupUserGovcClient) CreateRole(arg0 context.Context, arg1 string, arg2 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRole", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRole indicates an expected call of CreateRole.
func (mr *MockSetupUserGovcClientMockRecorder) CreateRole(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRole", reflect.TypeOf((*MockSetupUserGovcClient)(nil).CreateRole), arg0, arg1, arg2)
}

// CreateUser mocks base method.
func (m *MockSetupUserGovcClient) CreateUser(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockSetupUserGovcClientMockRecorder) CreateUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockSetupUserGovcClient)(nil).CreateUser), arg0, arg1, arg2)
}

// GroupExists mocks base method.
func (m *MockSetupUserGovcClient) GroupExists(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GroupExists indicates an expected call of GroupExists.
func (mr *MockSetupUserGovcClientMockRecorder) GroupExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupExists", reflect.TypeOf((*MockSetupUserGovcClient)(nil).GroupExists), arg0, arg1)
}

// RoleExists mocks base method.
func (m *MockSetupUserGovcClient) RoleExists(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RoleExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RoleExists indicates an expected call of RoleExists.
func (mr *MockSetupUserGovcClientMockRecorder) RoleExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoleExists", reflect.TypeOf((*MockSetupUserGovcClient)(nil).RoleExists), arg0, arg1)
}

// SetGroupRoleOnObject mocks base method.
func (m *MockSetupUserGovcClient) SetGroupRoleOnObject(arg0 context.Context, arg1, arg2, arg3, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetGroupRoleOnObject", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetGroupRoleOnObject indicates an expected call of SetGroupRoleOnObject.
func (mr *MockSetupUserGovcClientMockRecorder) SetGroupRoleOnObject(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGroupRoleOnObject", reflect.TypeOf((*MockSetupUserGovcClient)(nil).SetGroupRoleOnObject), arg0, arg1, arg2, arg3, arg4)
}

// UserExists mocks base method.
func (m *MockSetupUserGovcClient) UserExists(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserExists indicates an expected call of UserExists.
func (mr *MockSetupUserGovcClientMockRecorder) UserExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserExists", reflect.TypeOf((*MockSetupUserGovcClient)(nil).UserExists), arg0, arg1)
}
