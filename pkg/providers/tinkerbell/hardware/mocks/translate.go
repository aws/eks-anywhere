// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/providers/tinkerbell/hardware/translate.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	hardware "github.com/aws/eks-anywhere/pkg/providers/tinkerbell/hardware"
	gomock "github.com/golang/mock/gomock"
)

// MockMachineReader is a mock of MachineReader interface.
type MockMachineReader struct {
	ctrl     *gomock.Controller
	recorder *MockMachineReaderMockRecorder
}

// MockMachineReaderMockRecorder is the mock recorder for MockMachineReader.
type MockMachineReaderMockRecorder struct {
	mock *MockMachineReader
}

// NewMockMachineReader creates a new mock instance.
func NewMockMachineReader(ctrl *gomock.Controller) *MockMachineReader {
	mock := &MockMachineReader{ctrl: ctrl}
	mock.recorder = &MockMachineReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMachineReader) EXPECT() *MockMachineReaderMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockMachineReader) Read() (hardware.Machine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read")
	ret0, _ := ret[0].(hardware.Machine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockMachineReaderMockRecorder) Read() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockMachineReader)(nil).Read))
}

// MockMachineWriter is a mock of MachineWriter interface.
type MockMachineWriter struct {
	ctrl     *gomock.Controller
	recorder *MockMachineWriterMockRecorder
}

// MockMachineWriterMockRecorder is the mock recorder for MockMachineWriter.
type MockMachineWriterMockRecorder struct {
	mock *MockMachineWriter
}

// NewMockMachineWriter creates a new mock instance.
func NewMockMachineWriter(ctrl *gomock.Controller) *MockMachineWriter {
	mock := &MockMachineWriter{ctrl: ctrl}
	mock.recorder = &MockMachineWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMachineWriter) EXPECT() *MockMachineWriterMockRecorder {
	return m.recorder
}

// Write mocks base method.
func (m *MockMachineWriter) Write(arg0 hardware.Machine) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockMachineWriterMockRecorder) Write(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockMachineWriter)(nil).Write), arg0)
}

// MockMachineValidator is a mock of MachineValidator interface.
type MockMachineValidator struct {
	ctrl     *gomock.Controller
	recorder *MockMachineValidatorMockRecorder
}

// MockMachineValidatorMockRecorder is the mock recorder for MockMachineValidator.
type MockMachineValidatorMockRecorder struct {
	mock *MockMachineValidator
}

// NewMockMachineValidator creates a new mock instance.
func NewMockMachineValidator(ctrl *gomock.Controller) *MockMachineValidator {
	mock := &MockMachineValidator{ctrl: ctrl}
	mock.recorder = &MockMachineValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMachineValidator) EXPECT() *MockMachineValidatorMockRecorder {
	return m.recorder
}

// Validate mocks base method.
func (m *MockMachineValidator) Validate(arg0 hardware.Machine) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockMachineValidatorMockRecorder) Validate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockMachineValidator)(nil).Validate), arg0)
}
