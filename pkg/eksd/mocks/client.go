// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/eks-anywhere/pkg/eksd (interfaces: EksdInstallerClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	types "github.com/aws/eks-anywhere/pkg/types"
	gomock "github.com/golang/mock/gomock"
)

// MockEksdInstallerClient is a mock of EksdInstallerClient interface.
type MockEksdInstallerClient struct {
	ctrl     *gomock.Controller
	recorder *MockEksdInstallerClientMockRecorder
}

// MockEksdInstallerClientMockRecorder is the mock recorder for MockEksdInstallerClient.
type MockEksdInstallerClientMockRecorder struct {
	mock *MockEksdInstallerClient
}

// NewMockEksdInstallerClient creates a new mock instance.
func NewMockEksdInstallerClient(ctrl *gomock.Controller) *MockEksdInstallerClient {
	mock := &MockEksdInstallerClient{ctrl: ctrl}
	mock.recorder = &MockEksdInstallerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEksdInstallerClient) EXPECT() *MockEksdInstallerClientMockRecorder {
	return m.recorder
}

// ApplyKubeSpecFromBytesWithNamespace mocks base method.
func (m *MockEksdInstallerClient) ApplyKubeSpecFromBytesWithNamespace(arg0 context.Context, arg1 *types.Cluster, arg2 []byte, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyKubeSpecFromBytesWithNamespace", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyKubeSpecFromBytesWithNamespace indicates an expected call of ApplyKubeSpecFromBytesWithNamespace.
func (mr *MockEksdInstallerClientMockRecorder) ApplyKubeSpecFromBytesWithNamespace(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyKubeSpecFromBytesWithNamespace", reflect.TypeOf((*MockEksdInstallerClient)(nil).ApplyKubeSpecFromBytesWithNamespace), arg0, arg1, arg2, arg3)
}
