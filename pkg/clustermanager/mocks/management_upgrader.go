// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/clustermanager/management_upgrader.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	retrier "github.com/aws/eks-anywhere/pkg/retrier"
	types "github.com/aws/eks-anywhere/pkg/types"
	gomock "github.com/golang/mock/gomock"
)

// MockUpgradeClient is a mock of UpgradeClient interface.
type MockUpgradeClient struct {
	ctrl     *gomock.Controller
	recorder *MockUpgradeClientMockRecorder
}

// MockUpgradeClientMockRecorder is the mock recorder for MockUpgradeClient.
type MockUpgradeClientMockRecorder struct {
	mock *MockUpgradeClient
}

// NewMockUpgradeClient creates a new mock instance.
func NewMockUpgradeClient(ctrl *gomock.Controller) *MockUpgradeClient {
	mock := &MockUpgradeClient{ctrl: ctrl}
	mock.recorder = &MockUpgradeClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpgradeClient) EXPECT() *MockUpgradeClientMockRecorder {
	return m.recorder
}

// WaitForClusterCondition mocks base method.
func (m *MockUpgradeClient) WaitForClusterCondition(ctx context.Context, cluster *types.Cluster, retryClient retrier.Retrier, condition, conditionWaitTimeout string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForClusterCondition", ctx, cluster, retryClient, condition, conditionWaitTimeout)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitForClusterCondition indicates an expected call of WaitForClusterCondition.
func (mr *MockUpgradeClientMockRecorder) WaitForClusterCondition(ctx, cluster, retryClient, condition, conditionWaitTimeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForClusterCondition", reflect.TypeOf((*MockUpgradeClient)(nil).WaitForClusterCondition), ctx, cluster, retryClient, condition, conditionWaitTimeout)
}
